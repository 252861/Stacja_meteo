
meteo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009510  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  080096b0  080096b0  000196b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b44  08009b44  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009b44  08009b44  00019b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b4c  08009b4c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b4c  08009b4c  00019b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b50  08009b50  00019b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200001dc  08009d30  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08009d30  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fd4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248b  00000000  00000000  000321e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00034670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  000356b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ef5  00000000  00000000  00036620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133e8  00000000  00000000  0004e515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092bf0  00000000  00000000  000618fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f44ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e0  00000000  00000000  000f4540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009698 	.word	0x08009698

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08009698 	.word	0x08009698

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9bf 	b.w	8000f58 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af04      	add	r7, sp, #16
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <BMP280_Read8+0x38>)
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	230a      	movs	r3, #10
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	2301      	movs	r3, #1
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	f107 030f 	add.w	r3, r7, #15
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	21ec      	movs	r1, #236	; 0xec
 8000f84:	f002 fc14 	bl	80037b0 <HAL_I2C_Mem_Read>
  return tmp;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200001f8 	.word	0x200001f8

08000f98 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af04      	add	r7, sp, #16
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <BMP280_Read16+0x40>)
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	230a      	movs	r3, #10
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2302      	movs	r3, #2
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	21ec      	movs	r1, #236	; 0xec
 8000fbc:	f002 fbf8 	bl	80037b0 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000fc0:	7b3b      	ldrb	r3, [r7, #12]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	7b7b      	ldrb	r3, [r7, #13]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200001f8 	.word	0x200001f8

08000fdc <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ffd5 	bl	8000f98 <BMP280_Read16>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8000ff2:	89fb      	ldrh	r3, [r7, #14]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	89fb      	ldrh	r3, [r7, #14]
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21b      	sxth	r3, r3
 8001004:	b29b      	uxth	r3, r3
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af04      	add	r7, sp, #16
 8001016:	4603      	mov	r3, r0
 8001018:	460a      	mov	r2, r1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	4613      	mov	r3, r2
 800101e:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <BMP280_Write8+0x34>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	b29a      	uxth	r2, r3
 8001028:	230a      	movs	r3, #10
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	2301      	movs	r3, #1
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	1dbb      	adds	r3, r7, #6
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	21ec      	movs	r1, #236	; 0xec
 8001038:	f002 fac0 	bl	80035bc <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200001f8 	.word	0x200001f8

08001048 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <BMP280_Read24+0x40>)
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	b29a      	uxth	r2, r3
 800105a:	230a      	movs	r3, #10
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2303      	movs	r3, #3
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	21ec      	movs	r1, #236	; 0xec
 800106c:	f002 fba0 	bl	80037b0 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001070:	7b3b      	ldrb	r3, [r7, #12]
 8001072:	041a      	lsls	r2, r3, #16
 8001074:	7b7b      	ldrb	r3, [r7, #13]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	4313      	orrs	r3, r2
 800107a:	7bba      	ldrb	r2, [r7, #14]
 800107c:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001f8 	.word	0x200001f8

0800108c <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	4608      	mov	r0, r1
 8001096:	4611      	mov	r1, r2
 8001098:	461a      	mov	r2, r3
 800109a:	4603      	mov	r3, r0
 800109c:	70fb      	strb	r3, [r7, #3]
 800109e:	460b      	mov	r3, r1
 80010a0:	70bb      	strb	r3, [r7, #2]
 80010a2:	4613      	mov	r3, r2
 80010a4:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80010a6:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <BMP280_Init+0x13c>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d901      	bls.n	80010b6 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80010b2:	2303      	movs	r3, #3
 80010b4:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80010b6:	4a45      	ldr	r2, [pc, #276]	; (80011cc <BMP280_Init+0x140>)
 80010b8:	787b      	ldrb	r3, [r7, #1]
 80010ba:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80010bc:	787b      	ldrb	r3, [r7, #1]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d101      	bne.n	80010c6 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d901      	bls.n	80010d0 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80010cc:	2305      	movs	r3, #5
 80010ce:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80010d0:	4a3f      	ldr	r2, [pc, #252]	; (80011d0 <BMP280_Init+0x144>)
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80010d6:	78bb      	ldrb	r3, [r7, #2]
 80010d8:	2b05      	cmp	r3, #5
 80010da:	d901      	bls.n	80010e0 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80010dc:	2305      	movs	r3, #5
 80010de:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80010e0:	4a3c      	ldr	r2, [pc, #240]	; (80011d4 <BMP280_Init+0x148>)
 80010e2:	78bb      	ldrb	r3, [r7, #2]
 80010e4:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80010e6:	bf00      	nop
 80010e8:	20d0      	movs	r0, #208	; 0xd0
 80010ea:	f7ff ff37 	bl	8000f5c <BMP280_Read8>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b58      	cmp	r3, #88	; 0x58
 80010f2:	d1f9      	bne.n	80010e8 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80010f4:	2088      	movs	r0, #136	; 0x88
 80010f6:	f7ff ff71 	bl	8000fdc <BMP280_Read16LE>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <BMP280_Init+0x14c>)
 8001100:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001102:	208a      	movs	r0, #138	; 0x8a
 8001104:	f7ff ff6a 	bl	8000fdc <BMP280_Read16LE>
 8001108:	4603      	mov	r3, r0
 800110a:	b21a      	sxth	r2, r3
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <BMP280_Init+0x150>)
 800110e:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001110:	208c      	movs	r0, #140	; 0x8c
 8001112:	f7ff ff63 	bl	8000fdc <BMP280_Read16LE>
 8001116:	4603      	mov	r3, r0
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <BMP280_Init+0x154>)
 800111c:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800111e:	208e      	movs	r0, #142	; 0x8e
 8001120:	f7ff ff5c 	bl	8000fdc <BMP280_Read16LE>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <BMP280_Init+0x158>)
 800112a:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800112c:	2090      	movs	r0, #144	; 0x90
 800112e:	f7ff ff55 	bl	8000fdc <BMP280_Read16LE>
 8001132:	4603      	mov	r3, r0
 8001134:	b21a      	sxth	r2, r3
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <BMP280_Init+0x15c>)
 8001138:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800113a:	2092      	movs	r0, #146	; 0x92
 800113c:	f7ff ff4e 	bl	8000fdc <BMP280_Read16LE>
 8001140:	4603      	mov	r3, r0
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <BMP280_Init+0x160>)
 8001146:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001148:	2094      	movs	r0, #148	; 0x94
 800114a:	f7ff ff47 	bl	8000fdc <BMP280_Read16LE>
 800114e:	4603      	mov	r3, r0
 8001150:	b21a      	sxth	r2, r3
 8001152:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <BMP280_Init+0x164>)
 8001154:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001156:	2096      	movs	r0, #150	; 0x96
 8001158:	f7ff ff40 	bl	8000fdc <BMP280_Read16LE>
 800115c:	4603      	mov	r3, r0
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <BMP280_Init+0x168>)
 8001162:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001164:	2098      	movs	r0, #152	; 0x98
 8001166:	f7ff ff39 	bl	8000fdc <BMP280_Read16LE>
 800116a:	4603      	mov	r3, r0
 800116c:	b21a      	sxth	r2, r3
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <BMP280_Init+0x16c>)
 8001170:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001172:	209a      	movs	r0, #154	; 0x9a
 8001174:	f7ff ff32 	bl	8000fdc <BMP280_Read16LE>
 8001178:	4603      	mov	r3, r0
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <BMP280_Init+0x170>)
 800117e:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001180:	209c      	movs	r0, #156	; 0x9c
 8001182:	f7ff ff2b 	bl	8000fdc <BMP280_Read16LE>
 8001186:	4603      	mov	r3, r0
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <BMP280_Init+0x174>)
 800118c:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800118e:	209e      	movs	r0, #158	; 0x9e
 8001190:	f7ff ff24 	bl	8000fdc <BMP280_Read16LE>
 8001194:	4603      	mov	r3, r0
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <BMP280_Init+0x178>)
 800119a:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	015b      	lsls	r3, r3, #5
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	78bb      	ldrb	r3, [r7, #2]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b25a      	sxtb	r2, r3
 80011ac:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4619      	mov	r1, r3
 80011b8:	20f4      	movs	r0, #244	; 0xf4
 80011ba:	f7ff ff29 	bl	8001010 <BMP280_Write8>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001f8 	.word	0x200001f8
 80011cc:	200001fe 	.word	0x200001fe
 80011d0:	200001fc 	.word	0x200001fc
 80011d4:	200001fd 	.word	0x200001fd
 80011d8:	20000214 	.word	0x20000214
 80011dc:	20000200 	.word	0x20000200
 80011e0:	20000202 	.word	0x20000202
 80011e4:	20000216 	.word	0x20000216
 80011e8:	20000204 	.word	0x20000204
 80011ec:	20000206 	.word	0x20000206
 80011f0:	20000208 	.word	0x20000208
 80011f4:	2000020a 	.word	0x2000020a
 80011f8:	2000020c 	.word	0x2000020c
 80011fc:	2000020e 	.word	0x2000020e
 8001200:	20000210 	.word	0x20000210
 8001204:	20000212 	.word	0x20000212

08001208 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800120e:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <BMP280_ReadTemperature+0xfc>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d16d      	bne.n	80012f2 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001216:	20f4      	movs	r0, #244	; 0xf4
 8001218:	f7ff fea0 	bl	8000f5c <BMP280_Read8>
 800121c:	4603      	mov	r3, r0
 800121e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	f023 0303 	bic.w	r3, r3, #3
 8001226:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001228:	7dfb      	ldrb	r3, [r7, #23]
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	4619      	mov	r1, r3
 8001234:	20f4      	movs	r0, #244	; 0xf4
 8001236:	f7ff feeb 	bl	8001010 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800123a:	20f4      	movs	r0, #244	; 0xf4
 800123c:	f7ff fe8e 	bl	8000f5c <BMP280_Read8>
 8001240:	4603      	mov	r3, r0
 8001242:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001244:	7dbb      	ldrb	r3, [r7, #22]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800124c:	7dbb      	ldrb	r3, [r7, #22]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d14f      	bne.n	80012f2 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001252:	20f4      	movs	r0, #244	; 0xf4
 8001254:	f7ff fe82 	bl	8000f5c <BMP280_Read8>
 8001258:	4603      	mov	r3, r0
 800125a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800125c:	7dbb      	ldrb	r3, [r7, #22]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001264:	7dbb      	ldrb	r3, [r7, #22]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d000      	beq.n	800126c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800126a:	e7f2      	b.n	8001252 <BMP280_ReadTemperature+0x4a>
				  break;
 800126c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800126e:	20fa      	movs	r0, #250	; 0xfa
 8001270:	f7ff feea 	bl	8001048 <BMP280_Read24>
 8001274:	4603      	mov	r3, r0
 8001276:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	111b      	asrs	r3, r3, #4
 800127c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	10da      	asrs	r2, r3, #3
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <BMP280_ReadTemperature+0x100>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <BMP280_ReadTemperature+0x104>)
 800128c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001290:	fb02 f303 	mul.w	r3, r2, r3
 8001294:	12db      	asrs	r3, r3, #11
 8001296:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	111b      	asrs	r3, r3, #4
 800129c:	4a1a      	ldr	r2, [pc, #104]	; (8001308 <BMP280_ReadTemperature+0x100>)
 800129e:	8812      	ldrh	r2, [r2, #0]
 80012a0:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	1112      	asrs	r2, r2, #4
 80012a6:	4918      	ldr	r1, [pc, #96]	; (8001308 <BMP280_ReadTemperature+0x100>)
 80012a8:	8809      	ldrh	r1, [r1, #0]
 80012aa:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012b0:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <BMP280_ReadTemperature+0x108>)
 80012b4:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012bc:	139b      	asrs	r3, r3, #14
 80012be:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <BMP280_ReadTemperature+0x10c>)
 80012c8:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <BMP280_ReadTemperature+0x10c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	3380      	adds	r3, #128	; 0x80
 80012d6:	121b      	asrs	r3, r3, #8
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e0:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80012e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001318 <BMP280_ReadTemperature+0x110>
 80012ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012f0:	e001      	b.n	80012f6 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80012f2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800131c <BMP280_ReadTemperature+0x114>
}
 80012f6:	eef0 7a47 	vmov.f32	s15, s14
 80012fa:	eeb0 0a67 	vmov.f32	s0, s15
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200001fe 	.word	0x200001fe
 8001308:	20000214 	.word	0x20000214
 800130c:	20000200 	.word	0x20000200
 8001310:	20000202 	.word	0x20000202
 8001314:	20000218 	.word	0x20000218
 8001318:	42c80000 	.word	0x42c80000
 800131c:	c2c60000 	.word	0xc2c60000

08001320 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001324:	b0cc      	sub	sp, #304	; 0x130
 8001326:	af00      	add	r7, sp, #0
 8001328:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800132c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001330:	f7ff ff6a 	bl	8001208 <BMP280_ReadTemperature>
 8001334:	eef0 7a40 	vmov.f32	s15, s0
 8001338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800133c:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001618 <BMP280_ReadTemperatureAndPressure+0x2f8>
 800134c:	eef4 7a47 	vcmp.f32	s15, s14
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001354:	d101      	bne.n	800135a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8001356:	23ff      	movs	r3, #255	; 0xff
 8001358:	e2bf      	b.n	80018da <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800135a:	20f7      	movs	r0, #247	; 0xf7
 800135c:	f7ff fe74 	bl	8001048 <BMP280_Read24>
 8001360:	4603      	mov	r3, r0
 8001362:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 8001366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800136a:	111b      	asrs	r3, r3, #4
 800136c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001370:	4baa      	ldr	r3, [pc, #680]	; (800161c <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	17da      	asrs	r2, r3, #31
 8001376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800137a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800137e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001382:	460b      	mov	r3, r1
 8001384:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001388:	64bb      	str	r3, [r7, #72]	; 0x48
 800138a:	4613      	mov	r3, r2
 800138c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001390:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001392:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001396:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 800139a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800139e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013a2:	fb03 f102 	mul.w	r1, r3, r2
 80013a6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	18ca      	adds	r2, r1, r3
 80013b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013b8:	fba3 4503 	umull	r4, r5, r3, r3
 80013bc:	1953      	adds	r3, r2, r5
 80013be:	461d      	mov	r5, r3
 80013c0:	4b97      	ldr	r3, [pc, #604]	; (8001620 <BMP280_ReadTemperatureAndPressure+0x300>)
 80013c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	17da      	asrs	r2, r3, #31
 80013ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013ce:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80013d2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80013d6:	4603      	mov	r3, r0
 80013d8:	fb03 f205 	mul.w	r2, r3, r5
 80013dc:	460b      	mov	r3, r1
 80013de:	fb04 f303 	mul.w	r3, r4, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	4602      	mov	r2, r0
 80013e6:	fba4 8902 	umull	r8, r9, r4, r2
 80013ea:	444b      	add	r3, r9
 80013ec:	4699      	mov	r9, r3
 80013ee:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 80013f2:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80013f6:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <BMP280_ReadTemperatureAndPressure+0x304>)
 80013f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	17da      	asrs	r2, r3, #31
 8001400:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001404:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001408:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800140c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001410:	462a      	mov	r2, r5
 8001412:	fb02 f203 	mul.w	r2, r2, r3
 8001416:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800141a:	4621      	mov	r1, r4
 800141c:	fb01 f303 	mul.w	r3, r1, r3
 8001420:	441a      	add	r2, r3
 8001422:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001426:	4621      	mov	r1, r4
 8001428:	fba3 ab01 	umull	sl, fp, r3, r1
 800142c:	eb02 030b 	add.w	r3, r2, fp
 8001430:	469b      	mov	fp, r3
 8001432:	f04f 0000 	mov.w	r0, #0
 8001436:	f04f 0100 	mov.w	r1, #0
 800143a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800143e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001442:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001446:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800144a:	1814      	adds	r4, r2, r0
 800144c:	643c      	str	r4, [r7, #64]	; 0x40
 800144e:	414b      	adcs	r3, r1
 8001450:	647b      	str	r3, [r7, #68]	; 0x44
 8001452:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001456:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 800145a:	4b73      	ldr	r3, [pc, #460]	; (8001628 <BMP280_ReadTemperatureAndPressure+0x308>)
 800145c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001460:	b21b      	sxth	r3, r3
 8001462:	17da      	asrs	r2, r3, #31
 8001464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001468:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800146c:	f04f 0000 	mov.w	r0, #0
 8001470:	f04f 0100 	mov.w	r1, #0
 8001474:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001478:	00d9      	lsls	r1, r3, #3
 800147a:	2000      	movs	r0, #0
 800147c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001480:	1814      	adds	r4, r2, r0
 8001482:	63bc      	str	r4, [r7, #56]	; 0x38
 8001484:	414b      	adcs	r3, r1
 8001486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001488:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800148c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001490:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001494:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001498:	fb03 f102 	mul.w	r1, r3, r2
 800149c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014a4:	fb02 f303 	mul.w	r3, r2, r3
 80014a8:	18ca      	adds	r2, r1, r3
 80014aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014ae:	fba3 1303 	umull	r1, r3, r3, r3
 80014b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014b6:	460b      	mov	r3, r1
 80014b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80014bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014c0:	18d3      	adds	r3, r2, r3
 80014c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014c6:	4b59      	ldr	r3, [pc, #356]	; (800162c <BMP280_ReadTemperatureAndPressure+0x30c>)
 80014c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	17da      	asrs	r2, r3, #31
 80014d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80014d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80014d8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80014dc:	462b      	mov	r3, r5
 80014de:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80014e2:	4642      	mov	r2, r8
 80014e4:	fb02 f203 	mul.w	r2, r2, r3
 80014e8:	464b      	mov	r3, r9
 80014ea:	4621      	mov	r1, r4
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	4622      	mov	r2, r4
 80014f4:	4641      	mov	r1, r8
 80014f6:	fba2 1201 	umull	r1, r2, r2, r1
 80014fa:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80014fe:	460a      	mov	r2, r1
 8001500:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001504:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001508:	4413      	add	r3, r2
 800150a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800150e:	f04f 0000 	mov.w	r0, #0
 8001512:	f04f 0100 	mov.w	r1, #0
 8001516:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800151a:	4623      	mov	r3, r4
 800151c:	0a18      	lsrs	r0, r3, #8
 800151e:	462b      	mov	r3, r5
 8001520:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001524:	462b      	mov	r3, r5
 8001526:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001528:	4b41      	ldr	r3, [pc, #260]	; (8001630 <BMP280_ReadTemperatureAndPressure+0x310>)
 800152a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152e:	b21b      	sxth	r3, r3
 8001530:	17da      	asrs	r2, r3, #31
 8001532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001536:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800153a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800153e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001542:	464a      	mov	r2, r9
 8001544:	fb02 f203 	mul.w	r2, r2, r3
 8001548:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800154c:	4644      	mov	r4, r8
 800154e:	fb04 f303 	mul.w	r3, r4, r3
 8001552:	441a      	add	r2, r3
 8001554:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001558:	4644      	mov	r4, r8
 800155a:	fba3 4304 	umull	r4, r3, r3, r4
 800155e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001562:	4623      	mov	r3, r4
 8001564:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800156c:	18d3      	adds	r3, r2, r3
 800156e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800157e:	464c      	mov	r4, r9
 8001580:	0323      	lsls	r3, r4, #12
 8001582:	4644      	mov	r4, r8
 8001584:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001588:	4644      	mov	r4, r8
 800158a:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800158c:	1884      	adds	r4, r0, r2
 800158e:	633c      	str	r4, [r7, #48]	; 0x30
 8001590:	eb41 0303 	adc.w	r3, r1, r3
 8001594:	637b      	str	r3, [r7, #52]	; 0x34
 8001596:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800159a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 800159e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015a2:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80015a6:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80015aa:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <BMP280_ReadTemperatureAndPressure+0x314>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	2200      	movs	r2, #0
 80015b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80015be:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80015c2:	462b      	mov	r3, r5
 80015c4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80015c8:	4642      	mov	r2, r8
 80015ca:	fb02 f203 	mul.w	r2, r2, r3
 80015ce:	464b      	mov	r3, r9
 80015d0:	4621      	mov	r1, r4
 80015d2:	fb01 f303 	mul.w	r3, r1, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	4622      	mov	r2, r4
 80015da:	4641      	mov	r1, r8
 80015dc:	fba2 1201 	umull	r1, r2, r2, r1
 80015e0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80015e4:	460a      	mov	r2, r1
 80015e6:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80015ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80015ee:	4413      	add	r3, r2
 80015f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001600:	4629      	mov	r1, r5
 8001602:	104a      	asrs	r2, r1, #1
 8001604:	4629      	mov	r1, r5
 8001606:	17cb      	asrs	r3, r1, #31
 8001608:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 800160c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001610:	4313      	orrs	r3, r2
 8001612:	d111      	bne.n	8001638 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001614:	2300      	movs	r3, #0
 8001616:	e160      	b.n	80018da <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001618:	c2c60000 	.word	0xc2c60000
 800161c:	20000218 	.word	0x20000218
 8001620:	2000020c 	.word	0x2000020c
 8001624:	2000020a 	.word	0x2000020a
 8001628:	20000208 	.word	0x20000208
 800162c:	20000206 	.word	0x20000206
 8001630:	20000204 	.word	0x20000204
 8001634:	20000216 	.word	0x20000216
	  }
	  p = 1048576 - adc_P;
 8001638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800163c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001640:	17da      	asrs	r2, r3, #31
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
 8001644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001646:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800164a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 800164e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001652:	105b      	asrs	r3, r3, #1
 8001654:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001658:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800165c:	07db      	lsls	r3, r3, #31
 800165e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001662:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001666:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800166a:	4621      	mov	r1, r4
 800166c:	1a89      	subs	r1, r1, r2
 800166e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001672:	4629      	mov	r1, r5
 8001674:	eb61 0303 	sbc.w	r3, r1, r3
 8001678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800167c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001680:	4622      	mov	r2, r4
 8001682:	462b      	mov	r3, r5
 8001684:	1891      	adds	r1, r2, r2
 8001686:	6239      	str	r1, [r7, #32]
 8001688:	415b      	adcs	r3, r3
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
 800168c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001690:	4621      	mov	r1, r4
 8001692:	1851      	adds	r1, r2, r1
 8001694:	61b9      	str	r1, [r7, #24]
 8001696:	4629      	mov	r1, r5
 8001698:	414b      	adcs	r3, r1
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80016a8:	4649      	mov	r1, r9
 80016aa:	018b      	lsls	r3, r1, #6
 80016ac:	4641      	mov	r1, r8
 80016ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016b2:	4641      	mov	r1, r8
 80016b4:	018a      	lsls	r2, r1, #6
 80016b6:	4641      	mov	r1, r8
 80016b8:	1889      	adds	r1, r1, r2
 80016ba:	6139      	str	r1, [r7, #16]
 80016bc:	4649      	mov	r1, r9
 80016be:	eb43 0101 	adc.w	r1, r3, r1
 80016c2:	6179      	str	r1, [r7, #20]
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80016d0:	4649      	mov	r1, r9
 80016d2:	008b      	lsls	r3, r1, #2
 80016d4:	4641      	mov	r1, r8
 80016d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016da:	4641      	mov	r1, r8
 80016dc:	008a      	lsls	r2, r1, #2
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	4603      	mov	r3, r0
 80016e4:	4622      	mov	r2, r4
 80016e6:	189b      	adds	r3, r3, r2
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	460b      	mov	r3, r1
 80016ec:	462a      	mov	r2, r5
 80016ee:	eb42 0303 	adc.w	r3, r2, r3
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001700:	4649      	mov	r1, r9
 8001702:	008b      	lsls	r3, r1, #2
 8001704:	4641      	mov	r1, r8
 8001706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800170a:	4641      	mov	r1, r8
 800170c:	008a      	lsls	r2, r1, #2
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	4603      	mov	r3, r0
 8001714:	4622      	mov	r2, r4
 8001716:	189b      	adds	r3, r3, r2
 8001718:	67bb      	str	r3, [r7, #120]	; 0x78
 800171a:	462b      	mov	r3, r5
 800171c:	460a      	mov	r2, r1
 800171e:	eb42 0303 	adc.w	r3, r2, r3
 8001722:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001724:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001728:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800172c:	f7ff fa44 	bl	8000bb8 <__aeabi_ldivmod>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001738:	4b6b      	ldr	r3, [pc, #428]	; (80018e8 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	b21b      	sxth	r3, r3
 8001740:	17da      	asrs	r2, r3, #31
 8001742:	673b      	str	r3, [r7, #112]	; 0x70
 8001744:	677a      	str	r2, [r7, #116]	; 0x74
 8001746:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800174a:	f04f 0000 	mov.w	r0, #0
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	0b50      	lsrs	r0, r2, #13
 8001754:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001758:	1359      	asrs	r1, r3, #13
 800175a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800175e:	462b      	mov	r3, r5
 8001760:	fb00 f203 	mul.w	r2, r0, r3
 8001764:	4623      	mov	r3, r4
 8001766:	fb03 f301 	mul.w	r3, r3, r1
 800176a:	4413      	add	r3, r2
 800176c:	4622      	mov	r2, r4
 800176e:	fba2 1200 	umull	r1, r2, r2, r0
 8001772:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001776:	460a      	mov	r2, r1
 8001778:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800177c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001780:	4413      	add	r3, r2
 8001782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001786:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800178a:	f04f 0000 	mov.w	r0, #0
 800178e:	f04f 0100 	mov.w	r1, #0
 8001792:	0b50      	lsrs	r0, r2, #13
 8001794:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001798:	1359      	asrs	r1, r3, #13
 800179a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800179e:	462b      	mov	r3, r5
 80017a0:	fb00 f203 	mul.w	r2, r0, r3
 80017a4:	4623      	mov	r3, r4
 80017a6:	fb03 f301 	mul.w	r3, r3, r1
 80017aa:	4413      	add	r3, r2
 80017ac:	4622      	mov	r2, r4
 80017ae:	fba2 1200 	umull	r1, r2, r2, r0
 80017b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80017b6:	460a      	mov	r2, r1
 80017b8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80017bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80017c0:	4413      	add	r3, r2
 80017c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80017d2:	4621      	mov	r1, r4
 80017d4:	0e4a      	lsrs	r2, r1, #25
 80017d6:	4629      	mov	r1, r5
 80017d8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80017dc:	4629      	mov	r1, r5
 80017de:	164b      	asrs	r3, r1, #25
 80017e0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 80017e4:	4b41      	ldr	r3, [pc, #260]	; (80018ec <BMP280_ReadTemperatureAndPressure+0x5cc>)
 80017e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	17da      	asrs	r2, r3, #31
 80017ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80017f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80017f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017f6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80017fa:	462a      	mov	r2, r5
 80017fc:	fb02 f203 	mul.w	r2, r2, r3
 8001800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001804:	4621      	mov	r1, r4
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4413      	add	r3, r2
 800180c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001810:	4621      	mov	r1, r4
 8001812:	fba2 1201 	umull	r1, r2, r2, r1
 8001816:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800181a:	460a      	mov	r2, r1
 800181c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001820:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001824:	4413      	add	r3, r2
 8001826:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001836:	4621      	mov	r1, r4
 8001838:	0cca      	lsrs	r2, r1, #19
 800183a:	4629      	mov	r1, r5
 800183c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001840:	4629      	mov	r1, r5
 8001842:	14cb      	asrs	r3, r1, #19
 8001844:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001848:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800184c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001850:	1884      	adds	r4, r0, r2
 8001852:	663c      	str	r4, [r7, #96]	; 0x60
 8001854:	eb41 0303 	adc.w	r3, r1, r3
 8001858:	667b      	str	r3, [r7, #100]	; 0x64
 800185a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800185e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001862:	4621      	mov	r1, r4
 8001864:	1889      	adds	r1, r1, r2
 8001866:	65b9      	str	r1, [r7, #88]	; 0x58
 8001868:	4629      	mov	r1, r5
 800186a:	eb43 0101 	adc.w	r1, r3, r1
 800186e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001870:	f04f 0000 	mov.w	r0, #0
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800187c:	4623      	mov	r3, r4
 800187e:	0a18      	lsrs	r0, r3, #8
 8001880:	462b      	mov	r3, r5
 8001882:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001886:	462b      	mov	r3, r5
 8001888:	1219      	asrs	r1, r3, #8
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 800188c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001890:	b21b      	sxth	r3, r3
 8001892:	17da      	asrs	r2, r3, #31
 8001894:	653b      	str	r3, [r7, #80]	; 0x50
 8001896:	657a      	str	r2, [r7, #84]	; 0x54
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80018a4:	464c      	mov	r4, r9
 80018a6:	0123      	lsls	r3, r4, #4
 80018a8:	4644      	mov	r4, r8
 80018aa:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018ae:	4644      	mov	r4, r8
 80018b0:	0122      	lsls	r2, r4, #4
 80018b2:	1884      	adds	r4, r0, r2
 80018b4:	603c      	str	r4, [r7, #0]
 80018b6:	eb41 0303 	adc.w	r3, r1, r3
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018c0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 80018c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da00      	bge.n	80018ce <BMP280_ReadTemperatureAndPressure+0x5ae>
 80018cc:	33ff      	adds	r3, #255	; 0xff
 80018ce:	121b      	asrs	r3, r3, #8
 80018d0:	461a      	mov	r2, r3
 80018d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018d6:	601a      	str	r2, [r3, #0]

	  return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80018e0:	46bd      	mov	sp, r7
 80018e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018e6:	bf00      	nop
 80018e8:	20000212 	.word	0x20000212
 80018ec:	20000210 	.word	0x20000210
 80018f0:	2000020e 	.word	0x2000020e

080018f4 <am2320_Init>:
 */


#include "am2320.h"

Am2320_HandleTypeDef am2320_Init(I2C_HandleTypeDef* i2c_handle,uint8_t device_address) {
 80018f4:	b490      	push	{r4, r7}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	4613      	mov	r3, r2
 8001900:	71fb      	strb	r3, [r7, #7]
	Am2320_HandleTypeDef AM2320_;
	AM2320_.i2c_handle = i2c_handle;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	613b      	str	r3, [r7, #16]
	AM2320_.device_address = device_address;
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	753b      	strb	r3, [r7, #20]
	return AM2320_;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	461c      	mov	r4, r3
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bc90      	pop	{r4, r7}
 8001920:	4770      	bx	lr
	...

08001924 <am2320_ReadValue>:

uint8_t am2320_ReadValue(Am2320_HandleTypeDef *am2320) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af02      	add	r7, sp, #8
 800192a:	6078      	str	r0, [r7, #4]
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 800192c:	4a26      	ldr	r2, [pc, #152]	; (80019c8 <am2320_ReadValue+0xa4>)
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	4611      	mov	r1, r2
 8001936:	8019      	strh	r1, [r3, #0]
 8001938:	3302      	adds	r3, #2
 800193a:	0c12      	lsrs	r2, r2, #16
 800193c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address, 0x00, 0,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	791b      	ldrb	r3, [r3, #4]
 8001946:	b299      	uxth	r1, r3
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2300      	movs	r3, #0
 8001950:	2200      	movs	r2, #0
 8001952:	f001 fb0f 	bl	8002f74 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(1);
 8001956:	2001      	movs	r0, #1
 8001958:	f000 fe62 	bl	8002620 <HAL_Delay>
	if (HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address,registers, 3, HAL_MAX_DELAY) != HAL_OK) {
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	791b      	ldrb	r3, [r3, #4]
 8001964:	b299      	uxth	r1, r3
 8001966:	f107 020c 	add.w	r2, r7, #12
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2303      	movs	r3, #3
 8001972:	f001 faff 	bl	8002f74 <HAL_I2C_Master_Transmit>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <am2320_ReadValue+0x5c>
		return 1;
 800197c:	2301      	movs	r3, #1
 800197e:	e01f      	b.n	80019c0 <am2320_ReadValue+0x9c>
	}
	HAL_Delay(2);
 8001980:	2002      	movs	r0, #2
 8001982:	f000 fe4d 	bl	8002620 <HAL_Delay>
	if (HAL_I2C_Master_Receive(am2320->i2c_handle, am2320->device_address,am2320->data, 8, HAL_MAX_DELAY) != HAL_OK) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	791b      	ldrb	r3, [r3, #4]
 800198e:	b299      	uxth	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	1d5a      	adds	r2, r3, #5
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2308      	movs	r3, #8
 800199c:	f001 fbe8 	bl	8003170 <HAL_I2C_Master_Receive>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <am2320_ReadValue+0x86>
		return 2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	e00a      	b.n	80019c0 <am2320_ReadValue+0x9c>
	}
	if (am2320->data[1] != 0x04 && am2320->data[0] != 0x03) {
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	799b      	ldrb	r3, [r3, #6]
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d005      	beq.n	80019be <am2320_ReadValue+0x9a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	795b      	ldrb	r3, [r3, #5]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d001      	beq.n	80019be <am2320_ReadValue+0x9a>
		return 3;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e000      	b.n	80019c0 <am2320_ReadValue+0x9c>
	}
	return 0;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	080096b0 	.word	0x080096b0

080019cc <am2320_GetTemperatureAndHumidity>:

void am2320_GetTemperatureAndHumidity(Am2320_HandleTypeDef *am2320, float *temperature,float *humidity) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
	int read = am2320_ReadValue(am2320);
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff ffa3 	bl	8001924 <am2320_ReadValue>
 80019de:	4603      	mov	r3, r0
 80019e0:	613b      	str	r3, [r7, #16]
	if (read) {
		// Simple exception handling
	}
	uint16_t temp_temperature = (am2320->data[5] | am2320->data[4] << 8);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	7a9b      	ldrb	r3, [r3, #10]
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	7a5b      	ldrb	r3, [r3, #9]
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	82fb      	strh	r3, [r7, #22]
	if (temp_temperature & 0x8000) {
 80019f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	da05      	bge.n	8001a0a <am2320_GetTemperatureAndHumidity+0x3e>
		temp_temperature = -(int16_t) (temp_temperature & 0x7fff);
 80019fe:	8afb      	ldrh	r3, [r7, #22]
 8001a00:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	425b      	negs	r3, r3
 8001a08:	82fb      	strh	r3, [r7, #22]
	} else {
		temp_temperature = (int16_t) temp_temperature;
	}
	*temperature = (float) temp_temperature / 10.0;
 8001a0a:	8afb      	ldrh	r3, [r7, #22]
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a14:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001a18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	edc3 7a00 	vstr	s15, [r3]
	*humidity = (float) (am2320->data[3] | am2320->data[2] << 8) / 10.0;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	7a1b      	ldrb	r3, [r3, #8]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	79db      	ldrb	r3, [r3, #7]
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a38:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	edc3 7a00 	vstr	s15, [r3]
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Przekierowanie funkcji printf() z wykorzystaniem interfejsu UART
int _write(int file, char *ptr, int len){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,ptr,len,50);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	2332      	movs	r3, #50	; 0x32
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <_write+0x24>)
 8001a66:	f003 fe6a 	bl	800573e <HAL_UART_Transmit>
	return len;
 8001a6a:	687b      	ldr	r3, [r7, #4]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000350 	.word	0x20000350

08001a78 <sendString>:

void sendString(char* s)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart1, (uint8_t*)s, strlen(s));
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7fe fbad 	bl	80001e0 <strlen>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4803      	ldr	r0, [pc, #12]	; (8001a9c <sendString+0x24>)
 8001a90:	f003 fee7 	bl	8005862 <HAL_UART_Transmit_IT>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2000030c 	.word	0x2000030c

08001aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b09f      	sub	sp, #124	; 0x7c
 8001aa4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa6:	f000 fd49 	bl	800253c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aaa:	f000 f8e7 	bl	8001c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aae:	f000 fa4b 	bl	8001f48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ab2:	f000 fa1f 	bl	8001ef4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001ab6:	f000 f949 	bl	8001d4c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001aba:	f000 f975 	bl	8001da8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001abe:	f000 f9a1 	bl	8001e04 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001ac2:	f000 f9ed 	bl	8001ea0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 8001ac6:	20c8      	movs	r0, #200	; 0xc8
 8001ac8:	f000 fdaa 	bl	8002620 <HAL_Delay>
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin,SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad2:	4858      	ldr	r0, [pc, #352]	; (8001c34 <main+0x194>)
 8001ad4:	f001 f8f0 	bl	8002cb8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001adc:	f000 fda0 	bl	8002620 <HAL_Delay>

  //memset(buffer,0,sizeof(buffer));
  HAL_TIM_Base_Start_IT(&htim2);
 8001ae0:	4855      	ldr	r0, [pc, #340]	; (8001c38 <main+0x198>)
 8001ae2:	f003 f9df 	bl	8004ea4 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001ae6:	4b55      	ldr	r3, [pc, #340]	; (8001c3c <main+0x19c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <main+0x19c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0220 	orr.w	r2, r2, #32
 8001af4:	60da      	str	r2, [r3, #12]

  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_ULTRAHIGHRES, BMP280_FORCEDMODE);
 8001af6:	2301      	movs	r3, #1
 8001af8:	2205      	movs	r2, #5
 8001afa:	2101      	movs	r1, #1
 8001afc:	4850      	ldr	r0, [pc, #320]	; (8001c40 <main+0x1a0>)
 8001afe:	f7ff fac5 	bl	800108c <BMP280_Init>
  Am2320_HandleTypeDef Am2320_;
  Am2320_ = am2320_Init(&hi2c2, 0x5C << 1);
 8001b02:	463b      	mov	r3, r7
 8001b04:	22b8      	movs	r2, #184	; 0xb8
 8001b06:	494f      	ldr	r1, [pc, #316]	; (8001c44 <main+0x1a4>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fef3 	bl	80018f4 <am2320_Init>
 8001b0e:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001b12:	463b      	mov	r3, r7
 8001b14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(GPIOC, BMP_I2C, 1);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4845      	ldr	r0, [pc, #276]	; (8001c34 <main+0x194>)
 8001b20:	f001 f8ca 	bl	8002cb8 <HAL_GPIO_WritePin>
	  BMP280_ReadTemperatureAndPressure(&temperatura_BMP, &cisnienie);
 8001b24:	4948      	ldr	r1, [pc, #288]	; (8001c48 <main+0x1a8>)
 8001b26:	4849      	ldr	r0, [pc, #292]	; (8001c4c <main+0x1ac>)
 8001b28:	f7ff fbfa 	bl	8001320 <BMP280_ReadTemperatureAndPressure>
	  HAL_GPIO_WritePin(GPIOC, BMP_I2C, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2101      	movs	r1, #1
 8001b30:	4840      	ldr	r0, [pc, #256]	; (8001c34 <main+0x194>)
 8001b32:	f001 f8c1 	bl	8002cb8 <HAL_GPIO_WritePin>
	  am2320_GetTemperatureAndHumidity(&Am2320_, &temperatura_AM, &wilgotnosc);
 8001b36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b3a:	4a45      	ldr	r2, [pc, #276]	; (8001c50 <main+0x1b0>)
 8001b3c:	4945      	ldr	r1, [pc, #276]	; (8001c54 <main+0x1b4>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff44 	bl	80019cc <am2320_GetTemperatureAndHumidity>
	  HAL_Delay(500);
 8001b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b48:	f000 fd6a 	bl	8002620 <HAL_Delay>

	  int testv = 57;
 8001b4c:	2339      	movs	r3, #57	; 0x39
 8001b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
	  char arCisn[10];
	  char arWilg[10];

	  char arData[40];

	  sprintf(arTemp, "%d", (int)(temperatura_BMP*1000));
 8001b50:	4b3e      	ldr	r3, [pc, #248]	; (8001c4c <main+0x1ac>)
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001c58 <main+0x1b8>
 8001b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b66:	ee17 2a90 	vmov	r2, s15
 8001b6a:	493c      	ldr	r1, [pc, #240]	; (8001c5c <main+0x1bc>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f005 fb1b 	bl	80071a8 <siprintf>
	  sprintf(arCisn, "%d", (int)cisnienie);
 8001b72:	4b35      	ldr	r3, [pc, #212]	; (8001c48 <main+0x1a8>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b7a:	4938      	ldr	r1, [pc, #224]	; (8001c5c <main+0x1bc>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f005 fb13 	bl	80071a8 <siprintf>
	  sprintf(arWilg, "%d", (int)(wilgotnosc*1000));
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <main+0x1b0>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001c58 <main+0x1b8>
 8001b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b98:	ee17 2a90 	vmov	r2, s15
 8001b9c:	492f      	ldr	r1, [pc, #188]	; (8001c5c <main+0x1bc>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f005 fb02 	bl	80071a8 <siprintf>

	  sprintf(arData, "%s:%s:%s:", arTemp, arCisn, arWilg);
 8001ba4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001ba8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001bac:	f107 0010 	add.w	r0, r7, #16
 8001bb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4929      	ldr	r1, [pc, #164]	; (8001c60 <main+0x1c0>)
 8001bba:	f005 faf5 	bl	80071a8 <siprintf>


	  sendString(arData);
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff58 	bl	8001a78 <sendString>
	  HAL_Delay(500);
 8001bc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bcc:	f000 fd28 	bl	8002620 <HAL_Delay>


	  printf("\r\n===============\r\n");
 8001bd0:	4824      	ldr	r0, [pc, #144]	; (8001c64 <main+0x1c4>)
 8001bd2:	f005 fae1 	bl	8007198 <puts>
	  printf("Cisnienie --> %d Pa\r\n", cisnienie);
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <main+0x1a8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4822      	ldr	r0, [pc, #136]	; (8001c68 <main+0x1c8>)
 8001bde:	f005 fa55 	bl	800708c <iprintf>
	  printf("Temperatura BMP --> %f oC\r\n", temperatura_BMP);
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <main+0x1ac>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fcb6 	bl	8000558 <__aeabi_f2d>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	481e      	ldr	r0, [pc, #120]	; (8001c6c <main+0x1cc>)
 8001bf2:	f005 fa4b 	bl	800708c <iprintf>
	  printf("Temperatura AM --> %f oC\r\n", temperatura_AM);
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <main+0x1b4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fcac 	bl	8000558 <__aeabi_f2d>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	481a      	ldr	r0, [pc, #104]	; (8001c70 <main+0x1d0>)
 8001c06:	f005 fa41 	bl	800708c <iprintf>
	  printf("Wilgotnosc --> %f%%\r\n", wilgotnosc);
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <main+0x1b0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fca2 	bl	8000558 <__aeabi_f2d>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4816      	ldr	r0, [pc, #88]	; (8001c74 <main+0x1d4>)
 8001c1a:	f005 fa37 	bl	800708c <iprintf>
	  printf("arData --> %s\r\n", arData);
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	4619      	mov	r1, r3
 8001c24:	4814      	ldr	r0, [pc, #80]	; (8001c78 <main+0x1d8>)
 8001c26:	f005 fa31 	bl	800708c <iprintf>

	  HAL_Delay(250);
 8001c2a:	20fa      	movs	r0, #250	; 0xfa
 8001c2c:	f000 fcf8 	bl	8002620 <HAL_Delay>
  {
 8001c30:	e773      	b.n	8001b1a <main+0x7a>
 8001c32:	bf00      	nop
 8001c34:	40020800 	.word	0x40020800
 8001c38:	200002c4 	.word	0x200002c4
 8001c3c:	20000350 	.word	0x20000350
 8001c40:	2000021c 	.word	0x2000021c
 8001c44:	20000270 	.word	0x20000270
 8001c48:	20000394 	.word	0x20000394
 8001c4c:	20000398 	.word	0x20000398
 8001c50:	200003a0 	.word	0x200003a0
 8001c54:	2000039c 	.word	0x2000039c
 8001c58:	447a0000 	.word	0x447a0000
 8001c5c:	080096b4 	.word	0x080096b4
 8001c60:	080096b8 	.word	0x080096b8
 8001c64:	080096c4 	.word	0x080096c4
 8001c68:	080096d8 	.word	0x080096d8
 8001c6c:	080096f0 	.word	0x080096f0
 8001c70:	0800970c 	.word	0x0800970c
 8001c74:	08009728 	.word	0x08009728
 8001c78:	08009740 	.word	0x08009740

08001c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b094      	sub	sp, #80	; 0x50
 8001c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c82:	f107 0320 	add.w	r3, r7, #32
 8001c86:	2230      	movs	r2, #48	; 0x30
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f004 fd8c 	bl	80067a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <SystemClock_Config+0xc8>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	4a26      	ldr	r2, [pc, #152]	; (8001d44 <SystemClock_Config+0xc8>)
 8001caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cae:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb0:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <SystemClock_Config+0xc8>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <SystemClock_Config+0xcc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <SystemClock_Config+0xcc>)
 8001cc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <SystemClock_Config+0xcc>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ce0:	2310      	movs	r3, #16
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cec:	2308      	movs	r3, #8
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001cf0:	2348      	movs	r3, #72	; 0x48
 8001cf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfc:	f107 0320 	add.w	r3, r7, #32
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fc27 	bl	8004554 <HAL_RCC_OscConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d0c:	f000 f97c 	bl	8002008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d10:	230f      	movs	r3, #15
 8001d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d14:	2302      	movs	r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 fe89 	bl	8004a44 <HAL_RCC_ClockConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d38:	f000 f966 	bl	8002008 <Error_Handler>
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3750      	adds	r7, #80	; 0x50
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40007000 	.word	0x40007000

08001d4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d52:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <MX_I2C1_Init+0x54>)
 8001d54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <MX_I2C1_Init+0x58>)
 8001d5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d88:	4804      	ldr	r0, [pc, #16]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d8a:	f000 ffaf 	bl	8002cec <HAL_I2C_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d94:	f000 f938 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	2000021c 	.word	0x2000021c
 8001da0:	40005400 	.word	0x40005400
 8001da4:	000186a0 	.word	0x000186a0

08001da8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <MX_I2C2_Init+0x50>)
 8001dae:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <MX_I2C2_Init+0x54>)
 8001db0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_I2C2_Init+0x50>)
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <MX_I2C2_Init+0x58>)
 8001db6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <MX_I2C2_Init+0x50>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <MX_I2C2_Init+0x50>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_I2C2_Init+0x50>)
 8001dc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <MX_I2C2_Init+0x50>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_I2C2_Init+0x50>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <MX_I2C2_Init+0x50>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_I2C2_Init+0x50>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <MX_I2C2_Init+0x50>)
 8001de6:	f000 ff81 	bl	8002cec <HAL_I2C_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001df0:	f000 f90a 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000270 	.word	0x20000270
 8001dfc:	40005800 	.word	0x40005800
 8001e00:	000186a0 	.word	0x000186a0

08001e04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0a:	f107 0308 	add.w	r3, r7, #8
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	463b      	mov	r3, r7
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e20:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <MX_TIM2_Init+0x98>)
 8001e22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <MX_TIM2_Init+0x98>)
 8001e2a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001e2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e30:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <MX_TIM2_Init+0x98>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <MX_TIM2_Init+0x98>)
 8001e38:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001e3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <MX_TIM2_Init+0x98>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <MX_TIM2_Init+0x98>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e4a:	4814      	ldr	r0, [pc, #80]	; (8001e9c <MX_TIM2_Init+0x98>)
 8001e4c:	f002 ffda 	bl	8004e04 <HAL_TIM_Base_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e56:	f000 f8d7 	bl	8002008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e60:	f107 0308 	add.w	r3, r7, #8
 8001e64:	4619      	mov	r1, r3
 8001e66:	480d      	ldr	r0, [pc, #52]	; (8001e9c <MX_TIM2_Init+0x98>)
 8001e68:	f003 f986 	bl	8005178 <HAL_TIM_ConfigClockSource>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e72:	f000 f8c9 	bl	8002008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e7e:	463b      	mov	r3, r7
 8001e80:	4619      	mov	r1, r3
 8001e82:	4806      	ldr	r0, [pc, #24]	; (8001e9c <MX_TIM2_Init+0x98>)
 8001e84:	f003 fb8c 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e8e:	f000 f8bb 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200002c4 	.word	0x200002c4

08001ea0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_USART1_UART_Init+0x4c>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <MX_USART1_UART_Init+0x50>)
 8001ea8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <MX_USART1_UART_Init+0x4c>)
 8001eac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001eb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_USART1_UART_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_USART1_UART_Init+0x4c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MX_USART1_UART_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_USART1_UART_Init+0x4c>)
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <MX_USART1_UART_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_USART1_UART_Init+0x4c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_USART1_UART_Init+0x4c>)
 8001ed8:	f003 fbe4 	bl	80056a4 <HAL_UART_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ee2:	f000 f891 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000030c 	.word	0x2000030c
 8001ef0:	40011000 	.word	0x40011000

08001ef4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <MX_USART2_UART_Init+0x50>)
 8001efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f2c:	f003 fbba 	bl	80056a4 <HAL_UART_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f36:	f000 f867 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000350 	.word	0x20000350
 8001f44:	40004400 	.word	0x40004400

08001f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <MX_GPIO_Init+0xb8>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a26      	ldr	r2, [pc, #152]	; (8002000 <MX_GPIO_Init+0xb8>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <MX_GPIO_Init+0xb8>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <MX_GPIO_Init+0xb8>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <MX_GPIO_Init+0xb8>)
 8001f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <MX_GPIO_Init+0xb8>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <MX_GPIO_Init+0xb8>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a18      	ldr	r2, [pc, #96]	; (8002000 <MX_GPIO_Init+0xb8>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b16      	ldr	r3, [pc, #88]	; (8002000 <MX_GPIO_Init+0xb8>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <MX_GPIO_Init+0xb8>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a11      	ldr	r2, [pc, #68]	; (8002000 <MX_GPIO_Init+0xb8>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <MX_GPIO_Init+0xb8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fd4:	480b      	ldr	r0, [pc, #44]	; (8002004 <MX_GPIO_Init+0xbc>)
 8001fd6:	f000 fe6f 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BluetoothReset_Pin */
  GPIO_InitStruct.Pin = BluetoothReset_Pin;
 8001fda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BluetoothReset_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4804      	ldr	r0, [pc, #16]	; (8002004 <MX_GPIO_Init+0xbc>)
 8001ff4:	f000 fcdc 	bl	80029b0 <HAL_GPIO_Init>

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	40020800 	.word	0x40020800

08002008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800200c:	b672      	cpsid	i
}
 800200e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002010:	e7fe      	b.n	8002010 <Error_Handler+0x8>
	...

08002014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_MspInit+0x4c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <HAL_MspInit+0x4c>)
 8002024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_MspInit+0x4c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_MspInit+0x4c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <HAL_MspInit+0x4c>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_MspInit+0x4c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a3a      	ldr	r2, [pc, #232]	; (800216c <HAL_I2C_MspInit+0x108>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d12c      	bne.n	80020e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a38      	ldr	r2, [pc, #224]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020a2:	23c0      	movs	r3, #192	; 0xc0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a6:	2312      	movs	r3, #18
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020b2:	2304      	movs	r3, #4
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	482d      	ldr	r0, [pc, #180]	; (8002174 <HAL_I2C_MspInit+0x110>)
 80020be:	f000 fc77 	bl	80029b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a29      	ldr	r2, [pc, #164]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 80020cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80020de:	e041      	b.n	8002164 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a24      	ldr	r2, [pc, #144]	; (8002178 <HAL_I2C_MspInit+0x114>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d13c      	bne.n	8002164 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800210a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800210c:	2312      	movs	r3, #18
 800210e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002110:	2301      	movs	r3, #1
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002118:	2304      	movs	r3, #4
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 031c 	add.w	r3, r7, #28
 8002120:	4619      	mov	r1, r3
 8002122:	4814      	ldr	r0, [pc, #80]	; (8002174 <HAL_I2C_MspInit+0x110>)
 8002124:	f000 fc44 	bl	80029b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002128:	2308      	movs	r3, #8
 800212a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800212c:	2312      	movs	r3, #18
 800212e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002130:	2301      	movs	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002134:	2303      	movs	r3, #3
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002138:	2309      	movs	r3, #9
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	4619      	mov	r1, r3
 8002142:	480c      	ldr	r0, [pc, #48]	; (8002174 <HAL_I2C_MspInit+0x110>)
 8002144:	f000 fc34 	bl	80029b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 8002152:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002156:	6413      	str	r3, [r2, #64]	; 0x40
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
}
 8002164:	bf00      	nop
 8002166:	3730      	adds	r7, #48	; 0x30
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40005400 	.word	0x40005400
 8002170:	40023800 	.word	0x40023800
 8002174:	40020400 	.word	0x40020400
 8002178:	40005800 	.word	0x40005800

0800217c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218c:	d115      	bne.n	80021ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <HAL_TIM_Base_MspInit+0x48>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <HAL_TIM_Base_MspInit+0x48>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_TIM_Base_MspInit+0x48>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	201c      	movs	r0, #28
 80021b0:	f000 fb35 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021b4:	201c      	movs	r0, #28
 80021b6:	f000 fb4e 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	; 0x30
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a3a      	ldr	r2, [pc, #232]	; (80022d0 <HAL_UART_MspInit+0x108>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d135      	bne.n	8002256 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_UART_MspInit+0x10c>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <HAL_UART_MspInit+0x10c>)
 80021f4:	f043 0310 	orr.w	r3, r3, #16
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_UART_MspInit+0x10c>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <HAL_UART_MspInit+0x10c>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a31      	ldr	r2, [pc, #196]	; (80022d4 <HAL_UART_MspInit+0x10c>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <HAL_UART_MspInit+0x10c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002222:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002234:	2307      	movs	r3, #7
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	4619      	mov	r1, r3
 800223e:	4826      	ldr	r0, [pc, #152]	; (80022d8 <HAL_UART_MspInit+0x110>)
 8002240:	f000 fbb6 	bl	80029b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2100      	movs	r1, #0
 8002248:	2025      	movs	r0, #37	; 0x25
 800224a:	f000 fae8 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800224e:	2025      	movs	r0, #37	; 0x25
 8002250:	f000 fb01 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002254:	e038      	b.n	80022c8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a20      	ldr	r2, [pc, #128]	; (80022dc <HAL_UART_MspInit+0x114>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d133      	bne.n	80022c8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_UART_MspInit+0x10c>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <HAL_UART_MspInit+0x10c>)
 800226a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226e:	6413      	str	r3, [r2, #64]	; 0x40
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_UART_MspInit+0x10c>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <HAL_UART_MspInit+0x10c>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <HAL_UART_MspInit+0x10c>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6313      	str	r3, [r2, #48]	; 0x30
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_UART_MspInit+0x10c>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002298:	230c      	movs	r3, #12
 800229a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a4:	2303      	movs	r3, #3
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022a8:	2307      	movs	r3, #7
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	4619      	mov	r1, r3
 80022b2:	4809      	ldr	r0, [pc, #36]	; (80022d8 <HAL_UART_MspInit+0x110>)
 80022b4:	f000 fb7c 	bl	80029b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022b8:	2200      	movs	r2, #0
 80022ba:	2100      	movs	r1, #0
 80022bc:	2026      	movs	r0, #38	; 0x26
 80022be:	f000 faae 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022c2:	2026      	movs	r0, #38	; 0x26
 80022c4:	f000 fac7 	bl	8002856 <HAL_NVIC_EnableIRQ>
}
 80022c8:	bf00      	nop
 80022ca:	3730      	adds	r7, #48	; 0x30
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40011000 	.word	0x40011000
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020000 	.word	0x40020000
 80022dc:	40004400 	.word	0x40004400

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <NMI_Handler+0x4>

080022e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <HardFault_Handler+0x4>

080022ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <MemManage_Handler+0x4>

080022f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <BusFault_Handler+0x4>

080022f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <UsageFault_Handler+0x4>

080022fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800232c:	f000 f958 	bl	80025e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}

08002334 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <TIM2_IRQHandler+0x10>)
 800233a:	f002 fe15 	bl	8004f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200002c4 	.word	0x200002c4

08002348 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <USART1_IRQHandler+0x10>)
 800234e:	f003 facd 	bl	80058ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2000030c 	.word	0x2000030c

0800235c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <USART2_IRQHandler+0x10>)
 8002362:	f003 fac3 	bl	80058ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000350 	.word	0x20000350

08002370 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
	return 1;
 8002374:	2301      	movs	r3, #1
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_kill>:

int _kill(int pid, int sig)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800238a:	f004 f9e3 	bl	8006754 <__errno>
 800238e:	4603      	mov	r3, r0
 8002390:	2216      	movs	r2, #22
 8002392:	601a      	str	r2, [r3, #0]
	return -1;
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_exit>:

void _exit (int status)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ffe7 	bl	8002380 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023b2:	e7fe      	b.n	80023b2 <_exit+0x12>

080023b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	e00a      	b.n	80023dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023c6:	f3af 8000 	nop.w
 80023ca:	4601      	mov	r1, r0
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	60ba      	str	r2, [r7, #8]
 80023d2:	b2ca      	uxtb	r2, r1
 80023d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	3301      	adds	r3, #1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	dbf0      	blt.n	80023c6 <_read+0x12>
	}

return len;
 80023e4:	687b      	ldr	r3, [r7, #4]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
	return -1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002416:	605a      	str	r2, [r3, #4]
	return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <_isatty>:

int _isatty(int file)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
	return 1;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
	return 0;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <_sbrk+0x5c>)
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <_sbrk+0x60>)
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <_sbrk+0x64>)
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <_sbrk+0x68>)
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d207      	bcs.n	8002498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002488:	f004 f964 	bl	8006754 <__errno>
 800248c:	4603      	mov	r3, r0
 800248e:	220c      	movs	r2, #12
 8002490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	e009      	b.n	80024ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	4a05      	ldr	r2, [pc, #20]	; (80024bc <_sbrk+0x64>)
 80024a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20020000 	.word	0x20020000
 80024b8:	00000400 	.word	0x00000400
 80024bc:	200003a4 	.word	0x200003a4
 80024c0:	200003c0 	.word	0x200003c0

080024c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <SystemInit+0x20>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <SystemInit+0x20>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024ec:	480d      	ldr	r0, [pc, #52]	; (8002524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ee:	490e      	ldr	r1, [pc, #56]	; (8002528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024f0:	4a0e      	ldr	r2, [pc, #56]	; (800252c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f4:	e002      	b.n	80024fc <LoopCopyDataInit>

080024f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fa:	3304      	adds	r3, #4

080024fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002500:	d3f9      	bcc.n	80024f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002502:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002504:	4c0b      	ldr	r4, [pc, #44]	; (8002534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002508:	e001      	b.n	800250e <LoopFillZerobss>

0800250a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800250c:	3204      	adds	r2, #4

0800250e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002510:	d3fb      	bcc.n	800250a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002512:	f7ff ffd7 	bl	80024c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002516:	f004 f923 	bl	8006760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800251a:	f7ff fac1 	bl	8001aa0 <main>
  bx  lr    
 800251e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002528:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800252c:	08009b54 	.word	0x08009b54
  ldr r2, =_sbss
 8002530:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002534:	200003bc 	.word	0x200003bc

08002538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002538:	e7fe      	b.n	8002538 <ADC_IRQHandler>
	...

0800253c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_Init+0x40>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0d      	ldr	r2, [pc, #52]	; (800257c <HAL_Init+0x40>)
 8002546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800254a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_Init+0x40>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0a      	ldr	r2, [pc, #40]	; (800257c <HAL_Init+0x40>)
 8002552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_Init+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a07      	ldr	r2, [pc, #28]	; (800257c <HAL_Init+0x40>)
 800255e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002564:	2003      	movs	r0, #3
 8002566:	f000 f94f 	bl	8002808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256a:	200f      	movs	r0, #15
 800256c:	f000 f808 	bl	8002580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002570:	f7ff fd50 	bl	8002014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023c00 	.word	0x40023c00

08002580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <HAL_InitTick+0x54>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_InitTick+0x58>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4619      	mov	r1, r3
 8002592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002596:	fbb3 f3f1 	udiv	r3, r3, r1
 800259a:	fbb2 f3f3 	udiv	r3, r2, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f967 	bl	8002872 <HAL_SYSTICK_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00e      	b.n	80025cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b0f      	cmp	r3, #15
 80025b2:	d80a      	bhi.n	80025ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b4:	2200      	movs	r2, #0
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295
 80025bc:	f000 f92f 	bl	800281e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c0:	4a06      	ldr	r2, [pc, #24]	; (80025dc <HAL_InitTick+0x5c>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e000      	b.n	80025cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000008 	.word	0x20000008
 80025dc:	20000004 	.word	0x20000004

080025e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_IncTick+0x20>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_IncTick+0x24>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	4a04      	ldr	r2, [pc, #16]	; (8002604 <HAL_IncTick+0x24>)
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000008 	.word	0x20000008
 8002604:	200003a8 	.word	0x200003a8

08002608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return uwTick;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_GetTick+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	200003a8 	.word	0x200003a8

08002620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002628:	f7ff ffee 	bl	8002608 <HAL_GetTick>
 800262c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d005      	beq.n	8002646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_Delay+0x44>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002646:	bf00      	nop
 8002648:	f7ff ffde 	bl	8002608 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d8f7      	bhi.n	8002648 <HAL_Delay+0x28>
  {
  }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000008 	.word	0x20000008

08002668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <__NVIC_GetPriorityGrouping+0x18>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 0307 	and.w	r3, r3, #7
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db0b      	blt.n	80026f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4907      	ldr	r1, [pc, #28]	; (8002704 <__NVIC_EnableIRQ+0x38>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2001      	movs	r0, #1
 80026ee:	fa00 f202 	lsl.w	r2, r0, r2
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d4:	d301      	bcc.n	80027da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00f      	b.n	80027fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <SysTick_Config+0x40>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e2:	210f      	movs	r1, #15
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f7ff ff8e 	bl	8002708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <SysTick_Config+0x40>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <SysTick_Config+0x40>)
 80027f4:	2207      	movs	r2, #7
 80027f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	e000e010 	.word	0xe000e010

08002808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff29 	bl	8002668 <__NVIC_SetPriorityGrouping>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002830:	f7ff ff3e 	bl	80026b0 <__NVIC_GetPriorityGrouping>
 8002834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff8e 	bl	800275c <NVIC_EncodePriority>
 8002840:	4602      	mov	r2, r0
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff5d 	bl	8002708 <__NVIC_SetPriority>
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff31 	bl	80026cc <__NVIC_EnableIRQ>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffa2 	bl	80027c4 <SysTick_Config>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002896:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff feb6 	bl	8002608 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d008      	beq.n	80028bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e052      	b.n	8002962 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0216 	bic.w	r2, r2, #22
 80028ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <HAL_DMA_Abort+0x62>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0208 	bic.w	r2, r2, #8
 80028fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800290c:	e013      	b.n	8002936 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800290e:	f7ff fe7b 	bl	8002608 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b05      	cmp	r3, #5
 800291a:	d90c      	bls.n	8002936 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2203      	movs	r2, #3
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e015      	b.n	8002962 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1e4      	bne.n	800290e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002948:	223f      	movs	r2, #63	; 0x3f
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d004      	beq.n	8002988 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e00c      	b.n	80029a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2205      	movs	r2, #5
 800298c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e159      	b.n	8002c80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 8148 	bne.w	8002c7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d005      	beq.n	8002a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d130      	bne.n	8002a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0201 	and.w	r2, r3, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d017      	beq.n	8002aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d123      	bne.n	8002af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80a2 	beq.w	8002c7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b57      	ldr	r3, [pc, #348]	; (8002c98 <HAL_GPIO_Init+0x2e8>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4a56      	ldr	r2, [pc, #344]	; (8002c98 <HAL_GPIO_Init+0x2e8>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	; 0x44
 8002b46:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <HAL_GPIO_Init+0x2e8>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_GPIO_Init+0x2ec>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a49      	ldr	r2, [pc, #292]	; (8002ca0 <HAL_GPIO_Init+0x2f0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d019      	beq.n	8002bb2 <HAL_GPIO_Init+0x202>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a48      	ldr	r2, [pc, #288]	; (8002ca4 <HAL_GPIO_Init+0x2f4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_GPIO_Init+0x1fe>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a47      	ldr	r2, [pc, #284]	; (8002ca8 <HAL_GPIO_Init+0x2f8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00d      	beq.n	8002baa <HAL_GPIO_Init+0x1fa>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a46      	ldr	r2, [pc, #280]	; (8002cac <HAL_GPIO_Init+0x2fc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <HAL_GPIO_Init+0x1f6>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a45      	ldr	r2, [pc, #276]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_GPIO_Init+0x1f2>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	e008      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002ba2:	2307      	movs	r3, #7
 8002ba4:	e006      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e004      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e002      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	f002 0203 	and.w	r2, r2, #3
 8002bba:	0092      	lsls	r2, r2, #2
 8002bbc:	4093      	lsls	r3, r2
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc4:	4935      	ldr	r1, [pc, #212]	; (8002c9c <HAL_GPIO_Init+0x2ec>)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bf6:	4a2f      	ldr	r2, [pc, #188]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bfc:	4b2d      	ldr	r3, [pc, #180]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c20:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c26:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4a:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c50:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c74:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	f67f aea2 	bls.w	80029cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	40020000 	.word	0x40020000
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40020800 	.word	0x40020800
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40013c00 	.word	0x40013c00

08002cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc8:	787b      	ldrb	r3, [r7, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd4:	e003      	b.n	8002cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cd6:	887b      	ldrh	r3, [r7, #2]
 8002cd8:	041a      	lsls	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	619a      	str	r2, [r3, #24]
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e12b      	b.n	8002f56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff f9a6 	bl	8002064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2224      	movs	r2, #36	; 0x24
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d50:	f002 f830 	bl	8004db4 <HAL_RCC_GetPCLK1Freq>
 8002d54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4a81      	ldr	r2, [pc, #516]	; (8002f60 <HAL_I2C_Init+0x274>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d807      	bhi.n	8002d70 <HAL_I2C_Init+0x84>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a80      	ldr	r2, [pc, #512]	; (8002f64 <HAL_I2C_Init+0x278>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	bf94      	ite	ls
 8002d68:	2301      	movls	r3, #1
 8002d6a:	2300      	movhi	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e006      	b.n	8002d7e <HAL_I2C_Init+0x92>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4a7d      	ldr	r2, [pc, #500]	; (8002f68 <HAL_I2C_Init+0x27c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	bf94      	ite	ls
 8002d78:	2301      	movls	r3, #1
 8002d7a:	2300      	movhi	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0e7      	b.n	8002f56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4a78      	ldr	r2, [pc, #480]	; (8002f6c <HAL_I2C_Init+0x280>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	0c9b      	lsrs	r3, r3, #18
 8002d90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4a6a      	ldr	r2, [pc, #424]	; (8002f60 <HAL_I2C_Init+0x274>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d802      	bhi.n	8002dc0 <HAL_I2C_Init+0xd4>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	e009      	b.n	8002dd4 <HAL_I2C_Init+0xe8>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	4a69      	ldr	r2, [pc, #420]	; (8002f70 <HAL_I2C_Init+0x284>)
 8002dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002de6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	495c      	ldr	r1, [pc, #368]	; (8002f60 <HAL_I2C_Init+0x274>)
 8002df0:	428b      	cmp	r3, r1
 8002df2:	d819      	bhi.n	8002e28 <HAL_I2C_Init+0x13c>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e59      	subs	r1, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e02:	1c59      	adds	r1, r3, #1
 8002e04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e08:	400b      	ands	r3, r1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_I2C_Init+0x138>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1e59      	subs	r1, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e22:	e051      	b.n	8002ec8 <HAL_I2C_Init+0x1dc>
 8002e24:	2304      	movs	r3, #4
 8002e26:	e04f      	b.n	8002ec8 <HAL_I2C_Init+0x1dc>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d111      	bne.n	8002e54 <HAL_I2C_Init+0x168>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1e58      	subs	r0, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	440b      	add	r3, r1
 8002e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e012      	b.n	8002e7a <HAL_I2C_Init+0x18e>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1e58      	subs	r0, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	0099      	lsls	r1, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Init+0x196>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e022      	b.n	8002ec8 <HAL_I2C_Init+0x1dc>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10e      	bne.n	8002ea8 <HAL_I2C_Init+0x1bc>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1e58      	subs	r0, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	440b      	add	r3, r1
 8002e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea6:	e00f      	b.n	8002ec8 <HAL_I2C_Init+0x1dc>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	0099      	lsls	r1, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	6809      	ldr	r1, [r1, #0]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69da      	ldr	r2, [r3, #28]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6911      	ldr	r1, [r2, #16]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68d2      	ldr	r2, [r2, #12]
 8002f02:	4311      	orrs	r1, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	000186a0 	.word	0x000186a0
 8002f64:	001e847f 	.word	0x001e847f
 8002f68:	003d08ff 	.word	0x003d08ff
 8002f6c:	431bde83 	.word	0x431bde83
 8002f70:	10624dd3 	.word	0x10624dd3

08002f74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	460b      	mov	r3, r1
 8002f82:	817b      	strh	r3, [r7, #10]
 8002f84:	4613      	mov	r3, r2
 8002f86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f88:	f7ff fb3e 	bl	8002608 <HAL_GetTick>
 8002f8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	f040 80e0 	bne.w	800315c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2319      	movs	r3, #25
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	4970      	ldr	r1, [pc, #448]	; (8003168 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f001 f8f6 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0d3      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_I2C_Master_Transmit+0x50>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e0cc      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d007      	beq.n	8002fea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0201 	orr.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2221      	movs	r2, #33	; 0x21
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2210      	movs	r2, #16
 8003006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	893a      	ldrh	r2, [r7, #8]
 800301a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a50      	ldr	r2, [pc, #320]	; (800316c <HAL_I2C_Master_Transmit+0x1f8>)
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800302c:	8979      	ldrh	r1, [r7, #10]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	6a3a      	ldr	r2, [r7, #32]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fde2 	bl	8003bfc <I2C_MasterRequestWrite>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e08d      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003058:	e066      	b.n	8003128 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	6a39      	ldr	r1, [r7, #32]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f001 f970 	bl	8004344 <I2C_WaitOnTXEFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	2b04      	cmp	r3, #4
 8003070:	d107      	bne.n	8003082 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003080:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e06b      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d11b      	bne.n	80030fc <HAL_I2C_Master_Transmit+0x188>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d017      	beq.n	80030fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	6a39      	ldr	r1, [r7, #32]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f001 f960 	bl	80043c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00d      	beq.n	8003128 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	2b04      	cmp	r3, #4
 8003112:	d107      	bne.n	8003124 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e01a      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	2b00      	cmp	r3, #0
 800312e:	d194      	bne.n	800305a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800315c:	2302      	movs	r3, #2
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	00100002 	.word	0x00100002
 800316c:	ffff0000 	.word	0xffff0000

08003170 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08c      	sub	sp, #48	; 0x30
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	461a      	mov	r2, r3
 800317c:	460b      	mov	r3, r1
 800317e:	817b      	strh	r3, [r7, #10]
 8003180:	4613      	mov	r3, r2
 8003182:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003184:	f7ff fa40 	bl	8002608 <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b20      	cmp	r3, #32
 8003194:	f040 820b 	bne.w	80035ae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2319      	movs	r3, #25
 800319e:	2201      	movs	r2, #1
 80031a0:	497c      	ldr	r1, [pc, #496]	; (8003394 <HAL_I2C_Master_Receive+0x224>)
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fff8 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
 80031b0:	e1fe      	b.n	80035b0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_I2C_Master_Receive+0x50>
 80031bc:	2302      	movs	r3, #2
 80031be:	e1f7      	b.n	80035b0 <HAL_I2C_Master_Receive+0x440>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d007      	beq.n	80031e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2222      	movs	r2, #34	; 0x22
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2210      	movs	r2, #16
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	893a      	ldrh	r2, [r7, #8]
 8003216:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_I2C_Master_Receive+0x228>)
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003228:	8979      	ldrh	r1, [r7, #10]
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fd66 	bl	8003d00 <I2C_MasterRequestRead>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e1b8      	b.n	80035b0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003242:	2b00      	cmp	r3, #0
 8003244:	d113      	bne.n	800326e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003246:	2300      	movs	r3, #0
 8003248:	623b      	str	r3, [r7, #32]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	623b      	str	r3, [r7, #32]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	623b      	str	r3, [r7, #32]
 800325a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e18c      	b.n	8003588 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	2b01      	cmp	r3, #1
 8003274:	d11b      	bne.n	80032ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e16c      	b.n	8003588 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d11b      	bne.n	80032ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	e14c      	b.n	8003588 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003314:	e138      	b.n	8003588 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	2b03      	cmp	r3, #3
 800331c:	f200 80f1 	bhi.w	8003502 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	2b01      	cmp	r3, #1
 8003326:	d123      	bne.n	8003370 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f001 f88b 	bl	8004448 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e139      	b.n	80035b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800336e:	e10b      	b.n	8003588 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	2b02      	cmp	r3, #2
 8003376:	d14e      	bne.n	8003416 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	2200      	movs	r2, #0
 8003380:	4906      	ldr	r1, [pc, #24]	; (800339c <HAL_I2C_Master_Receive+0x22c>)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 ff08 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e10e      	b.n	80035b0 <HAL_I2C_Master_Receive+0x440>
 8003392:	bf00      	nop
 8003394:	00100002 	.word	0x00100002
 8003398:	ffff0000 	.word	0xffff0000
 800339c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003414:	e0b8      	b.n	8003588 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	2200      	movs	r2, #0
 800341e:	4966      	ldr	r1, [pc, #408]	; (80035b8 <HAL_I2C_Master_Receive+0x448>)
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 feb9 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0bf      	b.n	80035b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	2200      	movs	r2, #0
 800347a:	494f      	ldr	r1, [pc, #316]	; (80035b8 <HAL_I2C_Master_Receive+0x448>)
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fe8b 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e091      	b.n	80035b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003500:	e042      	b.n	8003588 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 ff9e 	bl	8004448 <I2C_WaitOnRXNEFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e04c      	b.n	80035b0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d118      	bne.n	8003588 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	f47f aec2 	bne.w	8003316 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e000      	b.n	80035b0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
  }
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3728      	adds	r7, #40	; 0x28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	00010004 	.word	0x00010004

080035bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	4608      	mov	r0, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	461a      	mov	r2, r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	817b      	strh	r3, [r7, #10]
 80035ce:	460b      	mov	r3, r1
 80035d0:	813b      	strh	r3, [r7, #8]
 80035d2:	4613      	mov	r3, r2
 80035d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035d6:	f7ff f817 	bl	8002608 <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	f040 80d9 	bne.w	800379c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	2319      	movs	r3, #25
 80035f0:	2201      	movs	r2, #1
 80035f2:	496d      	ldr	r1, [pc, #436]	; (80037a8 <HAL_I2C_Mem_Write+0x1ec>)
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fdcf 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
 8003602:	e0cc      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_I2C_Mem_Write+0x56>
 800360e:	2302      	movs	r3, #2
 8003610:	e0c5      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b01      	cmp	r3, #1
 8003626:	d007      	beq.n	8003638 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003646:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2221      	movs	r2, #33	; 0x21
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2240      	movs	r2, #64	; 0x40
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003668:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a4d      	ldr	r2, [pc, #308]	; (80037ac <HAL_I2C_Mem_Write+0x1f0>)
 8003678:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800367a:	88f8      	ldrh	r0, [r7, #6]
 800367c:	893a      	ldrh	r2, [r7, #8]
 800367e:	8979      	ldrh	r1, [r7, #10]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	4603      	mov	r3, r0
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fc06 	bl	8003e9c <I2C_RequestMemoryWrite>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d052      	beq.n	800373c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e081      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fe50 	bl	8004344 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d107      	bne.n	80036c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e06b      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	781a      	ldrb	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b04      	cmp	r3, #4
 8003702:	d11b      	bne.n	800373c <HAL_I2C_Mem_Write+0x180>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	2b00      	cmp	r3, #0
 800370a:	d017      	beq.n	800373c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1aa      	bne.n	800369a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fe3c 	bl	80043c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	2b04      	cmp	r3, #4
 800375a:	d107      	bne.n	800376c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e016      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e000      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
  }
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	00100002 	.word	0x00100002
 80037ac:	ffff0000 	.word	0xffff0000

080037b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08c      	sub	sp, #48	; 0x30
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	4608      	mov	r0, r1
 80037ba:	4611      	mov	r1, r2
 80037bc:	461a      	mov	r2, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	817b      	strh	r3, [r7, #10]
 80037c2:	460b      	mov	r3, r1
 80037c4:	813b      	strh	r3, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ca:	f7fe ff1d 	bl	8002608 <HAL_GetTick>
 80037ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b20      	cmp	r3, #32
 80037da:	f040 8208 	bne.w	8003bee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2319      	movs	r3, #25
 80037e4:	2201      	movs	r2, #1
 80037e6:	497b      	ldr	r1, [pc, #492]	; (80039d4 <HAL_I2C_Mem_Read+0x224>)
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fcd5 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
 80037f6:	e1fb      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_I2C_Mem_Read+0x56>
 8003802:	2302      	movs	r3, #2
 8003804:	e1f4      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d007      	beq.n	800382c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800383a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2222      	movs	r2, #34	; 0x22
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2240      	movs	r2, #64	; 0x40
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800385c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a5b      	ldr	r2, [pc, #364]	; (80039d8 <HAL_I2C_Mem_Read+0x228>)
 800386c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800386e:	88f8      	ldrh	r0, [r7, #6]
 8003870:	893a      	ldrh	r2, [r7, #8]
 8003872:	8979      	ldrh	r1, [r7, #10]
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	4603      	mov	r3, r0
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fba2 	bl	8003fc8 <I2C_RequestMemoryRead>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e1b0      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	2b00      	cmp	r3, #0
 8003894:	d113      	bne.n	80038be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	623b      	str	r3, [r7, #32]
 80038aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	e184      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d11b      	bne.n	80038fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e164      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	2b02      	cmp	r3, #2
 8003904:	d11b      	bne.n	800393e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003914:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	e144      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003954:	e138      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	2b03      	cmp	r3, #3
 800395c:	f200 80f1 	bhi.w	8003b42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	2b01      	cmp	r3, #1
 8003966:	d123      	bne.n	80039b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fd6b 	bl	8004448 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e139      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ae:	e10b      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d14e      	bne.n	8003a56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	2200      	movs	r2, #0
 80039c0:	4906      	ldr	r1, [pc, #24]	; (80039dc <HAL_I2C_Mem_Read+0x22c>)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fbe8 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e10e      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
 80039d2:	bf00      	nop
 80039d4:	00100002 	.word	0x00100002
 80039d8:	ffff0000 	.word	0xffff0000
 80039dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a54:	e0b8      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	4966      	ldr	r1, [pc, #408]	; (8003bf8 <HAL_I2C_Mem_Read+0x448>)
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fb99 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0bf      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	2200      	movs	r2, #0
 8003aba:	494f      	ldr	r1, [pc, #316]	; (8003bf8 <HAL_I2C_Mem_Read+0x448>)
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fb6b 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e091      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ada:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b40:	e042      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 fc7e 	bl	8004448 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e04c      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d118      	bne.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f47f aec2 	bne.w	8003956 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3728      	adds	r7, #40	; 0x28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	00010004 	.word	0x00010004

08003bfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d006      	beq.n	8003c26 <I2C_MasterRequestWrite+0x2a>
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d003      	beq.n	8003c26 <I2C_MasterRequestWrite+0x2a>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c24:	d108      	bne.n	8003c38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e00b      	b.n	8003c50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	2b12      	cmp	r3, #18
 8003c3e:	d107      	bne.n	8003c50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fa9b 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00d      	beq.n	8003c84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c76:	d103      	bne.n	8003c80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e035      	b.n	8003cf0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c8c:	d108      	bne.n	8003ca0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c8e:	897b      	ldrh	r3, [r7, #10]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c9c:	611a      	str	r2, [r3, #16]
 8003c9e:	e01b      	b.n	8003cd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ca0:	897b      	ldrh	r3, [r7, #10]
 8003ca2:	11db      	asrs	r3, r3, #7
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f003 0306 	and.w	r3, r3, #6
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f063 030f 	orn	r3, r3, #15
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	490e      	ldr	r1, [pc, #56]	; (8003cf8 <I2C_MasterRequestWrite+0xfc>)
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fac1 	bl	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e010      	b.n	8003cf0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cce:	897b      	ldrh	r3, [r7, #10]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4907      	ldr	r1, [pc, #28]	; (8003cfc <I2C_MasterRequestWrite+0x100>)
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fab1 	bl	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	00010008 	.word	0x00010008
 8003cfc:	00010002 	.word	0x00010002

08003d00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d006      	beq.n	8003d3a <I2C_MasterRequestRead+0x3a>
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d003      	beq.n	8003d3a <I2C_MasterRequestRead+0x3a>
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d38:	d108      	bne.n	8003d4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	e00b      	b.n	8003d64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	2b11      	cmp	r3, #17
 8003d52:	d107      	bne.n	8003d64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fa11 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00d      	beq.n	8003d98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8a:	d103      	bne.n	8003d94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e079      	b.n	8003e8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da0:	d108      	bne.n	8003db4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003da2:	897b      	ldrh	r3, [r7, #10]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	611a      	str	r2, [r3, #16]
 8003db2:	e05f      	b.n	8003e74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003db4:	897b      	ldrh	r3, [r7, #10]
 8003db6:	11db      	asrs	r3, r3, #7
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f003 0306 	and.w	r3, r3, #6
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	f063 030f 	orn	r3, r3, #15
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4930      	ldr	r1, [pc, #192]	; (8003e94 <I2C_MasterRequestRead+0x194>)
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fa37 	bl	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e054      	b.n	8003e8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003de2:	897b      	ldrh	r3, [r7, #10]
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	4929      	ldr	r1, [pc, #164]	; (8003e98 <I2C_MasterRequestRead+0x198>)
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 fa27 	bl	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e044      	b.n	8003e8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e02:	2300      	movs	r3, #0
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f9af 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00d      	beq.n	8003e5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e4e:	d103      	bne.n	8003e58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e017      	b.n	8003e8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003e5c:	897b      	ldrh	r3, [r7, #10]
 8003e5e:	11db      	asrs	r3, r3, #7
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f003 0306 	and.w	r3, r3, #6
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f063 030e 	orn	r3, r3, #14
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4907      	ldr	r1, [pc, #28]	; (8003e98 <I2C_MasterRequestRead+0x198>)
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f9e3 	bl	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	00010008 	.word	0x00010008
 8003e98:	00010002 	.word	0x00010002

08003e9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	4608      	mov	r0, r1
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4603      	mov	r3, r0
 8003eac:	817b      	strh	r3, [r7, #10]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	813b      	strh	r3, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 f960 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00d      	beq.n	8003efa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eec:	d103      	bne.n	8003ef6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e05f      	b.n	8003fba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003efa:	897b      	ldrh	r3, [r7, #10]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	6a3a      	ldr	r2, [r7, #32]
 8003f0e:	492d      	ldr	r1, [pc, #180]	; (8003fc4 <I2C_RequestMemoryWrite+0x128>)
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f998 	bl	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e04c      	b.n	8003fba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f38:	6a39      	ldr	r1, [r7, #32]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fa02 	bl	8004344 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d107      	bne.n	8003f5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e02b      	b.n	8003fba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d105      	bne.n	8003f74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f68:	893b      	ldrh	r3, [r7, #8]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	611a      	str	r2, [r3, #16]
 8003f72:	e021      	b.n	8003fb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f74:	893b      	ldrh	r3, [r7, #8]
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f84:	6a39      	ldr	r1, [r7, #32]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f9dc 	bl	8004344 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00d      	beq.n	8003fae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d107      	bne.n	8003faa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e005      	b.n	8003fba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fae:	893b      	ldrh	r3, [r7, #8]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	00010002 	.word	0x00010002

08003fc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	817b      	strh	r3, [r7, #10]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	813b      	strh	r3, [r7, #8]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004000:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	2200      	movs	r2, #0
 800400a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f8c2 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00d      	beq.n	8004036 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004028:	d103      	bne.n	8004032 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004030:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e0aa      	b.n	800418c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004036:	897b      	ldrh	r3, [r7, #10]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004044:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	4952      	ldr	r1, [pc, #328]	; (8004194 <I2C_RequestMemoryRead+0x1cc>)
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f8fa 	bl	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e097      	b.n	800418c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004074:	6a39      	ldr	r1, [r7, #32]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f964 	bl	8004344 <I2C_WaitOnTXEFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b04      	cmp	r3, #4
 8004088:	d107      	bne.n	800409a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004098:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e076      	b.n	800418c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d105      	bne.n	80040b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040a4:	893b      	ldrh	r3, [r7, #8]
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	611a      	str	r2, [r3, #16]
 80040ae:	e021      	b.n	80040f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040b0:	893b      	ldrh	r3, [r7, #8]
 80040b2:	0a1b      	lsrs	r3, r3, #8
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c0:	6a39      	ldr	r1, [r7, #32]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f93e 	bl	8004344 <I2C_WaitOnTXEFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d107      	bne.n	80040e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e050      	b.n	800418c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040ea:	893b      	ldrh	r3, [r7, #8]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f6:	6a39      	ldr	r1, [r7, #32]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f923 	bl	8004344 <I2C_WaitOnTXEFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	2b04      	cmp	r3, #4
 800410a:	d107      	bne.n	800411c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e035      	b.n	800418c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800412e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	2200      	movs	r2, #0
 8004138:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f82b 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00d      	beq.n	8004164 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004156:	d103      	bne.n	8004160 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800415e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e013      	b.n	800418c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004164:	897b      	ldrh	r3, [r7, #10]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	b2da      	uxtb	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	6a3a      	ldr	r2, [r7, #32]
 8004178:	4906      	ldr	r1, [pc, #24]	; (8004194 <I2C_RequestMemoryRead+0x1cc>)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f863 	bl	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	00010002 	.word	0x00010002

08004198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041a8:	e025      	b.n	80041f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d021      	beq.n	80041f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b2:	f7fe fa29 	bl	8002608 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d302      	bcc.n	80041c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d116      	bne.n	80041f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e023      	b.n	800423e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d10d      	bne.n	800421c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	43da      	mvns	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4013      	ands	r3, r2
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	bf0c      	ite	eq
 8004212:	2301      	moveq	r3, #1
 8004214:	2300      	movne	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	e00c      	b.n	8004236 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	43da      	mvns	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4013      	ands	r3, r2
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	bf0c      	ite	eq
 800422e:	2301      	moveq	r3, #1
 8004230:	2300      	movne	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	429a      	cmp	r2, r3
 800423a:	d0b6      	beq.n	80041aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004254:	e051      	b.n	80042fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004264:	d123      	bne.n	80042ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004274:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800427e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f043 0204 	orr.w	r2, r3, #4
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e046      	b.n	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b4:	d021      	beq.n	80042fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b6:	f7fe f9a7 	bl	8002608 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d302      	bcc.n	80042cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d116      	bne.n	80042fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e020      	b.n	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	0c1b      	lsrs	r3, r3, #16
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d10c      	bne.n	800431e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	43da      	mvns	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4013      	ands	r3, r2
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	bf14      	ite	ne
 8004316:	2301      	movne	r3, #1
 8004318:	2300      	moveq	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	e00b      	b.n	8004336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	43da      	mvns	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	bf14      	ite	ne
 8004330:	2301      	movne	r3, #1
 8004332:	2300      	moveq	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d18d      	bne.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004350:	e02d      	b.n	80043ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f8ce 	bl	80044f4 <I2C_IsAcknowledgeFailed>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e02d      	b.n	80043be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004368:	d021      	beq.n	80043ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436a:	f7fe f94d 	bl	8002608 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	d302      	bcc.n	8004380 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d116      	bne.n	80043ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f043 0220 	orr.w	r2, r3, #32
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e007      	b.n	80043be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b8:	2b80      	cmp	r3, #128	; 0x80
 80043ba:	d1ca      	bne.n	8004352 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043d2:	e02d      	b.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f88d 	bl	80044f4 <I2C_IsAcknowledgeFailed>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e02d      	b.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ea:	d021      	beq.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ec:	f7fe f90c 	bl	8002608 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d302      	bcc.n	8004402 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d116      	bne.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e007      	b.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d1ca      	bne.n	80043d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004454:	e042      	b.n	80044dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b10      	cmp	r3, #16
 8004462:	d119      	bne.n	8004498 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0210 	mvn.w	r2, #16
 800446c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e029      	b.n	80044ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004498:	f7fe f8b6 	bl	8002608 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d302      	bcc.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d116      	bne.n	80044dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f043 0220 	orr.w	r2, r3, #32
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e007      	b.n	80044ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e6:	2b40      	cmp	r3, #64	; 0x40
 80044e8:	d1b5      	bne.n	8004456 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450a:	d11b      	bne.n	8004544 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004514:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f043 0204 	orr.w	r2, r3, #4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
	...

08004554 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e267      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d075      	beq.n	800465e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004572:	4b88      	ldr	r3, [pc, #544]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b04      	cmp	r3, #4
 800457c:	d00c      	beq.n	8004598 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457e:	4b85      	ldr	r3, [pc, #532]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004586:	2b08      	cmp	r3, #8
 8004588:	d112      	bne.n	80045b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458a:	4b82      	ldr	r3, [pc, #520]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004596:	d10b      	bne.n	80045b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	4b7e      	ldr	r3, [pc, #504]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d05b      	beq.n	800465c <HAL_RCC_OscConfig+0x108>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d157      	bne.n	800465c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e242      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b8:	d106      	bne.n	80045c8 <HAL_RCC_OscConfig+0x74>
 80045ba:	4b76      	ldr	r3, [pc, #472]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a75      	ldr	r2, [pc, #468]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e01d      	b.n	8004604 <HAL_RCC_OscConfig+0xb0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0x98>
 80045d2:	4b70      	ldr	r3, [pc, #448]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a6f      	ldr	r2, [pc, #444]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80045d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b6d      	ldr	r3, [pc, #436]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6c      	ldr	r2, [pc, #432]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80045e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0xb0>
 80045ec:	4b69      	ldr	r3, [pc, #420]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a68      	ldr	r2, [pc, #416]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b66      	ldr	r3, [pc, #408]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a65      	ldr	r2, [pc, #404]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d013      	beq.n	8004634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fd fffc 	bl	8002608 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004614:	f7fd fff8 	bl	8002608 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	; 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e207      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	4b5b      	ldr	r3, [pc, #364]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0xc0>
 8004632:	e014      	b.n	800465e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fd ffe8 	bl	8002608 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800463c:	f7fd ffe4 	bl	8002608 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	; 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e1f3      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464e:	4b51      	ldr	r3, [pc, #324]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0xe8>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d063      	beq.n	8004732 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800466a:	4b4a      	ldr	r3, [pc, #296]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004676:	4b47      	ldr	r3, [pc, #284]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800467e:	2b08      	cmp	r3, #8
 8004680:	d11c      	bne.n	80046bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004682:	4b44      	ldr	r3, [pc, #272]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d116      	bne.n	80046bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468e:	4b41      	ldr	r3, [pc, #260]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_RCC_OscConfig+0x152>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d001      	beq.n	80046a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e1c7      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a6:	4b3b      	ldr	r3, [pc, #236]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4937      	ldr	r1, [pc, #220]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ba:	e03a      	b.n	8004732 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d020      	beq.n	8004706 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c4:	4b34      	ldr	r3, [pc, #208]	; (8004798 <HAL_RCC_OscConfig+0x244>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd ff9d 	bl	8002608 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d2:	f7fd ff99 	bl	8002608 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e1a8      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e4:	4b2b      	ldr	r3, [pc, #172]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f0:	4b28      	ldr	r3, [pc, #160]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4925      	ldr	r1, [pc, #148]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 8004700:	4313      	orrs	r3, r2
 8004702:	600b      	str	r3, [r1, #0]
 8004704:	e015      	b.n	8004732 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004706:	4b24      	ldr	r3, [pc, #144]	; (8004798 <HAL_RCC_OscConfig+0x244>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fd ff7c 	bl	8002608 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004714:	f7fd ff78 	bl	8002608 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e187      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004726:	4b1b      	ldr	r3, [pc, #108]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d036      	beq.n	80047ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d016      	beq.n	8004774 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004746:	4b15      	ldr	r3, [pc, #84]	; (800479c <HAL_RCC_OscConfig+0x248>)
 8004748:	2201      	movs	r2, #1
 800474a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fd ff5c 	bl	8002608 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004754:	f7fd ff58 	bl	8002608 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e167      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <HAL_RCC_OscConfig+0x240>)
 8004768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x200>
 8004772:	e01b      	b.n	80047ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004774:	4b09      	ldr	r3, [pc, #36]	; (800479c <HAL_RCC_OscConfig+0x248>)
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477a:	f7fd ff45 	bl	8002608 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004780:	e00e      	b.n	80047a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004782:	f7fd ff41 	bl	8002608 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d907      	bls.n	80047a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e150      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
 8004794:	40023800 	.word	0x40023800
 8004798:	42470000 	.word	0x42470000
 800479c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a0:	4b88      	ldr	r3, [pc, #544]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1ea      	bne.n	8004782 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8097 	beq.w	80048e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ba:	2300      	movs	r3, #0
 80047bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047be:	4b81      	ldr	r3, [pc, #516]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10f      	bne.n	80047ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	4b7d      	ldr	r3, [pc, #500]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	4a7c      	ldr	r2, [pc, #496]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d8:	6413      	str	r3, [r2, #64]	; 0x40
 80047da:	4b7a      	ldr	r3, [pc, #488]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ea:	4b77      	ldr	r3, [pc, #476]	; (80049c8 <HAL_RCC_OscConfig+0x474>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d118      	bne.n	8004828 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f6:	4b74      	ldr	r3, [pc, #464]	; (80049c8 <HAL_RCC_OscConfig+0x474>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a73      	ldr	r2, [pc, #460]	; (80049c8 <HAL_RCC_OscConfig+0x474>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004802:	f7fd ff01 	bl	8002608 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480a:	f7fd fefd 	bl	8002608 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e10c      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481c:	4b6a      	ldr	r3, [pc, #424]	; (80049c8 <HAL_RCC_OscConfig+0x474>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d106      	bne.n	800483e <HAL_RCC_OscConfig+0x2ea>
 8004830:	4b64      	ldr	r3, [pc, #400]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	4a63      	ldr	r2, [pc, #396]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	6713      	str	r3, [r2, #112]	; 0x70
 800483c:	e01c      	b.n	8004878 <HAL_RCC_OscConfig+0x324>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b05      	cmp	r3, #5
 8004844:	d10c      	bne.n	8004860 <HAL_RCC_OscConfig+0x30c>
 8004846:	4b5f      	ldr	r3, [pc, #380]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484a:	4a5e      	ldr	r2, [pc, #376]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 800484c:	f043 0304 	orr.w	r3, r3, #4
 8004850:	6713      	str	r3, [r2, #112]	; 0x70
 8004852:	4b5c      	ldr	r3, [pc, #368]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	4a5b      	ldr	r2, [pc, #364]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	6713      	str	r3, [r2, #112]	; 0x70
 800485e:	e00b      	b.n	8004878 <HAL_RCC_OscConfig+0x324>
 8004860:	4b58      	ldr	r3, [pc, #352]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004864:	4a57      	ldr	r2, [pc, #348]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	6713      	str	r3, [r2, #112]	; 0x70
 800486c:	4b55      	ldr	r3, [pc, #340]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	4a54      	ldr	r2, [pc, #336]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004872:	f023 0304 	bic.w	r3, r3, #4
 8004876:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d015      	beq.n	80048ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fd fec2 	bl	8002608 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004886:	e00a      	b.n	800489e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fd febe 	bl	8002608 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	; 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e0cb      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489e:	4b49      	ldr	r3, [pc, #292]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0ee      	beq.n	8004888 <HAL_RCC_OscConfig+0x334>
 80048aa:	e014      	b.n	80048d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ac:	f7fd feac 	bl	8002608 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b4:	f7fd fea8 	bl	8002608 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e0b5      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ca:	4b3e      	ldr	r3, [pc, #248]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1ee      	bne.n	80048b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d105      	bne.n	80048e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048dc:	4b39      	ldr	r3, [pc, #228]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	4a38      	ldr	r2, [pc, #224]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80a1 	beq.w	8004a34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048f2:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d05c      	beq.n	80049b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d141      	bne.n	800498a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004906:	4b31      	ldr	r3, [pc, #196]	; (80049cc <HAL_RCC_OscConfig+0x478>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7fd fe7c 	bl	8002608 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004914:	f7fd fe78 	bl	8002608 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e087      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004926:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69da      	ldr	r2, [r3, #28]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	019b      	lsls	r3, r3, #6
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	3b01      	subs	r3, #1
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	491b      	ldr	r1, [pc, #108]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004958:	4313      	orrs	r3, r2
 800495a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800495c:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <HAL_RCC_OscConfig+0x478>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004962:	f7fd fe51 	bl	8002608 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496a:	f7fd fe4d 	bl	8002608 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e05c      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497c:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCC_OscConfig+0x416>
 8004988:	e054      	b.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498a:	4b10      	ldr	r3, [pc, #64]	; (80049cc <HAL_RCC_OscConfig+0x478>)
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004990:	f7fd fe3a 	bl	8002608 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004998:	f7fd fe36 	bl	8002608 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e045      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_RCC_OscConfig+0x470>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x444>
 80049b6:	e03d      	b.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d107      	bne.n	80049d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e038      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40007000 	.word	0x40007000
 80049cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049d0:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <HAL_RCC_OscConfig+0x4ec>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d028      	beq.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d121      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d11a      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a00:	4013      	ands	r3, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d111      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40023800 	.word	0x40023800

08004a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0cc      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a58:	4b68      	ldr	r3, [pc, #416]	; (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d90c      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a66:	4b65      	ldr	r3, [pc, #404]	; (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b63      	ldr	r3, [pc, #396]	; (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0b8      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d020      	beq.n	8004ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a98:	4b59      	ldr	r3, [pc, #356]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4a58      	ldr	r2, [pc, #352]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ab0:	4b53      	ldr	r3, [pc, #332]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	4a52      	ldr	r2, [pc, #328]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004abc:	4b50      	ldr	r3, [pc, #320]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	494d      	ldr	r1, [pc, #308]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d044      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d107      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	4b47      	ldr	r3, [pc, #284]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d119      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e07f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d003      	beq.n	8004b02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d107      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b02:	4b3f      	ldr	r3, [pc, #252]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e06f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b12:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e067      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b22:	4b37      	ldr	r3, [pc, #220]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f023 0203 	bic.w	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4934      	ldr	r1, [pc, #208]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b34:	f7fd fd68 	bl	8002608 <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3a:	e00a      	b.n	8004b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b3c:	f7fd fd64 	bl	8002608 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e04f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b52:	4b2b      	ldr	r3, [pc, #172]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 020c 	and.w	r2, r3, #12
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d1eb      	bne.n	8004b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b64:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d20c      	bcs.n	8004b8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b72:	4b22      	ldr	r3, [pc, #136]	; (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7a:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d001      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e032      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b98:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4916      	ldr	r1, [pc, #88]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bb6:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	490e      	ldr	r1, [pc, #56]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bca:	f000 f821 	bl	8004c10 <HAL_RCC_GetSysClockFreq>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	091b      	lsrs	r3, r3, #4
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	490a      	ldr	r1, [pc, #40]	; (8004c04 <HAL_RCC_ClockConfig+0x1c0>)
 8004bdc:	5ccb      	ldrb	r3, [r1, r3]
 8004bde:	fa22 f303 	lsr.w	r3, r2, r3
 8004be2:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <HAL_RCC_ClockConfig+0x1c4>)
 8004be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004be6:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_RCC_ClockConfig+0x1c8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fd fcc8 	bl	8002580 <HAL_InitTick>

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40023c00 	.word	0x40023c00
 8004c00:	40023800 	.word	0x40023800
 8004c04:	08009750 	.word	0x08009750
 8004c08:	20000000 	.word	0x20000000
 8004c0c:	20000004 	.word	0x20000004

08004c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c14:	b090      	sub	sp, #64	; 0x40
 8004c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c20:	2300      	movs	r3, #0
 8004c22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c28:	4b59      	ldr	r3, [pc, #356]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 030c 	and.w	r3, r3, #12
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d00d      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x40>
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	f200 80a1 	bhi.w	8004d7c <HAL_RCC_GetSysClockFreq+0x16c>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_RCC_GetSysClockFreq+0x34>
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d003      	beq.n	8004c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c42:	e09b      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c44:	4b53      	ldr	r3, [pc, #332]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004c48:	e09b      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c4a:	4b53      	ldr	r3, [pc, #332]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c4e:	e098      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c50:	4b4f      	ldr	r3, [pc, #316]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c5a:	4b4d      	ldr	r3, [pc, #308]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d028      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c66:	4b4a      	ldr	r3, [pc, #296]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	627a      	str	r2, [r7, #36]	; 0x24
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c7c:	fb03 f201 	mul.w	r2, r3, r1
 8004c80:	2300      	movs	r3, #0
 8004c82:	fb00 f303 	mul.w	r3, r0, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	4a43      	ldr	r2, [pc, #268]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c8a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c90:	460a      	mov	r2, r1
 8004c92:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c96:	4413      	add	r3, r2
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	61fa      	str	r2, [r7, #28]
 8004ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ca6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004caa:	f7fb ffd5 	bl	8000c58 <__aeabi_uldivmod>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb6:	e053      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb8:	4b35      	ldr	r3, [pc, #212]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	617a      	str	r2, [r7, #20]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cca:	f04f 0b00 	mov.w	fp, #0
 8004cce:	4652      	mov	r2, sl
 8004cd0:	465b      	mov	r3, fp
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	f04f 0100 	mov.w	r1, #0
 8004cda:	0159      	lsls	r1, r3, #5
 8004cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce0:	0150      	lsls	r0, r2, #5
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	ebb2 080a 	subs.w	r8, r2, sl
 8004cea:	eb63 090b 	sbc.w	r9, r3, fp
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d02:	ebb2 0408 	subs.w	r4, r2, r8
 8004d06:	eb63 0509 	sbc.w	r5, r3, r9
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	00eb      	lsls	r3, r5, #3
 8004d14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d18:	00e2      	lsls	r2, r4, #3
 8004d1a:	4614      	mov	r4, r2
 8004d1c:	461d      	mov	r5, r3
 8004d1e:	eb14 030a 	adds.w	r3, r4, sl
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	eb45 030b 	adc.w	r3, r5, fp
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d36:	4629      	mov	r1, r5
 8004d38:	028b      	lsls	r3, r1, #10
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d40:	4621      	mov	r1, r4
 8004d42:	028a      	lsls	r2, r1, #10
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	60fa      	str	r2, [r7, #12]
 8004d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d54:	f7fb ff80 	bl	8000c58 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d7a:	e002      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3740      	adds	r7, #64	; 0x40
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800
 8004d94:	00f42400 	.word	0x00f42400
 8004d98:	017d7840 	.word	0x017d7840

08004d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004da2:	681b      	ldr	r3, [r3, #0]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000000 	.word	0x20000000

08004db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004db8:	f7ff fff0 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	0a9b      	lsrs	r3, r3, #10
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	4903      	ldr	r1, [pc, #12]	; (8004dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dca:	5ccb      	ldrb	r3, [r1, r3]
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	08009760 	.word	0x08009760

08004ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004de0:	f7ff ffdc 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 8004de4:	4602      	mov	r2, r0
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	0b5b      	lsrs	r3, r3, #13
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	4903      	ldr	r1, [pc, #12]	; (8004e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004df2:	5ccb      	ldrb	r3, [r1, r3]
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	08009760 	.word	0x08009760

08004e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e041      	b.n	8004e9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fd f9a6 	bl	800217c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f000 fa92 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d001      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e044      	b.n	8004f46 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1e      	ldr	r2, [pc, #120]	; (8004f54 <HAL_TIM_Base_Start_IT+0xb0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d018      	beq.n	8004f10 <HAL_TIM_Base_Start_IT+0x6c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee6:	d013      	beq.n	8004f10 <HAL_TIM_Base_Start_IT+0x6c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a1a      	ldr	r2, [pc, #104]	; (8004f58 <HAL_TIM_Base_Start_IT+0xb4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00e      	beq.n	8004f10 <HAL_TIM_Base_Start_IT+0x6c>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a19      	ldr	r2, [pc, #100]	; (8004f5c <HAL_TIM_Base_Start_IT+0xb8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d009      	beq.n	8004f10 <HAL_TIM_Base_Start_IT+0x6c>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a17      	ldr	r2, [pc, #92]	; (8004f60 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <HAL_TIM_Base_Start_IT+0x6c>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a16      	ldr	r2, [pc, #88]	; (8004f64 <HAL_TIM_Base_Start_IT+0xc0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d111      	bne.n	8004f34 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b06      	cmp	r3, #6
 8004f20:	d010      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0201 	orr.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f32:	e007      	b.n	8004f44 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800
 8004f60:	40000c00 	.word	0x40000c00
 8004f64:	40014000 	.word	0x40014000

08004f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d122      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d11b      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0202 	mvn.w	r2, #2
 8004f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f9bf 	bl	800532e <HAL_TIM_IC_CaptureCallback>
 8004fb0:	e005      	b.n	8004fbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9b1 	bl	800531a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f9c2 	bl	8005342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d122      	bne.n	8005018 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d11b      	bne.n	8005018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0204 	mvn.w	r2, #4
 8004fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2202      	movs	r2, #2
 8004fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f995 	bl	800532e <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f987 	bl	800531a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f998 	bl	8005342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b08      	cmp	r3, #8
 8005024:	d122      	bne.n	800506c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b08      	cmp	r3, #8
 8005032:	d11b      	bne.n	800506c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0208 	mvn.w	r2, #8
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2204      	movs	r2, #4
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f96b 	bl	800532e <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f95d 	bl	800531a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f96e 	bl	8005342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	2b10      	cmp	r3, #16
 8005078:	d122      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b10      	cmp	r3, #16
 8005086:	d11b      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0210 	mvn.w	r2, #16
 8005090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2208      	movs	r2, #8
 8005096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f941 	bl	800532e <HAL_TIM_IC_CaptureCallback>
 80050ac:	e005      	b.n	80050ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f933 	bl	800531a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f944 	bl	8005342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d10e      	bne.n	80050ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d107      	bne.n	80050ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0201 	mvn.w	r2, #1
 80050e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f90d 	bl	8005306 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f6:	2b80      	cmp	r3, #128	; 0x80
 80050f8:	d10e      	bne.n	8005118 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005104:	2b80      	cmp	r3, #128	; 0x80
 8005106:	d107      	bne.n	8005118 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fabc 	bl	8005690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d10e      	bne.n	8005144 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005130:	2b40      	cmp	r3, #64	; 0x40
 8005132:	d107      	bne.n	8005144 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800513c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f909 	bl	8005356 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b20      	cmp	r3, #32
 8005150:	d10e      	bne.n	8005170 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b20      	cmp	r3, #32
 800515e:	d107      	bne.n	8005170 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0220 	mvn.w	r2, #32
 8005168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fa86 	bl	800567c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_TIM_ConfigClockSource+0x1c>
 8005190:	2302      	movs	r3, #2
 8005192:	e0b4      	b.n	80052fe <HAL_TIM_ConfigClockSource+0x186>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051cc:	d03e      	beq.n	800524c <HAL_TIM_ConfigClockSource+0xd4>
 80051ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d2:	f200 8087 	bhi.w	80052e4 <HAL_TIM_ConfigClockSource+0x16c>
 80051d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051da:	f000 8086 	beq.w	80052ea <HAL_TIM_ConfigClockSource+0x172>
 80051de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e2:	d87f      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x16c>
 80051e4:	2b70      	cmp	r3, #112	; 0x70
 80051e6:	d01a      	beq.n	800521e <HAL_TIM_ConfigClockSource+0xa6>
 80051e8:	2b70      	cmp	r3, #112	; 0x70
 80051ea:	d87b      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x16c>
 80051ec:	2b60      	cmp	r3, #96	; 0x60
 80051ee:	d050      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x11a>
 80051f0:	2b60      	cmp	r3, #96	; 0x60
 80051f2:	d877      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x16c>
 80051f4:	2b50      	cmp	r3, #80	; 0x50
 80051f6:	d03c      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0xfa>
 80051f8:	2b50      	cmp	r3, #80	; 0x50
 80051fa:	d873      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x16c>
 80051fc:	2b40      	cmp	r3, #64	; 0x40
 80051fe:	d058      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005200:	2b40      	cmp	r3, #64	; 0x40
 8005202:	d86f      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005204:	2b30      	cmp	r3, #48	; 0x30
 8005206:	d064      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005208:	2b30      	cmp	r3, #48	; 0x30
 800520a:	d86b      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x16c>
 800520c:	2b20      	cmp	r3, #32
 800520e:	d060      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005210:	2b20      	cmp	r3, #32
 8005212:	d867      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d05c      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005218:	2b10      	cmp	r3, #16
 800521a:	d05a      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x15a>
 800521c:	e062      	b.n	80052e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6899      	ldr	r1, [r3, #8]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f000 f997 	bl	8005560 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005240:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	609a      	str	r2, [r3, #8]
      break;
 800524a:	e04f      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	6899      	ldr	r1, [r3, #8]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f000 f980 	bl	8005560 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800526e:	609a      	str	r2, [r3, #8]
      break;
 8005270:	e03c      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6859      	ldr	r1, [r3, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	461a      	mov	r2, r3
 8005280:	f000 f8f4 	bl	800546c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2150      	movs	r1, #80	; 0x50
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f94d 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8005290:	e02c      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 f913 	bl	80054ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2160      	movs	r1, #96	; 0x60
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f93d 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 80052b0:	e01c      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6859      	ldr	r1, [r3, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	461a      	mov	r2, r3
 80052c0:	f000 f8d4 	bl	800546c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2140      	movs	r1, #64	; 0x40
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 f92d 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 80052d0:	e00c      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f000 f924 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 80052e2:	e003      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
      break;
 80052e8:	e000      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a34      	ldr	r2, [pc, #208]	; (8005450 <TIM_Base_SetConfig+0xe4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00f      	beq.n	80053a4 <TIM_Base_SetConfig+0x38>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538a:	d00b      	beq.n	80053a4 <TIM_Base_SetConfig+0x38>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a31      	ldr	r2, [pc, #196]	; (8005454 <TIM_Base_SetConfig+0xe8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d007      	beq.n	80053a4 <TIM_Base_SetConfig+0x38>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a30      	ldr	r2, [pc, #192]	; (8005458 <TIM_Base_SetConfig+0xec>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_Base_SetConfig+0x38>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a2f      	ldr	r2, [pc, #188]	; (800545c <TIM_Base_SetConfig+0xf0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d108      	bne.n	80053b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a25      	ldr	r2, [pc, #148]	; (8005450 <TIM_Base_SetConfig+0xe4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01b      	beq.n	80053f6 <TIM_Base_SetConfig+0x8a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c4:	d017      	beq.n	80053f6 <TIM_Base_SetConfig+0x8a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a22      	ldr	r2, [pc, #136]	; (8005454 <TIM_Base_SetConfig+0xe8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <TIM_Base_SetConfig+0x8a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a21      	ldr	r2, [pc, #132]	; (8005458 <TIM_Base_SetConfig+0xec>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00f      	beq.n	80053f6 <TIM_Base_SetConfig+0x8a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a20      	ldr	r2, [pc, #128]	; (800545c <TIM_Base_SetConfig+0xf0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <TIM_Base_SetConfig+0x8a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a1f      	ldr	r2, [pc, #124]	; (8005460 <TIM_Base_SetConfig+0xf4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d007      	beq.n	80053f6 <TIM_Base_SetConfig+0x8a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a1e      	ldr	r2, [pc, #120]	; (8005464 <TIM_Base_SetConfig+0xf8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_Base_SetConfig+0x8a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1d      	ldr	r2, [pc, #116]	; (8005468 <TIM_Base_SetConfig+0xfc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d108      	bne.n	8005408 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a08      	ldr	r2, [pc, #32]	; (8005450 <TIM_Base_SetConfig+0xe4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d103      	bne.n	800543c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	615a      	str	r2, [r3, #20]
}
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40010000 	.word	0x40010000
 8005454:	40000400 	.word	0x40000400
 8005458:	40000800 	.word	0x40000800
 800545c:	40000c00 	.word	0x40000c00
 8005460:	40014000 	.word	0x40014000
 8005464:	40014400 	.word	0x40014400
 8005468:	40014800 	.word	0x40014800

0800546c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f023 0201 	bic.w	r2, r3, #1
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f023 030a 	bic.w	r3, r3, #10
 80054a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b087      	sub	sp, #28
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f023 0210 	bic.w	r2, r3, #16
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	031b      	lsls	r3, r3, #12
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005506:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	f043 0307 	orr.w	r3, r3, #7
 800554c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	609a      	str	r2, [r3, #8]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800557a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	021a      	lsls	r2, r3, #8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	431a      	orrs	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4313      	orrs	r3, r2
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	609a      	str	r2, [r3, #8]
}
 8005594:	bf00      	nop
 8005596:	371c      	adds	r7, #28
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e050      	b.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1c      	ldr	r2, [pc, #112]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d018      	beq.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005604:	d013      	beq.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a18      	ldr	r2, [pc, #96]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00e      	beq.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a16      	ldr	r2, [pc, #88]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d009      	beq.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a15      	ldr	r2, [pc, #84]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d004      	beq.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a13      	ldr	r2, [pc, #76]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d10c      	bne.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	4313      	orrs	r3, r2
 800563e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40010000 	.word	0x40010000
 800566c:	40000400 	.word	0x40000400
 8005670:	40000800 	.word	0x40000800
 8005674:	40000c00 	.word	0x40000c00
 8005678:	40014000 	.word	0x40014000

0800567c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e03f      	b.n	8005736 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fc fd7c 	bl	80021c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2224      	movs	r2, #36	; 0x24
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fdbf 	bl	800626c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695a      	ldr	r2, [r3, #20]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800570c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800571c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b08a      	sub	sp, #40	; 0x28
 8005742:	af02      	add	r7, sp, #8
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	603b      	str	r3, [r7, #0]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b20      	cmp	r3, #32
 800575c:	d17c      	bne.n	8005858 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_UART_Transmit+0x2c>
 8005764:	88fb      	ldrh	r3, [r7, #6]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e075      	b.n	800585a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_UART_Transmit+0x3e>
 8005778:	2302      	movs	r3, #2
 800577a:	e06e      	b.n	800585a <HAL_UART_Transmit+0x11c>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2221      	movs	r2, #33	; 0x21
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005792:	f7fc ff39 	bl	8002608 <HAL_GetTick>
 8005796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	88fa      	ldrh	r2, [r7, #6]
 800579c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	88fa      	ldrh	r2, [r7, #6]
 80057a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ac:	d108      	bne.n	80057c0 <HAL_UART_Transmit+0x82>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d104      	bne.n	80057c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	e003      	b.n	80057c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80057d0:	e02a      	b.n	8005828 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2200      	movs	r2, #0
 80057da:	2180      	movs	r1, #128	; 0x80
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fb3d 	bl	8005e5c <UART_WaitOnFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e036      	b.n	800585a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10b      	bne.n	800580a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005800:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	3302      	adds	r3, #2
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	e007      	b.n	800581a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	3301      	adds	r3, #1
 8005818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1cf      	bne.n	80057d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2200      	movs	r2, #0
 800583a:	2140      	movs	r1, #64	; 0x40
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fb0d 	bl	8005e5c <UART_WaitOnFlagUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e006      	b.n	800585a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	e000      	b.n	800585a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005858:	2302      	movs	r3, #2
  }
}
 800585a:	4618      	mov	r0, r3
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005862:	b480      	push	{r7}
 8005864:	b085      	sub	sp, #20
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	4613      	mov	r3, r2
 800586e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b20      	cmp	r3, #32
 800587a:	d130      	bne.n	80058de <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_UART_Transmit_IT+0x26>
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e029      	b.n	80058e0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_UART_Transmit_IT+0x38>
 8005896:	2302      	movs	r3, #2
 8005898:	e022      	b.n	80058e0 <HAL_UART_Transmit_IT+0x7e>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	88fa      	ldrh	r2, [r7, #6]
 80058ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	88fa      	ldrh	r2, [r7, #6]
 80058b2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2221      	movs	r2, #33	; 0x21
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	e000      	b.n	80058e0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80058de:	2302      	movs	r3, #2
  }
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b0ba      	sub	sp, #232	; 0xe8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005912:	2300      	movs	r3, #0
 8005914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005918:	2300      	movs	r3, #0
 800591a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800591e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800592a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10f      	bne.n	8005952 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <HAL_UART_IRQHandler+0x66>
 800593e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fbd3 	bl	80060f6 <UART_Receive_IT>
      return;
 8005950:	e256      	b.n	8005e00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 80de 	beq.w	8005b18 <HAL_UART_IRQHandler+0x22c>
 800595c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d106      	bne.n	8005976 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 80d1 	beq.w	8005b18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00b      	beq.n	800599a <HAL_UART_IRQHandler+0xae>
 8005982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	f043 0201 	orr.w	r2, r3, #1
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00b      	beq.n	80059be <HAL_UART_IRQHandler+0xd2>
 80059a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	f043 0202 	orr.w	r2, r3, #2
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00b      	beq.n	80059e2 <HAL_UART_IRQHandler+0xf6>
 80059ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f043 0204 	orr.w	r2, r3, #4
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d011      	beq.n	8005a12 <HAL_UART_IRQHandler+0x126>
 80059ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d105      	bne.n	8005a06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	f043 0208 	orr.w	r2, r3, #8
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 81ed 	beq.w	8005df6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_UART_IRQHandler+0x14e>
 8005a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fb5e 	bl	80060f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	bf0c      	ite	eq
 8005a48:	2301      	moveq	r3, #1
 8005a4a:	2300      	movne	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d103      	bne.n	8005a66 <HAL_UART_IRQHandler+0x17a>
 8005a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d04f      	beq.n	8005b06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa66 	bl	8005f38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a76:	2b40      	cmp	r3, #64	; 0x40
 8005a78:	d141      	bne.n	8005afe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3314      	adds	r3, #20
 8005a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3314      	adds	r3, #20
 8005aa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ab6:	e841 2300 	strex	r3, r2, [r1]
 8005aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1d9      	bne.n	8005a7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d013      	beq.n	8005af6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	4a7d      	ldr	r2, [pc, #500]	; (8005cc8 <HAL_UART_IRQHandler+0x3dc>)
 8005ad4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fc ff45 	bl	800296a <HAL_DMA_Abort_IT>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d016      	beq.n	8005b14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005af0:	4610      	mov	r0, r2
 8005af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af4:	e00e      	b.n	8005b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f99a 	bl	8005e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	e00a      	b.n	8005b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f996 	bl	8005e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b04:	e006      	b.n	8005b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f992 	bl	8005e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b12:	e170      	b.n	8005df6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b14:	bf00      	nop
    return;
 8005b16:	e16e      	b.n	8005df6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	f040 814a 	bne.w	8005db6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b26:	f003 0310 	and.w	r3, r3, #16
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 8143 	beq.w	8005db6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 813c 	beq.w	8005db6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	60bb      	str	r3, [r7, #8]
 8005b52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5e:	2b40      	cmp	r3, #64	; 0x40
 8005b60:	f040 80b4 	bne.w	8005ccc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8140 	beq.w	8005dfa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b82:	429a      	cmp	r2, r3
 8005b84:	f080 8139 	bcs.w	8005dfa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9a:	f000 8088 	beq.w	8005cae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	330c      	adds	r3, #12
 8005bc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1d9      	bne.n	8005b9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3314      	adds	r3, #20
 8005bf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bfc:	f023 0301 	bic.w	r3, r3, #1
 8005c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3314      	adds	r3, #20
 8005c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e1      	bne.n	8005bea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3314      	adds	r3, #20
 8005c2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3314      	adds	r3, #20
 8005c46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e3      	bne.n	8005c26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7e:	f023 0310 	bic.w	r3, r3, #16
 8005c82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c90:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e3      	bne.n	8005c6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fc fdee 	bl	800288a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f8c0 	bl	8005e44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cc4:	e099      	b.n	8005dfa <HAL_UART_IRQHandler+0x50e>
 8005cc6:	bf00      	nop
 8005cc8:	08005fff 	.word	0x08005fff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 808b 	beq.w	8005dfe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 8086 	beq.w	8005dfe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	330c      	adds	r3, #12
 8005cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	330c      	adds	r3, #12
 8005d12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d16:	647a      	str	r2, [r7, #68]	; 0x44
 8005d18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e3      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3314      	adds	r3, #20
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	623b      	str	r3, [r7, #32]
   return(result);
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3314      	adds	r3, #20
 8005d4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d4e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e3      	bne.n	8005d2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	330c      	adds	r3, #12
 8005d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	e853 3f00 	ldrex	r3, [r3]
 8005d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0310 	bic.w	r3, r3, #16
 8005d86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	330c      	adds	r3, #12
 8005d90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d94:	61fa      	str	r2, [r7, #28]
 8005d96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	69b9      	ldr	r1, [r7, #24]
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	617b      	str	r3, [r7, #20]
   return(result);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e3      	bne.n	8005d70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f848 	bl	8005e44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005db4:	e023      	b.n	8005dfe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x4ea>
 8005dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f929 	bl	8006026 <UART_Transmit_IT>
    return;
 8005dd4:	e014      	b.n	8005e00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00e      	beq.n	8005e00 <HAL_UART_IRQHandler+0x514>
 8005de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d008      	beq.n	8005e00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f969 	bl	80060c6 <UART_EndTransmit_IT>
    return;
 8005df4:	e004      	b.n	8005e00 <HAL_UART_IRQHandler+0x514>
    return;
 8005df6:	bf00      	nop
 8005df8:	e002      	b.n	8005e00 <HAL_UART_IRQHandler+0x514>
      return;
 8005dfa:	bf00      	nop
 8005dfc:	e000      	b.n	8005e00 <HAL_UART_IRQHandler+0x514>
      return;
 8005dfe:	bf00      	nop
  }
}
 8005e00:	37e8      	adds	r7, #232	; 0xe8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop

08005e08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b090      	sub	sp, #64	; 0x40
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e6c:	e050      	b.n	8005f10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e74:	d04c      	beq.n	8005f10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d007      	beq.n	8005e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e7c:	f7fc fbc4 	bl	8002608 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d241      	bcs.n	8005f10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	330c      	adds	r3, #12
 8005e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	e853 3f00 	ldrex	r3, [r3]
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005eac:	637a      	str	r2, [r7, #52]	; 0x34
 8005eae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eb4:	e841 2300 	strex	r3, r2, [r1]
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1e5      	bne.n	8005e8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3314      	adds	r3, #20
 8005ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3314      	adds	r3, #20
 8005ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ee0:	623a      	str	r2, [r7, #32]
 8005ee2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	69f9      	ldr	r1, [r7, #28]
 8005ee6:	6a3a      	ldr	r2, [r7, #32]
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e5      	bne.n	8005ec0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e00f      	b.n	8005f30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	bf0c      	ite	eq
 8005f20:	2301      	moveq	r3, #1
 8005f22:	2300      	movne	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	461a      	mov	r2, r3
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d09f      	beq.n	8005e6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3740      	adds	r7, #64	; 0x40
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b095      	sub	sp, #84	; 0x54
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	330c      	adds	r3, #12
 8005f46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f60:	643a      	str	r2, [r7, #64]	; 0x40
 8005f62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e5      	bne.n	8005f40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3314      	adds	r3, #20
 8005f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f023 0301 	bic.w	r3, r3, #1
 8005f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3314      	adds	r3, #20
 8005f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e5      	bne.n	8005f74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d119      	bne.n	8005fe4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f023 0310 	bic.w	r3, r3, #16
 8005fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	330c      	adds	r3, #12
 8005fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fd0:	61ba      	str	r2, [r7, #24]
 8005fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6979      	ldr	r1, [r7, #20]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ff2:	bf00      	nop
 8005ff4:	3754      	adds	r7, #84	; 0x54
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7ff ff09 	bl	8005e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800601e:	bf00      	nop
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006026:	b480      	push	{r7}
 8006028:	b085      	sub	sp, #20
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b21      	cmp	r3, #33	; 0x21
 8006038:	d13e      	bne.n	80060b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006042:	d114      	bne.n	800606e <UART_Transmit_IT+0x48>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d110      	bne.n	800606e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006060:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	1c9a      	adds	r2, r3, #2
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	621a      	str	r2, [r3, #32]
 800606c:	e008      	b.n	8006080 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	1c59      	adds	r1, r3, #1
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6211      	str	r1, [r2, #32]
 8006078:	781a      	ldrb	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29b      	uxth	r3, r3
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	4619      	mov	r1, r3
 800608e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10f      	bne.n	80060b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e000      	b.n	80060ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060b8:	2302      	movs	r3, #2
  }
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff fe8e 	bl	8005e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b08c      	sub	sp, #48	; 0x30
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b22      	cmp	r3, #34	; 0x22
 8006108:	f040 80ab 	bne.w	8006262 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006114:	d117      	bne.n	8006146 <UART_Receive_IT+0x50>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d113      	bne.n	8006146 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006134:	b29a      	uxth	r2, r3
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	1c9a      	adds	r2, r3, #2
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	629a      	str	r2, [r3, #40]	; 0x28
 8006144:	e026      	b.n	8006194 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800614c:	2300      	movs	r3, #0
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006158:	d007      	beq.n	800616a <UART_Receive_IT+0x74>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <UART_Receive_IT+0x82>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d106      	bne.n	8006178 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	e008      	b.n	800618a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006184:	b2da      	uxtb	r2, r3
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29b      	uxth	r3, r3
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	4619      	mov	r1, r3
 80061a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d15a      	bne.n	800625e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0220 	bic.w	r2, r2, #32
 80061b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695a      	ldr	r2, [r3, #20]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0201 	bic.w	r2, r2, #1
 80061d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d135      	bne.n	8006254 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	613b      	str	r3, [r7, #16]
   return(result);
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f023 0310 	bic.w	r3, r3, #16
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	330c      	adds	r3, #12
 800620c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620e:	623a      	str	r2, [r7, #32]
 8006210:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	69f9      	ldr	r1, [r7, #28]
 8006214:	6a3a      	ldr	r2, [r7, #32]
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	61bb      	str	r3, [r7, #24]
   return(result);
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e5      	bne.n	80061ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	2b10      	cmp	r3, #16
 800622e:	d10a      	bne.n	8006246 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fdf9 	bl	8005e44 <HAL_UARTEx_RxEventCallback>
 8006252:	e002      	b.n	800625a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff fde1 	bl	8005e1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	e002      	b.n	8006264 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	e000      	b.n	8006264 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006262:	2302      	movs	r3, #2
  }
}
 8006264:	4618      	mov	r0, r3
 8006266:	3730      	adds	r7, #48	; 0x30
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800626c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006270:	b0c0      	sub	sp, #256	; 0x100
 8006272:	af00      	add	r7, sp, #0
 8006274:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	68d9      	ldr	r1, [r3, #12]
 800628a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	ea40 0301 	orr.w	r3, r0, r1
 8006294:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062c4:	f021 010c 	bic.w	r1, r1, #12
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062d2:	430b      	orrs	r3, r1
 80062d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e6:	6999      	ldr	r1, [r3, #24]
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	ea40 0301 	orr.w	r3, r0, r1
 80062f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b8f      	ldr	r3, [pc, #572]	; (8006538 <UART_SetConfig+0x2cc>)
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d005      	beq.n	800630c <UART_SetConfig+0xa0>
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	4b8d      	ldr	r3, [pc, #564]	; (800653c <UART_SetConfig+0x2d0>)
 8006308:	429a      	cmp	r2, r3
 800630a:	d104      	bne.n	8006316 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800630c:	f7fe fd66 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 8006310:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006314:	e003      	b.n	800631e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006316:	f7fe fd4d 	bl	8004db4 <HAL_RCC_GetPCLK1Freq>
 800631a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800631e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006328:	f040 810c 	bne.w	8006544 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800632c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006330:	2200      	movs	r2, #0
 8006332:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006336:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800633a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800633e:	4622      	mov	r2, r4
 8006340:	462b      	mov	r3, r5
 8006342:	1891      	adds	r1, r2, r2
 8006344:	65b9      	str	r1, [r7, #88]	; 0x58
 8006346:	415b      	adcs	r3, r3
 8006348:	65fb      	str	r3, [r7, #92]	; 0x5c
 800634a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800634e:	4621      	mov	r1, r4
 8006350:	eb12 0801 	adds.w	r8, r2, r1
 8006354:	4629      	mov	r1, r5
 8006356:	eb43 0901 	adc.w	r9, r3, r1
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800636a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800636e:	4690      	mov	r8, r2
 8006370:	4699      	mov	r9, r3
 8006372:	4623      	mov	r3, r4
 8006374:	eb18 0303 	adds.w	r3, r8, r3
 8006378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800637c:	462b      	mov	r3, r5
 800637e:	eb49 0303 	adc.w	r3, r9, r3
 8006382:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006392:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006396:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800639a:	460b      	mov	r3, r1
 800639c:	18db      	adds	r3, r3, r3
 800639e:	653b      	str	r3, [r7, #80]	; 0x50
 80063a0:	4613      	mov	r3, r2
 80063a2:	eb42 0303 	adc.w	r3, r2, r3
 80063a6:	657b      	str	r3, [r7, #84]	; 0x54
 80063a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063b0:	f7fa fc52 	bl	8000c58 <__aeabi_uldivmod>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4b61      	ldr	r3, [pc, #388]	; (8006540 <UART_SetConfig+0x2d4>)
 80063ba:	fba3 2302 	umull	r2, r3, r3, r2
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	011c      	lsls	r4, r3, #4
 80063c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063d4:	4642      	mov	r2, r8
 80063d6:	464b      	mov	r3, r9
 80063d8:	1891      	adds	r1, r2, r2
 80063da:	64b9      	str	r1, [r7, #72]	; 0x48
 80063dc:	415b      	adcs	r3, r3
 80063de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063e4:	4641      	mov	r1, r8
 80063e6:	eb12 0a01 	adds.w	sl, r2, r1
 80063ea:	4649      	mov	r1, r9
 80063ec:	eb43 0b01 	adc.w	fp, r3, r1
 80063f0:	f04f 0200 	mov.w	r2, #0
 80063f4:	f04f 0300 	mov.w	r3, #0
 80063f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006400:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006404:	4692      	mov	sl, r2
 8006406:	469b      	mov	fp, r3
 8006408:	4643      	mov	r3, r8
 800640a:	eb1a 0303 	adds.w	r3, sl, r3
 800640e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006412:	464b      	mov	r3, r9
 8006414:	eb4b 0303 	adc.w	r3, fp, r3
 8006418:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006428:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800642c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006430:	460b      	mov	r3, r1
 8006432:	18db      	adds	r3, r3, r3
 8006434:	643b      	str	r3, [r7, #64]	; 0x40
 8006436:	4613      	mov	r3, r2
 8006438:	eb42 0303 	adc.w	r3, r2, r3
 800643c:	647b      	str	r3, [r7, #68]	; 0x44
 800643e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006442:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006446:	f7fa fc07 	bl	8000c58 <__aeabi_uldivmod>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4611      	mov	r1, r2
 8006450:	4b3b      	ldr	r3, [pc, #236]	; (8006540 <UART_SetConfig+0x2d4>)
 8006452:	fba3 2301 	umull	r2, r3, r3, r1
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	2264      	movs	r2, #100	; 0x64
 800645a:	fb02 f303 	mul.w	r3, r2, r3
 800645e:	1acb      	subs	r3, r1, r3
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006466:	4b36      	ldr	r3, [pc, #216]	; (8006540 <UART_SetConfig+0x2d4>)
 8006468:	fba3 2302 	umull	r2, r3, r3, r2
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006474:	441c      	add	r4, r3
 8006476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800647a:	2200      	movs	r2, #0
 800647c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006480:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006484:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006488:	4642      	mov	r2, r8
 800648a:	464b      	mov	r3, r9
 800648c:	1891      	adds	r1, r2, r2
 800648e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006490:	415b      	adcs	r3, r3
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006498:	4641      	mov	r1, r8
 800649a:	1851      	adds	r1, r2, r1
 800649c:	6339      	str	r1, [r7, #48]	; 0x30
 800649e:	4649      	mov	r1, r9
 80064a0:	414b      	adcs	r3, r1
 80064a2:	637b      	str	r3, [r7, #52]	; 0x34
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064b0:	4659      	mov	r1, fp
 80064b2:	00cb      	lsls	r3, r1, #3
 80064b4:	4651      	mov	r1, sl
 80064b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ba:	4651      	mov	r1, sl
 80064bc:	00ca      	lsls	r2, r1, #3
 80064be:	4610      	mov	r0, r2
 80064c0:	4619      	mov	r1, r3
 80064c2:	4603      	mov	r3, r0
 80064c4:	4642      	mov	r2, r8
 80064c6:	189b      	adds	r3, r3, r2
 80064c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064cc:	464b      	mov	r3, r9
 80064ce:	460a      	mov	r2, r1
 80064d0:	eb42 0303 	adc.w	r3, r2, r3
 80064d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064ec:	460b      	mov	r3, r1
 80064ee:	18db      	adds	r3, r3, r3
 80064f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f2:	4613      	mov	r3, r2
 80064f4:	eb42 0303 	adc.w	r3, r2, r3
 80064f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006502:	f7fa fba9 	bl	8000c58 <__aeabi_uldivmod>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4b0d      	ldr	r3, [pc, #52]	; (8006540 <UART_SetConfig+0x2d4>)
 800650c:	fba3 1302 	umull	r1, r3, r3, r2
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	2164      	movs	r1, #100	; 0x64
 8006514:	fb01 f303 	mul.w	r3, r1, r3
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	3332      	adds	r3, #50	; 0x32
 800651e:	4a08      	ldr	r2, [pc, #32]	; (8006540 <UART_SetConfig+0x2d4>)
 8006520:	fba2 2303 	umull	r2, r3, r2, r3
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	f003 0207 	and.w	r2, r3, #7
 800652a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4422      	add	r2, r4
 8006532:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006534:	e105      	b.n	8006742 <UART_SetConfig+0x4d6>
 8006536:	bf00      	nop
 8006538:	40011000 	.word	0x40011000
 800653c:	40011400 	.word	0x40011400
 8006540:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006548:	2200      	movs	r2, #0
 800654a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800654e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006552:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006556:	4642      	mov	r2, r8
 8006558:	464b      	mov	r3, r9
 800655a:	1891      	adds	r1, r2, r2
 800655c:	6239      	str	r1, [r7, #32]
 800655e:	415b      	adcs	r3, r3
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
 8006562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006566:	4641      	mov	r1, r8
 8006568:	1854      	adds	r4, r2, r1
 800656a:	4649      	mov	r1, r9
 800656c:	eb43 0501 	adc.w	r5, r3, r1
 8006570:	f04f 0200 	mov.w	r2, #0
 8006574:	f04f 0300 	mov.w	r3, #0
 8006578:	00eb      	lsls	r3, r5, #3
 800657a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800657e:	00e2      	lsls	r2, r4, #3
 8006580:	4614      	mov	r4, r2
 8006582:	461d      	mov	r5, r3
 8006584:	4643      	mov	r3, r8
 8006586:	18e3      	adds	r3, r4, r3
 8006588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800658c:	464b      	mov	r3, r9
 800658e:	eb45 0303 	adc.w	r3, r5, r3
 8006592:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	f04f 0300 	mov.w	r3, #0
 80065ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065b2:	4629      	mov	r1, r5
 80065b4:	008b      	lsls	r3, r1, #2
 80065b6:	4621      	mov	r1, r4
 80065b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065bc:	4621      	mov	r1, r4
 80065be:	008a      	lsls	r2, r1, #2
 80065c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065c4:	f7fa fb48 	bl	8000c58 <__aeabi_uldivmod>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4b60      	ldr	r3, [pc, #384]	; (8006750 <UART_SetConfig+0x4e4>)
 80065ce:	fba3 2302 	umull	r2, r3, r3, r2
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	011c      	lsls	r4, r3, #4
 80065d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065e8:	4642      	mov	r2, r8
 80065ea:	464b      	mov	r3, r9
 80065ec:	1891      	adds	r1, r2, r2
 80065ee:	61b9      	str	r1, [r7, #24]
 80065f0:	415b      	adcs	r3, r3
 80065f2:	61fb      	str	r3, [r7, #28]
 80065f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065f8:	4641      	mov	r1, r8
 80065fa:	1851      	adds	r1, r2, r1
 80065fc:	6139      	str	r1, [r7, #16]
 80065fe:	4649      	mov	r1, r9
 8006600:	414b      	adcs	r3, r1
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006610:	4659      	mov	r1, fp
 8006612:	00cb      	lsls	r3, r1, #3
 8006614:	4651      	mov	r1, sl
 8006616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800661a:	4651      	mov	r1, sl
 800661c:	00ca      	lsls	r2, r1, #3
 800661e:	4610      	mov	r0, r2
 8006620:	4619      	mov	r1, r3
 8006622:	4603      	mov	r3, r0
 8006624:	4642      	mov	r2, r8
 8006626:	189b      	adds	r3, r3, r2
 8006628:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800662c:	464b      	mov	r3, r9
 800662e:	460a      	mov	r2, r1
 8006630:	eb42 0303 	adc.w	r3, r2, r3
 8006634:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	67bb      	str	r3, [r7, #120]	; 0x78
 8006642:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	f04f 0300 	mov.w	r3, #0
 800664c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006650:	4649      	mov	r1, r9
 8006652:	008b      	lsls	r3, r1, #2
 8006654:	4641      	mov	r1, r8
 8006656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800665a:	4641      	mov	r1, r8
 800665c:	008a      	lsls	r2, r1, #2
 800665e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006662:	f7fa faf9 	bl	8000c58 <__aeabi_uldivmod>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4b39      	ldr	r3, [pc, #228]	; (8006750 <UART_SetConfig+0x4e4>)
 800666c:	fba3 1302 	umull	r1, r3, r3, r2
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	2164      	movs	r1, #100	; 0x64
 8006674:	fb01 f303 	mul.w	r3, r1, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	3332      	adds	r3, #50	; 0x32
 800667e:	4a34      	ldr	r2, [pc, #208]	; (8006750 <UART_SetConfig+0x4e4>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800668a:	441c      	add	r4, r3
 800668c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006690:	2200      	movs	r2, #0
 8006692:	673b      	str	r3, [r7, #112]	; 0x70
 8006694:	677a      	str	r2, [r7, #116]	; 0x74
 8006696:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800669a:	4642      	mov	r2, r8
 800669c:	464b      	mov	r3, r9
 800669e:	1891      	adds	r1, r2, r2
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	415b      	adcs	r3, r3
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066aa:	4641      	mov	r1, r8
 80066ac:	1851      	adds	r1, r2, r1
 80066ae:	6039      	str	r1, [r7, #0]
 80066b0:	4649      	mov	r1, r9
 80066b2:	414b      	adcs	r3, r1
 80066b4:	607b      	str	r3, [r7, #4]
 80066b6:	f04f 0200 	mov.w	r2, #0
 80066ba:	f04f 0300 	mov.w	r3, #0
 80066be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066c2:	4659      	mov	r1, fp
 80066c4:	00cb      	lsls	r3, r1, #3
 80066c6:	4651      	mov	r1, sl
 80066c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066cc:	4651      	mov	r1, sl
 80066ce:	00ca      	lsls	r2, r1, #3
 80066d0:	4610      	mov	r0, r2
 80066d2:	4619      	mov	r1, r3
 80066d4:	4603      	mov	r3, r0
 80066d6:	4642      	mov	r2, r8
 80066d8:	189b      	adds	r3, r3, r2
 80066da:	66bb      	str	r3, [r7, #104]	; 0x68
 80066dc:	464b      	mov	r3, r9
 80066de:	460a      	mov	r2, r1
 80066e0:	eb42 0303 	adc.w	r3, r2, r3
 80066e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	663b      	str	r3, [r7, #96]	; 0x60
 80066f0:	667a      	str	r2, [r7, #100]	; 0x64
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066fe:	4649      	mov	r1, r9
 8006700:	008b      	lsls	r3, r1, #2
 8006702:	4641      	mov	r1, r8
 8006704:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006708:	4641      	mov	r1, r8
 800670a:	008a      	lsls	r2, r1, #2
 800670c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006710:	f7fa faa2 	bl	8000c58 <__aeabi_uldivmod>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4b0d      	ldr	r3, [pc, #52]	; (8006750 <UART_SetConfig+0x4e4>)
 800671a:	fba3 1302 	umull	r1, r3, r3, r2
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	2164      	movs	r1, #100	; 0x64
 8006722:	fb01 f303 	mul.w	r3, r1, r3
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	3332      	adds	r3, #50	; 0x32
 800672c:	4a08      	ldr	r2, [pc, #32]	; (8006750 <UART_SetConfig+0x4e4>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	f003 020f 	and.w	r2, r3, #15
 8006738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4422      	add	r2, r4
 8006740:	609a      	str	r2, [r3, #8]
}
 8006742:	bf00      	nop
 8006744:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006748:	46bd      	mov	sp, r7
 800674a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800674e:	bf00      	nop
 8006750:	51eb851f 	.word	0x51eb851f

08006754 <__errno>:
 8006754:	4b01      	ldr	r3, [pc, #4]	; (800675c <__errno+0x8>)
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	2000000c 	.word	0x2000000c

08006760 <__libc_init_array>:
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	4d0d      	ldr	r5, [pc, #52]	; (8006798 <__libc_init_array+0x38>)
 8006764:	4c0d      	ldr	r4, [pc, #52]	; (800679c <__libc_init_array+0x3c>)
 8006766:	1b64      	subs	r4, r4, r5
 8006768:	10a4      	asrs	r4, r4, #2
 800676a:	2600      	movs	r6, #0
 800676c:	42a6      	cmp	r6, r4
 800676e:	d109      	bne.n	8006784 <__libc_init_array+0x24>
 8006770:	4d0b      	ldr	r5, [pc, #44]	; (80067a0 <__libc_init_array+0x40>)
 8006772:	4c0c      	ldr	r4, [pc, #48]	; (80067a4 <__libc_init_array+0x44>)
 8006774:	f002 ff90 	bl	8009698 <_init>
 8006778:	1b64      	subs	r4, r4, r5
 800677a:	10a4      	asrs	r4, r4, #2
 800677c:	2600      	movs	r6, #0
 800677e:	42a6      	cmp	r6, r4
 8006780:	d105      	bne.n	800678e <__libc_init_array+0x2e>
 8006782:	bd70      	pop	{r4, r5, r6, pc}
 8006784:	f855 3b04 	ldr.w	r3, [r5], #4
 8006788:	4798      	blx	r3
 800678a:	3601      	adds	r6, #1
 800678c:	e7ee      	b.n	800676c <__libc_init_array+0xc>
 800678e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006792:	4798      	blx	r3
 8006794:	3601      	adds	r6, #1
 8006796:	e7f2      	b.n	800677e <__libc_init_array+0x1e>
 8006798:	08009b4c 	.word	0x08009b4c
 800679c:	08009b4c 	.word	0x08009b4c
 80067a0:	08009b4c 	.word	0x08009b4c
 80067a4:	08009b50 	.word	0x08009b50

080067a8 <memset>:
 80067a8:	4402      	add	r2, r0
 80067aa:	4603      	mov	r3, r0
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d100      	bne.n	80067b2 <memset+0xa>
 80067b0:	4770      	bx	lr
 80067b2:	f803 1b01 	strb.w	r1, [r3], #1
 80067b6:	e7f9      	b.n	80067ac <memset+0x4>

080067b8 <__cvt>:
 80067b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	ec55 4b10 	vmov	r4, r5, d0
 80067c0:	2d00      	cmp	r5, #0
 80067c2:	460e      	mov	r6, r1
 80067c4:	4619      	mov	r1, r3
 80067c6:	462b      	mov	r3, r5
 80067c8:	bfbb      	ittet	lt
 80067ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80067ce:	461d      	movlt	r5, r3
 80067d0:	2300      	movge	r3, #0
 80067d2:	232d      	movlt	r3, #45	; 0x2d
 80067d4:	700b      	strb	r3, [r1, #0]
 80067d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80067dc:	4691      	mov	r9, r2
 80067de:	f023 0820 	bic.w	r8, r3, #32
 80067e2:	bfbc      	itt	lt
 80067e4:	4622      	movlt	r2, r4
 80067e6:	4614      	movlt	r4, r2
 80067e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067ec:	d005      	beq.n	80067fa <__cvt+0x42>
 80067ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067f2:	d100      	bne.n	80067f6 <__cvt+0x3e>
 80067f4:	3601      	adds	r6, #1
 80067f6:	2102      	movs	r1, #2
 80067f8:	e000      	b.n	80067fc <__cvt+0x44>
 80067fa:	2103      	movs	r1, #3
 80067fc:	ab03      	add	r3, sp, #12
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	ab02      	add	r3, sp, #8
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	ec45 4b10 	vmov	d0, r4, r5
 8006808:	4653      	mov	r3, sl
 800680a:	4632      	mov	r2, r6
 800680c:	f000 fe38 	bl	8007480 <_dtoa_r>
 8006810:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006814:	4607      	mov	r7, r0
 8006816:	d102      	bne.n	800681e <__cvt+0x66>
 8006818:	f019 0f01 	tst.w	r9, #1
 800681c:	d022      	beq.n	8006864 <__cvt+0xac>
 800681e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006822:	eb07 0906 	add.w	r9, r7, r6
 8006826:	d110      	bne.n	800684a <__cvt+0x92>
 8006828:	783b      	ldrb	r3, [r7, #0]
 800682a:	2b30      	cmp	r3, #48	; 0x30
 800682c:	d10a      	bne.n	8006844 <__cvt+0x8c>
 800682e:	2200      	movs	r2, #0
 8006830:	2300      	movs	r3, #0
 8006832:	4620      	mov	r0, r4
 8006834:	4629      	mov	r1, r5
 8006836:	f7fa f94f 	bl	8000ad8 <__aeabi_dcmpeq>
 800683a:	b918      	cbnz	r0, 8006844 <__cvt+0x8c>
 800683c:	f1c6 0601 	rsb	r6, r6, #1
 8006840:	f8ca 6000 	str.w	r6, [sl]
 8006844:	f8da 3000 	ldr.w	r3, [sl]
 8006848:	4499      	add	r9, r3
 800684a:	2200      	movs	r2, #0
 800684c:	2300      	movs	r3, #0
 800684e:	4620      	mov	r0, r4
 8006850:	4629      	mov	r1, r5
 8006852:	f7fa f941 	bl	8000ad8 <__aeabi_dcmpeq>
 8006856:	b108      	cbz	r0, 800685c <__cvt+0xa4>
 8006858:	f8cd 900c 	str.w	r9, [sp, #12]
 800685c:	2230      	movs	r2, #48	; 0x30
 800685e:	9b03      	ldr	r3, [sp, #12]
 8006860:	454b      	cmp	r3, r9
 8006862:	d307      	bcc.n	8006874 <__cvt+0xbc>
 8006864:	9b03      	ldr	r3, [sp, #12]
 8006866:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006868:	1bdb      	subs	r3, r3, r7
 800686a:	4638      	mov	r0, r7
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	b004      	add	sp, #16
 8006870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006874:	1c59      	adds	r1, r3, #1
 8006876:	9103      	str	r1, [sp, #12]
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e7f0      	b.n	800685e <__cvt+0xa6>

0800687c <__exponent>:
 800687c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800687e:	4603      	mov	r3, r0
 8006880:	2900      	cmp	r1, #0
 8006882:	bfb8      	it	lt
 8006884:	4249      	neglt	r1, r1
 8006886:	f803 2b02 	strb.w	r2, [r3], #2
 800688a:	bfb4      	ite	lt
 800688c:	222d      	movlt	r2, #45	; 0x2d
 800688e:	222b      	movge	r2, #43	; 0x2b
 8006890:	2909      	cmp	r1, #9
 8006892:	7042      	strb	r2, [r0, #1]
 8006894:	dd2a      	ble.n	80068ec <__exponent+0x70>
 8006896:	f10d 0407 	add.w	r4, sp, #7
 800689a:	46a4      	mov	ip, r4
 800689c:	270a      	movs	r7, #10
 800689e:	46a6      	mov	lr, r4
 80068a0:	460a      	mov	r2, r1
 80068a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80068a6:	fb07 1516 	mls	r5, r7, r6, r1
 80068aa:	3530      	adds	r5, #48	; 0x30
 80068ac:	2a63      	cmp	r2, #99	; 0x63
 80068ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80068b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80068b6:	4631      	mov	r1, r6
 80068b8:	dcf1      	bgt.n	800689e <__exponent+0x22>
 80068ba:	3130      	adds	r1, #48	; 0x30
 80068bc:	f1ae 0502 	sub.w	r5, lr, #2
 80068c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80068c4:	1c44      	adds	r4, r0, #1
 80068c6:	4629      	mov	r1, r5
 80068c8:	4561      	cmp	r1, ip
 80068ca:	d30a      	bcc.n	80068e2 <__exponent+0x66>
 80068cc:	f10d 0209 	add.w	r2, sp, #9
 80068d0:	eba2 020e 	sub.w	r2, r2, lr
 80068d4:	4565      	cmp	r5, ip
 80068d6:	bf88      	it	hi
 80068d8:	2200      	movhi	r2, #0
 80068da:	4413      	add	r3, r2
 80068dc:	1a18      	subs	r0, r3, r0
 80068de:	b003      	add	sp, #12
 80068e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068ea:	e7ed      	b.n	80068c8 <__exponent+0x4c>
 80068ec:	2330      	movs	r3, #48	; 0x30
 80068ee:	3130      	adds	r1, #48	; 0x30
 80068f0:	7083      	strb	r3, [r0, #2]
 80068f2:	70c1      	strb	r1, [r0, #3]
 80068f4:	1d03      	adds	r3, r0, #4
 80068f6:	e7f1      	b.n	80068dc <__exponent+0x60>

080068f8 <_printf_float>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	ed2d 8b02 	vpush	{d8}
 8006900:	b08d      	sub	sp, #52	; 0x34
 8006902:	460c      	mov	r4, r1
 8006904:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006908:	4616      	mov	r6, r2
 800690a:	461f      	mov	r7, r3
 800690c:	4605      	mov	r5, r0
 800690e:	f001 fd5d 	bl	80083cc <_localeconv_r>
 8006912:	f8d0 a000 	ldr.w	sl, [r0]
 8006916:	4650      	mov	r0, sl
 8006918:	f7f9 fc62 	bl	80001e0 <strlen>
 800691c:	2300      	movs	r3, #0
 800691e:	930a      	str	r3, [sp, #40]	; 0x28
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	9305      	str	r3, [sp, #20]
 8006924:	f8d8 3000 	ldr.w	r3, [r8]
 8006928:	f894 b018 	ldrb.w	fp, [r4, #24]
 800692c:	3307      	adds	r3, #7
 800692e:	f023 0307 	bic.w	r3, r3, #7
 8006932:	f103 0208 	add.w	r2, r3, #8
 8006936:	f8c8 2000 	str.w	r2, [r8]
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006942:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006946:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800694a:	9307      	str	r3, [sp, #28]
 800694c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006950:	ee08 0a10 	vmov	s16, r0
 8006954:	4b9f      	ldr	r3, [pc, #636]	; (8006bd4 <_printf_float+0x2dc>)
 8006956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800695a:	f04f 32ff 	mov.w	r2, #4294967295
 800695e:	f7fa f8ed 	bl	8000b3c <__aeabi_dcmpun>
 8006962:	bb88      	cbnz	r0, 80069c8 <_printf_float+0xd0>
 8006964:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006968:	4b9a      	ldr	r3, [pc, #616]	; (8006bd4 <_printf_float+0x2dc>)
 800696a:	f04f 32ff 	mov.w	r2, #4294967295
 800696e:	f7fa f8c7 	bl	8000b00 <__aeabi_dcmple>
 8006972:	bb48      	cbnz	r0, 80069c8 <_printf_float+0xd0>
 8006974:	2200      	movs	r2, #0
 8006976:	2300      	movs	r3, #0
 8006978:	4640      	mov	r0, r8
 800697a:	4649      	mov	r1, r9
 800697c:	f7fa f8b6 	bl	8000aec <__aeabi_dcmplt>
 8006980:	b110      	cbz	r0, 8006988 <_printf_float+0x90>
 8006982:	232d      	movs	r3, #45	; 0x2d
 8006984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006988:	4b93      	ldr	r3, [pc, #588]	; (8006bd8 <_printf_float+0x2e0>)
 800698a:	4894      	ldr	r0, [pc, #592]	; (8006bdc <_printf_float+0x2e4>)
 800698c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006990:	bf94      	ite	ls
 8006992:	4698      	movls	r8, r3
 8006994:	4680      	movhi	r8, r0
 8006996:	2303      	movs	r3, #3
 8006998:	6123      	str	r3, [r4, #16]
 800699a:	9b05      	ldr	r3, [sp, #20]
 800699c:	f023 0204 	bic.w	r2, r3, #4
 80069a0:	6022      	str	r2, [r4, #0]
 80069a2:	f04f 0900 	mov.w	r9, #0
 80069a6:	9700      	str	r7, [sp, #0]
 80069a8:	4633      	mov	r3, r6
 80069aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80069ac:	4621      	mov	r1, r4
 80069ae:	4628      	mov	r0, r5
 80069b0:	f000 f9d8 	bl	8006d64 <_printf_common>
 80069b4:	3001      	adds	r0, #1
 80069b6:	f040 8090 	bne.w	8006ada <_printf_float+0x1e2>
 80069ba:	f04f 30ff 	mov.w	r0, #4294967295
 80069be:	b00d      	add	sp, #52	; 0x34
 80069c0:	ecbd 8b02 	vpop	{d8}
 80069c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c8:	4642      	mov	r2, r8
 80069ca:	464b      	mov	r3, r9
 80069cc:	4640      	mov	r0, r8
 80069ce:	4649      	mov	r1, r9
 80069d0:	f7fa f8b4 	bl	8000b3c <__aeabi_dcmpun>
 80069d4:	b140      	cbz	r0, 80069e8 <_printf_float+0xf0>
 80069d6:	464b      	mov	r3, r9
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bfbc      	itt	lt
 80069dc:	232d      	movlt	r3, #45	; 0x2d
 80069de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069e2:	487f      	ldr	r0, [pc, #508]	; (8006be0 <_printf_float+0x2e8>)
 80069e4:	4b7f      	ldr	r3, [pc, #508]	; (8006be4 <_printf_float+0x2ec>)
 80069e6:	e7d1      	b.n	800698c <_printf_float+0x94>
 80069e8:	6863      	ldr	r3, [r4, #4]
 80069ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80069ee:	9206      	str	r2, [sp, #24]
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	d13f      	bne.n	8006a74 <_printf_float+0x17c>
 80069f4:	2306      	movs	r3, #6
 80069f6:	6063      	str	r3, [r4, #4]
 80069f8:	9b05      	ldr	r3, [sp, #20]
 80069fa:	6861      	ldr	r1, [r4, #4]
 80069fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a00:	2300      	movs	r3, #0
 8006a02:	9303      	str	r3, [sp, #12]
 8006a04:	ab0a      	add	r3, sp, #40	; 0x28
 8006a06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a0a:	ab09      	add	r3, sp, #36	; 0x24
 8006a0c:	ec49 8b10 	vmov	d0, r8, r9
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	6022      	str	r2, [r4, #0]
 8006a14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f7ff fecd 	bl	80067b8 <__cvt>
 8006a1e:	9b06      	ldr	r3, [sp, #24]
 8006a20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a22:	2b47      	cmp	r3, #71	; 0x47
 8006a24:	4680      	mov	r8, r0
 8006a26:	d108      	bne.n	8006a3a <_printf_float+0x142>
 8006a28:	1cc8      	adds	r0, r1, #3
 8006a2a:	db02      	blt.n	8006a32 <_printf_float+0x13a>
 8006a2c:	6863      	ldr	r3, [r4, #4]
 8006a2e:	4299      	cmp	r1, r3
 8006a30:	dd41      	ble.n	8006ab6 <_printf_float+0x1be>
 8006a32:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a36:	fa5f fb8b 	uxtb.w	fp, fp
 8006a3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a3e:	d820      	bhi.n	8006a82 <_printf_float+0x18a>
 8006a40:	3901      	subs	r1, #1
 8006a42:	465a      	mov	r2, fp
 8006a44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a48:	9109      	str	r1, [sp, #36]	; 0x24
 8006a4a:	f7ff ff17 	bl	800687c <__exponent>
 8006a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a50:	1813      	adds	r3, r2, r0
 8006a52:	2a01      	cmp	r2, #1
 8006a54:	4681      	mov	r9, r0
 8006a56:	6123      	str	r3, [r4, #16]
 8006a58:	dc02      	bgt.n	8006a60 <_printf_float+0x168>
 8006a5a:	6822      	ldr	r2, [r4, #0]
 8006a5c:	07d2      	lsls	r2, r2, #31
 8006a5e:	d501      	bpl.n	8006a64 <_printf_float+0x16c>
 8006a60:	3301      	adds	r3, #1
 8006a62:	6123      	str	r3, [r4, #16]
 8006a64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d09c      	beq.n	80069a6 <_printf_float+0xae>
 8006a6c:	232d      	movs	r3, #45	; 0x2d
 8006a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a72:	e798      	b.n	80069a6 <_printf_float+0xae>
 8006a74:	9a06      	ldr	r2, [sp, #24]
 8006a76:	2a47      	cmp	r2, #71	; 0x47
 8006a78:	d1be      	bne.n	80069f8 <_printf_float+0x100>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1bc      	bne.n	80069f8 <_printf_float+0x100>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e7b9      	b.n	80069f6 <_printf_float+0xfe>
 8006a82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a86:	d118      	bne.n	8006aba <_printf_float+0x1c2>
 8006a88:	2900      	cmp	r1, #0
 8006a8a:	6863      	ldr	r3, [r4, #4]
 8006a8c:	dd0b      	ble.n	8006aa6 <_printf_float+0x1ae>
 8006a8e:	6121      	str	r1, [r4, #16]
 8006a90:	b913      	cbnz	r3, 8006a98 <_printf_float+0x1a0>
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	07d0      	lsls	r0, r2, #31
 8006a96:	d502      	bpl.n	8006a9e <_printf_float+0x1a6>
 8006a98:	3301      	adds	r3, #1
 8006a9a:	440b      	add	r3, r1
 8006a9c:	6123      	str	r3, [r4, #16]
 8006a9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006aa0:	f04f 0900 	mov.w	r9, #0
 8006aa4:	e7de      	b.n	8006a64 <_printf_float+0x16c>
 8006aa6:	b913      	cbnz	r3, 8006aae <_printf_float+0x1b6>
 8006aa8:	6822      	ldr	r2, [r4, #0]
 8006aaa:	07d2      	lsls	r2, r2, #31
 8006aac:	d501      	bpl.n	8006ab2 <_printf_float+0x1ba>
 8006aae:	3302      	adds	r3, #2
 8006ab0:	e7f4      	b.n	8006a9c <_printf_float+0x1a4>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e7f2      	b.n	8006a9c <_printf_float+0x1a4>
 8006ab6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006abc:	4299      	cmp	r1, r3
 8006abe:	db05      	blt.n	8006acc <_printf_float+0x1d4>
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	6121      	str	r1, [r4, #16]
 8006ac4:	07d8      	lsls	r0, r3, #31
 8006ac6:	d5ea      	bpl.n	8006a9e <_printf_float+0x1a6>
 8006ac8:	1c4b      	adds	r3, r1, #1
 8006aca:	e7e7      	b.n	8006a9c <_printf_float+0x1a4>
 8006acc:	2900      	cmp	r1, #0
 8006ace:	bfd4      	ite	le
 8006ad0:	f1c1 0202 	rsble	r2, r1, #2
 8006ad4:	2201      	movgt	r2, #1
 8006ad6:	4413      	add	r3, r2
 8006ad8:	e7e0      	b.n	8006a9c <_printf_float+0x1a4>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	055a      	lsls	r2, r3, #21
 8006ade:	d407      	bmi.n	8006af0 <_printf_float+0x1f8>
 8006ae0:	6923      	ldr	r3, [r4, #16]
 8006ae2:	4642      	mov	r2, r8
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	47b8      	blx	r7
 8006aea:	3001      	adds	r0, #1
 8006aec:	d12c      	bne.n	8006b48 <_printf_float+0x250>
 8006aee:	e764      	b.n	80069ba <_printf_float+0xc2>
 8006af0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006af4:	f240 80e0 	bls.w	8006cb8 <_printf_float+0x3c0>
 8006af8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006afc:	2200      	movs	r2, #0
 8006afe:	2300      	movs	r3, #0
 8006b00:	f7f9 ffea 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d034      	beq.n	8006b72 <_printf_float+0x27a>
 8006b08:	4a37      	ldr	r2, [pc, #220]	; (8006be8 <_printf_float+0x2f0>)
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	4628      	mov	r0, r5
 8006b10:	47b8      	blx	r7
 8006b12:	3001      	adds	r0, #1
 8006b14:	f43f af51 	beq.w	80069ba <_printf_float+0xc2>
 8006b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	db02      	blt.n	8006b26 <_printf_float+0x22e>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	07d8      	lsls	r0, r3, #31
 8006b24:	d510      	bpl.n	8006b48 <_printf_float+0x250>
 8006b26:	ee18 3a10 	vmov	r3, s16
 8006b2a:	4652      	mov	r2, sl
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4628      	mov	r0, r5
 8006b30:	47b8      	blx	r7
 8006b32:	3001      	adds	r0, #1
 8006b34:	f43f af41 	beq.w	80069ba <_printf_float+0xc2>
 8006b38:	f04f 0800 	mov.w	r8, #0
 8006b3c:	f104 091a 	add.w	r9, r4, #26
 8006b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b42:	3b01      	subs	r3, #1
 8006b44:	4543      	cmp	r3, r8
 8006b46:	dc09      	bgt.n	8006b5c <_printf_float+0x264>
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	079b      	lsls	r3, r3, #30
 8006b4c:	f100 8105 	bmi.w	8006d5a <_printf_float+0x462>
 8006b50:	68e0      	ldr	r0, [r4, #12]
 8006b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b54:	4298      	cmp	r0, r3
 8006b56:	bfb8      	it	lt
 8006b58:	4618      	movlt	r0, r3
 8006b5a:	e730      	b.n	80069be <_printf_float+0xc6>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	464a      	mov	r2, r9
 8006b60:	4631      	mov	r1, r6
 8006b62:	4628      	mov	r0, r5
 8006b64:	47b8      	blx	r7
 8006b66:	3001      	adds	r0, #1
 8006b68:	f43f af27 	beq.w	80069ba <_printf_float+0xc2>
 8006b6c:	f108 0801 	add.w	r8, r8, #1
 8006b70:	e7e6      	b.n	8006b40 <_printf_float+0x248>
 8006b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dc39      	bgt.n	8006bec <_printf_float+0x2f4>
 8006b78:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <_printf_float+0x2f0>)
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4628      	mov	r0, r5
 8006b80:	47b8      	blx	r7
 8006b82:	3001      	adds	r0, #1
 8006b84:	f43f af19 	beq.w	80069ba <_printf_float+0xc2>
 8006b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	d102      	bne.n	8006b96 <_printf_float+0x29e>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	07d9      	lsls	r1, r3, #31
 8006b94:	d5d8      	bpl.n	8006b48 <_printf_float+0x250>
 8006b96:	ee18 3a10 	vmov	r3, s16
 8006b9a:	4652      	mov	r2, sl
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	47b8      	blx	r7
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	f43f af09 	beq.w	80069ba <_printf_float+0xc2>
 8006ba8:	f04f 0900 	mov.w	r9, #0
 8006bac:	f104 0a1a 	add.w	sl, r4, #26
 8006bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb2:	425b      	negs	r3, r3
 8006bb4:	454b      	cmp	r3, r9
 8006bb6:	dc01      	bgt.n	8006bbc <_printf_float+0x2c4>
 8006bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bba:	e792      	b.n	8006ae2 <_printf_float+0x1ea>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	4652      	mov	r2, sl
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	47b8      	blx	r7
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f43f aef7 	beq.w	80069ba <_printf_float+0xc2>
 8006bcc:	f109 0901 	add.w	r9, r9, #1
 8006bd0:	e7ee      	b.n	8006bb0 <_printf_float+0x2b8>
 8006bd2:	bf00      	nop
 8006bd4:	7fefffff 	.word	0x7fefffff
 8006bd8:	0800976c 	.word	0x0800976c
 8006bdc:	08009770 	.word	0x08009770
 8006be0:	08009778 	.word	0x08009778
 8006be4:	08009774 	.word	0x08009774
 8006be8:	0800977c 	.word	0x0800977c
 8006bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	bfa8      	it	ge
 8006bf4:	461a      	movge	r2, r3
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	4691      	mov	r9, r2
 8006bfa:	dc37      	bgt.n	8006c6c <_printf_float+0x374>
 8006bfc:	f04f 0b00 	mov.w	fp, #0
 8006c00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c04:	f104 021a 	add.w	r2, r4, #26
 8006c08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c0a:	9305      	str	r3, [sp, #20]
 8006c0c:	eba3 0309 	sub.w	r3, r3, r9
 8006c10:	455b      	cmp	r3, fp
 8006c12:	dc33      	bgt.n	8006c7c <_printf_float+0x384>
 8006c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	db3b      	blt.n	8006c94 <_printf_float+0x39c>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	07da      	lsls	r2, r3, #31
 8006c20:	d438      	bmi.n	8006c94 <_printf_float+0x39c>
 8006c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c24:	9a05      	ldr	r2, [sp, #20]
 8006c26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c28:	1a9a      	subs	r2, r3, r2
 8006c2a:	eba3 0901 	sub.w	r9, r3, r1
 8006c2e:	4591      	cmp	r9, r2
 8006c30:	bfa8      	it	ge
 8006c32:	4691      	movge	r9, r2
 8006c34:	f1b9 0f00 	cmp.w	r9, #0
 8006c38:	dc35      	bgt.n	8006ca6 <_printf_float+0x3ae>
 8006c3a:	f04f 0800 	mov.w	r8, #0
 8006c3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c42:	f104 0a1a 	add.w	sl, r4, #26
 8006c46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c4a:	1a9b      	subs	r3, r3, r2
 8006c4c:	eba3 0309 	sub.w	r3, r3, r9
 8006c50:	4543      	cmp	r3, r8
 8006c52:	f77f af79 	ble.w	8006b48 <_printf_float+0x250>
 8006c56:	2301      	movs	r3, #1
 8006c58:	4652      	mov	r2, sl
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b8      	blx	r7
 8006c60:	3001      	adds	r0, #1
 8006c62:	f43f aeaa 	beq.w	80069ba <_printf_float+0xc2>
 8006c66:	f108 0801 	add.w	r8, r8, #1
 8006c6a:	e7ec      	b.n	8006c46 <_printf_float+0x34e>
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4642      	mov	r2, r8
 8006c72:	4628      	mov	r0, r5
 8006c74:	47b8      	blx	r7
 8006c76:	3001      	adds	r0, #1
 8006c78:	d1c0      	bne.n	8006bfc <_printf_float+0x304>
 8006c7a:	e69e      	b.n	80069ba <_printf_float+0xc2>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	9205      	str	r2, [sp, #20]
 8006c84:	47b8      	blx	r7
 8006c86:	3001      	adds	r0, #1
 8006c88:	f43f ae97 	beq.w	80069ba <_printf_float+0xc2>
 8006c8c:	9a05      	ldr	r2, [sp, #20]
 8006c8e:	f10b 0b01 	add.w	fp, fp, #1
 8006c92:	e7b9      	b.n	8006c08 <_printf_float+0x310>
 8006c94:	ee18 3a10 	vmov	r3, s16
 8006c98:	4652      	mov	r2, sl
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	47b8      	blx	r7
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	d1be      	bne.n	8006c22 <_printf_float+0x32a>
 8006ca4:	e689      	b.n	80069ba <_printf_float+0xc2>
 8006ca6:	9a05      	ldr	r2, [sp, #20]
 8006ca8:	464b      	mov	r3, r9
 8006caa:	4442      	add	r2, r8
 8006cac:	4631      	mov	r1, r6
 8006cae:	4628      	mov	r0, r5
 8006cb0:	47b8      	blx	r7
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	d1c1      	bne.n	8006c3a <_printf_float+0x342>
 8006cb6:	e680      	b.n	80069ba <_printf_float+0xc2>
 8006cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cba:	2a01      	cmp	r2, #1
 8006cbc:	dc01      	bgt.n	8006cc2 <_printf_float+0x3ca>
 8006cbe:	07db      	lsls	r3, r3, #31
 8006cc0:	d538      	bpl.n	8006d34 <_printf_float+0x43c>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	f43f ae74 	beq.w	80069ba <_printf_float+0xc2>
 8006cd2:	ee18 3a10 	vmov	r3, s16
 8006cd6:	4652      	mov	r2, sl
 8006cd8:	4631      	mov	r1, r6
 8006cda:	4628      	mov	r0, r5
 8006cdc:	47b8      	blx	r7
 8006cde:	3001      	adds	r0, #1
 8006ce0:	f43f ae6b 	beq.w	80069ba <_printf_float+0xc2>
 8006ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2300      	movs	r3, #0
 8006cec:	f7f9 fef4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cf0:	b9d8      	cbnz	r0, 8006d2a <_printf_float+0x432>
 8006cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf4:	f108 0201 	add.w	r2, r8, #1
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	d10e      	bne.n	8006d22 <_printf_float+0x42a>
 8006d04:	e659      	b.n	80069ba <_printf_float+0xc2>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4652      	mov	r2, sl
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	f43f ae52 	beq.w	80069ba <_printf_float+0xc2>
 8006d16:	f108 0801 	add.w	r8, r8, #1
 8006d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	4543      	cmp	r3, r8
 8006d20:	dcf1      	bgt.n	8006d06 <_printf_float+0x40e>
 8006d22:	464b      	mov	r3, r9
 8006d24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d28:	e6dc      	b.n	8006ae4 <_printf_float+0x1ec>
 8006d2a:	f04f 0800 	mov.w	r8, #0
 8006d2e:	f104 0a1a 	add.w	sl, r4, #26
 8006d32:	e7f2      	b.n	8006d1a <_printf_float+0x422>
 8006d34:	2301      	movs	r3, #1
 8006d36:	4642      	mov	r2, r8
 8006d38:	e7df      	b.n	8006cfa <_printf_float+0x402>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	464a      	mov	r2, r9
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	f43f ae38 	beq.w	80069ba <_printf_float+0xc2>
 8006d4a:	f108 0801 	add.w	r8, r8, #1
 8006d4e:	68e3      	ldr	r3, [r4, #12]
 8006d50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d52:	1a5b      	subs	r3, r3, r1
 8006d54:	4543      	cmp	r3, r8
 8006d56:	dcf0      	bgt.n	8006d3a <_printf_float+0x442>
 8006d58:	e6fa      	b.n	8006b50 <_printf_float+0x258>
 8006d5a:	f04f 0800 	mov.w	r8, #0
 8006d5e:	f104 0919 	add.w	r9, r4, #25
 8006d62:	e7f4      	b.n	8006d4e <_printf_float+0x456>

08006d64 <_printf_common>:
 8006d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	4616      	mov	r6, r2
 8006d6a:	4699      	mov	r9, r3
 8006d6c:	688a      	ldr	r2, [r1, #8]
 8006d6e:	690b      	ldr	r3, [r1, #16]
 8006d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d74:	4293      	cmp	r3, r2
 8006d76:	bfb8      	it	lt
 8006d78:	4613      	movlt	r3, r2
 8006d7a:	6033      	str	r3, [r6, #0]
 8006d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d80:	4607      	mov	r7, r0
 8006d82:	460c      	mov	r4, r1
 8006d84:	b10a      	cbz	r2, 8006d8a <_printf_common+0x26>
 8006d86:	3301      	adds	r3, #1
 8006d88:	6033      	str	r3, [r6, #0]
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	0699      	lsls	r1, r3, #26
 8006d8e:	bf42      	ittt	mi
 8006d90:	6833      	ldrmi	r3, [r6, #0]
 8006d92:	3302      	addmi	r3, #2
 8006d94:	6033      	strmi	r3, [r6, #0]
 8006d96:	6825      	ldr	r5, [r4, #0]
 8006d98:	f015 0506 	ands.w	r5, r5, #6
 8006d9c:	d106      	bne.n	8006dac <_printf_common+0x48>
 8006d9e:	f104 0a19 	add.w	sl, r4, #25
 8006da2:	68e3      	ldr	r3, [r4, #12]
 8006da4:	6832      	ldr	r2, [r6, #0]
 8006da6:	1a9b      	subs	r3, r3, r2
 8006da8:	42ab      	cmp	r3, r5
 8006daa:	dc26      	bgt.n	8006dfa <_printf_common+0x96>
 8006dac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006db0:	1e13      	subs	r3, r2, #0
 8006db2:	6822      	ldr	r2, [r4, #0]
 8006db4:	bf18      	it	ne
 8006db6:	2301      	movne	r3, #1
 8006db8:	0692      	lsls	r2, r2, #26
 8006dba:	d42b      	bmi.n	8006e14 <_printf_common+0xb0>
 8006dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	47c0      	blx	r8
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	d01e      	beq.n	8006e08 <_printf_common+0xa4>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	68e5      	ldr	r5, [r4, #12]
 8006dce:	6832      	ldr	r2, [r6, #0]
 8006dd0:	f003 0306 	and.w	r3, r3, #6
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	bf08      	it	eq
 8006dd8:	1aad      	subeq	r5, r5, r2
 8006dda:	68a3      	ldr	r3, [r4, #8]
 8006ddc:	6922      	ldr	r2, [r4, #16]
 8006dde:	bf0c      	ite	eq
 8006de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006de4:	2500      	movne	r5, #0
 8006de6:	4293      	cmp	r3, r2
 8006de8:	bfc4      	itt	gt
 8006dea:	1a9b      	subgt	r3, r3, r2
 8006dec:	18ed      	addgt	r5, r5, r3
 8006dee:	2600      	movs	r6, #0
 8006df0:	341a      	adds	r4, #26
 8006df2:	42b5      	cmp	r5, r6
 8006df4:	d11a      	bne.n	8006e2c <_printf_common+0xc8>
 8006df6:	2000      	movs	r0, #0
 8006df8:	e008      	b.n	8006e0c <_printf_common+0xa8>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	4652      	mov	r2, sl
 8006dfe:	4649      	mov	r1, r9
 8006e00:	4638      	mov	r0, r7
 8006e02:	47c0      	blx	r8
 8006e04:	3001      	adds	r0, #1
 8006e06:	d103      	bne.n	8006e10 <_printf_common+0xac>
 8006e08:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e10:	3501      	adds	r5, #1
 8006e12:	e7c6      	b.n	8006da2 <_printf_common+0x3e>
 8006e14:	18e1      	adds	r1, r4, r3
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	2030      	movs	r0, #48	; 0x30
 8006e1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e1e:	4422      	add	r2, r4
 8006e20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e28:	3302      	adds	r3, #2
 8006e2a:	e7c7      	b.n	8006dbc <_printf_common+0x58>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	4622      	mov	r2, r4
 8006e30:	4649      	mov	r1, r9
 8006e32:	4638      	mov	r0, r7
 8006e34:	47c0      	blx	r8
 8006e36:	3001      	adds	r0, #1
 8006e38:	d0e6      	beq.n	8006e08 <_printf_common+0xa4>
 8006e3a:	3601      	adds	r6, #1
 8006e3c:	e7d9      	b.n	8006df2 <_printf_common+0x8e>
	...

08006e40 <_printf_i>:
 8006e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e44:	7e0f      	ldrb	r7, [r1, #24]
 8006e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e48:	2f78      	cmp	r7, #120	; 0x78
 8006e4a:	4691      	mov	r9, r2
 8006e4c:	4680      	mov	r8, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	469a      	mov	sl, r3
 8006e52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e56:	d807      	bhi.n	8006e68 <_printf_i+0x28>
 8006e58:	2f62      	cmp	r7, #98	; 0x62
 8006e5a:	d80a      	bhi.n	8006e72 <_printf_i+0x32>
 8006e5c:	2f00      	cmp	r7, #0
 8006e5e:	f000 80d8 	beq.w	8007012 <_printf_i+0x1d2>
 8006e62:	2f58      	cmp	r7, #88	; 0x58
 8006e64:	f000 80a3 	beq.w	8006fae <_printf_i+0x16e>
 8006e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e70:	e03a      	b.n	8006ee8 <_printf_i+0xa8>
 8006e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e76:	2b15      	cmp	r3, #21
 8006e78:	d8f6      	bhi.n	8006e68 <_printf_i+0x28>
 8006e7a:	a101      	add	r1, pc, #4	; (adr r1, 8006e80 <_printf_i+0x40>)
 8006e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e80:	08006ed9 	.word	0x08006ed9
 8006e84:	08006eed 	.word	0x08006eed
 8006e88:	08006e69 	.word	0x08006e69
 8006e8c:	08006e69 	.word	0x08006e69
 8006e90:	08006e69 	.word	0x08006e69
 8006e94:	08006e69 	.word	0x08006e69
 8006e98:	08006eed 	.word	0x08006eed
 8006e9c:	08006e69 	.word	0x08006e69
 8006ea0:	08006e69 	.word	0x08006e69
 8006ea4:	08006e69 	.word	0x08006e69
 8006ea8:	08006e69 	.word	0x08006e69
 8006eac:	08006ff9 	.word	0x08006ff9
 8006eb0:	08006f1d 	.word	0x08006f1d
 8006eb4:	08006fdb 	.word	0x08006fdb
 8006eb8:	08006e69 	.word	0x08006e69
 8006ebc:	08006e69 	.word	0x08006e69
 8006ec0:	0800701b 	.word	0x0800701b
 8006ec4:	08006e69 	.word	0x08006e69
 8006ec8:	08006f1d 	.word	0x08006f1d
 8006ecc:	08006e69 	.word	0x08006e69
 8006ed0:	08006e69 	.word	0x08006e69
 8006ed4:	08006fe3 	.word	0x08006fe3
 8006ed8:	682b      	ldr	r3, [r5, #0]
 8006eda:	1d1a      	adds	r2, r3, #4
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	602a      	str	r2, [r5, #0]
 8006ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0a3      	b.n	8007034 <_printf_i+0x1f4>
 8006eec:	6820      	ldr	r0, [r4, #0]
 8006eee:	6829      	ldr	r1, [r5, #0]
 8006ef0:	0606      	lsls	r6, r0, #24
 8006ef2:	f101 0304 	add.w	r3, r1, #4
 8006ef6:	d50a      	bpl.n	8006f0e <_printf_i+0xce>
 8006ef8:	680e      	ldr	r6, [r1, #0]
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	2e00      	cmp	r6, #0
 8006efe:	da03      	bge.n	8006f08 <_printf_i+0xc8>
 8006f00:	232d      	movs	r3, #45	; 0x2d
 8006f02:	4276      	negs	r6, r6
 8006f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f08:	485e      	ldr	r0, [pc, #376]	; (8007084 <_printf_i+0x244>)
 8006f0a:	230a      	movs	r3, #10
 8006f0c:	e019      	b.n	8006f42 <_printf_i+0x102>
 8006f0e:	680e      	ldr	r6, [r1, #0]
 8006f10:	602b      	str	r3, [r5, #0]
 8006f12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f16:	bf18      	it	ne
 8006f18:	b236      	sxthne	r6, r6
 8006f1a:	e7ef      	b.n	8006efc <_printf_i+0xbc>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	6820      	ldr	r0, [r4, #0]
 8006f20:	1d19      	adds	r1, r3, #4
 8006f22:	6029      	str	r1, [r5, #0]
 8006f24:	0601      	lsls	r1, r0, #24
 8006f26:	d501      	bpl.n	8006f2c <_printf_i+0xec>
 8006f28:	681e      	ldr	r6, [r3, #0]
 8006f2a:	e002      	b.n	8006f32 <_printf_i+0xf2>
 8006f2c:	0646      	lsls	r6, r0, #25
 8006f2e:	d5fb      	bpl.n	8006f28 <_printf_i+0xe8>
 8006f30:	881e      	ldrh	r6, [r3, #0]
 8006f32:	4854      	ldr	r0, [pc, #336]	; (8007084 <_printf_i+0x244>)
 8006f34:	2f6f      	cmp	r7, #111	; 0x6f
 8006f36:	bf0c      	ite	eq
 8006f38:	2308      	moveq	r3, #8
 8006f3a:	230a      	movne	r3, #10
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f42:	6865      	ldr	r5, [r4, #4]
 8006f44:	60a5      	str	r5, [r4, #8]
 8006f46:	2d00      	cmp	r5, #0
 8006f48:	bfa2      	ittt	ge
 8006f4a:	6821      	ldrge	r1, [r4, #0]
 8006f4c:	f021 0104 	bicge.w	r1, r1, #4
 8006f50:	6021      	strge	r1, [r4, #0]
 8006f52:	b90e      	cbnz	r6, 8006f58 <_printf_i+0x118>
 8006f54:	2d00      	cmp	r5, #0
 8006f56:	d04d      	beq.n	8006ff4 <_printf_i+0x1b4>
 8006f58:	4615      	mov	r5, r2
 8006f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8006f62:	5dc7      	ldrb	r7, [r0, r7]
 8006f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f68:	4637      	mov	r7, r6
 8006f6a:	42bb      	cmp	r3, r7
 8006f6c:	460e      	mov	r6, r1
 8006f6e:	d9f4      	bls.n	8006f5a <_printf_i+0x11a>
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d10b      	bne.n	8006f8c <_printf_i+0x14c>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	07de      	lsls	r6, r3, #31
 8006f78:	d508      	bpl.n	8006f8c <_printf_i+0x14c>
 8006f7a:	6923      	ldr	r3, [r4, #16]
 8006f7c:	6861      	ldr	r1, [r4, #4]
 8006f7e:	4299      	cmp	r1, r3
 8006f80:	bfde      	ittt	le
 8006f82:	2330      	movle	r3, #48	; 0x30
 8006f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f8c:	1b52      	subs	r2, r2, r5
 8006f8e:	6122      	str	r2, [r4, #16]
 8006f90:	f8cd a000 	str.w	sl, [sp]
 8006f94:	464b      	mov	r3, r9
 8006f96:	aa03      	add	r2, sp, #12
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	f7ff fee2 	bl	8006d64 <_printf_common>
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d14c      	bne.n	800703e <_printf_i+0x1fe>
 8006fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa8:	b004      	add	sp, #16
 8006faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fae:	4835      	ldr	r0, [pc, #212]	; (8007084 <_printf_i+0x244>)
 8006fb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006fb4:	6829      	ldr	r1, [r5, #0]
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fbc:	6029      	str	r1, [r5, #0]
 8006fbe:	061d      	lsls	r5, r3, #24
 8006fc0:	d514      	bpl.n	8006fec <_printf_i+0x1ac>
 8006fc2:	07df      	lsls	r7, r3, #31
 8006fc4:	bf44      	itt	mi
 8006fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8006fca:	6023      	strmi	r3, [r4, #0]
 8006fcc:	b91e      	cbnz	r6, 8006fd6 <_printf_i+0x196>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	f023 0320 	bic.w	r3, r3, #32
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	2310      	movs	r3, #16
 8006fd8:	e7b0      	b.n	8006f3c <_printf_i+0xfc>
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	f043 0320 	orr.w	r3, r3, #32
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	2378      	movs	r3, #120	; 0x78
 8006fe4:	4828      	ldr	r0, [pc, #160]	; (8007088 <_printf_i+0x248>)
 8006fe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fea:	e7e3      	b.n	8006fb4 <_printf_i+0x174>
 8006fec:	0659      	lsls	r1, r3, #25
 8006fee:	bf48      	it	mi
 8006ff0:	b2b6      	uxthmi	r6, r6
 8006ff2:	e7e6      	b.n	8006fc2 <_printf_i+0x182>
 8006ff4:	4615      	mov	r5, r2
 8006ff6:	e7bb      	b.n	8006f70 <_printf_i+0x130>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	6826      	ldr	r6, [r4, #0]
 8006ffc:	6961      	ldr	r1, [r4, #20]
 8006ffe:	1d18      	adds	r0, r3, #4
 8007000:	6028      	str	r0, [r5, #0]
 8007002:	0635      	lsls	r5, r6, #24
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	d501      	bpl.n	800700c <_printf_i+0x1cc>
 8007008:	6019      	str	r1, [r3, #0]
 800700a:	e002      	b.n	8007012 <_printf_i+0x1d2>
 800700c:	0670      	lsls	r0, r6, #25
 800700e:	d5fb      	bpl.n	8007008 <_printf_i+0x1c8>
 8007010:	8019      	strh	r1, [r3, #0]
 8007012:	2300      	movs	r3, #0
 8007014:	6123      	str	r3, [r4, #16]
 8007016:	4615      	mov	r5, r2
 8007018:	e7ba      	b.n	8006f90 <_printf_i+0x150>
 800701a:	682b      	ldr	r3, [r5, #0]
 800701c:	1d1a      	adds	r2, r3, #4
 800701e:	602a      	str	r2, [r5, #0]
 8007020:	681d      	ldr	r5, [r3, #0]
 8007022:	6862      	ldr	r2, [r4, #4]
 8007024:	2100      	movs	r1, #0
 8007026:	4628      	mov	r0, r5
 8007028:	f7f9 f8e2 	bl	80001f0 <memchr>
 800702c:	b108      	cbz	r0, 8007032 <_printf_i+0x1f2>
 800702e:	1b40      	subs	r0, r0, r5
 8007030:	6060      	str	r0, [r4, #4]
 8007032:	6863      	ldr	r3, [r4, #4]
 8007034:	6123      	str	r3, [r4, #16]
 8007036:	2300      	movs	r3, #0
 8007038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800703c:	e7a8      	b.n	8006f90 <_printf_i+0x150>
 800703e:	6923      	ldr	r3, [r4, #16]
 8007040:	462a      	mov	r2, r5
 8007042:	4649      	mov	r1, r9
 8007044:	4640      	mov	r0, r8
 8007046:	47d0      	blx	sl
 8007048:	3001      	adds	r0, #1
 800704a:	d0ab      	beq.n	8006fa4 <_printf_i+0x164>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	079b      	lsls	r3, r3, #30
 8007050:	d413      	bmi.n	800707a <_printf_i+0x23a>
 8007052:	68e0      	ldr	r0, [r4, #12]
 8007054:	9b03      	ldr	r3, [sp, #12]
 8007056:	4298      	cmp	r0, r3
 8007058:	bfb8      	it	lt
 800705a:	4618      	movlt	r0, r3
 800705c:	e7a4      	b.n	8006fa8 <_printf_i+0x168>
 800705e:	2301      	movs	r3, #1
 8007060:	4632      	mov	r2, r6
 8007062:	4649      	mov	r1, r9
 8007064:	4640      	mov	r0, r8
 8007066:	47d0      	blx	sl
 8007068:	3001      	adds	r0, #1
 800706a:	d09b      	beq.n	8006fa4 <_printf_i+0x164>
 800706c:	3501      	adds	r5, #1
 800706e:	68e3      	ldr	r3, [r4, #12]
 8007070:	9903      	ldr	r1, [sp, #12]
 8007072:	1a5b      	subs	r3, r3, r1
 8007074:	42ab      	cmp	r3, r5
 8007076:	dcf2      	bgt.n	800705e <_printf_i+0x21e>
 8007078:	e7eb      	b.n	8007052 <_printf_i+0x212>
 800707a:	2500      	movs	r5, #0
 800707c:	f104 0619 	add.w	r6, r4, #25
 8007080:	e7f5      	b.n	800706e <_printf_i+0x22e>
 8007082:	bf00      	nop
 8007084:	0800977e 	.word	0x0800977e
 8007088:	0800978f 	.word	0x0800978f

0800708c <iprintf>:
 800708c:	b40f      	push	{r0, r1, r2, r3}
 800708e:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <iprintf+0x2c>)
 8007090:	b513      	push	{r0, r1, r4, lr}
 8007092:	681c      	ldr	r4, [r3, #0]
 8007094:	b124      	cbz	r4, 80070a0 <iprintf+0x14>
 8007096:	69a3      	ldr	r3, [r4, #24]
 8007098:	b913      	cbnz	r3, 80070a0 <iprintf+0x14>
 800709a:	4620      	mov	r0, r4
 800709c:	f001 f8f8 	bl	8008290 <__sinit>
 80070a0:	ab05      	add	r3, sp, #20
 80070a2:	9a04      	ldr	r2, [sp, #16]
 80070a4:	68a1      	ldr	r1, [r4, #8]
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	4620      	mov	r0, r4
 80070aa:	f002 f811 	bl	80090d0 <_vfiprintf_r>
 80070ae:	b002      	add	sp, #8
 80070b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b4:	b004      	add	sp, #16
 80070b6:	4770      	bx	lr
 80070b8:	2000000c 	.word	0x2000000c

080070bc <_puts_r>:
 80070bc:	b570      	push	{r4, r5, r6, lr}
 80070be:	460e      	mov	r6, r1
 80070c0:	4605      	mov	r5, r0
 80070c2:	b118      	cbz	r0, 80070cc <_puts_r+0x10>
 80070c4:	6983      	ldr	r3, [r0, #24]
 80070c6:	b90b      	cbnz	r3, 80070cc <_puts_r+0x10>
 80070c8:	f001 f8e2 	bl	8008290 <__sinit>
 80070cc:	69ab      	ldr	r3, [r5, #24]
 80070ce:	68ac      	ldr	r4, [r5, #8]
 80070d0:	b913      	cbnz	r3, 80070d8 <_puts_r+0x1c>
 80070d2:	4628      	mov	r0, r5
 80070d4:	f001 f8dc 	bl	8008290 <__sinit>
 80070d8:	4b2c      	ldr	r3, [pc, #176]	; (800718c <_puts_r+0xd0>)
 80070da:	429c      	cmp	r4, r3
 80070dc:	d120      	bne.n	8007120 <_puts_r+0x64>
 80070de:	686c      	ldr	r4, [r5, #4]
 80070e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070e2:	07db      	lsls	r3, r3, #31
 80070e4:	d405      	bmi.n	80070f2 <_puts_r+0x36>
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	0598      	lsls	r0, r3, #22
 80070ea:	d402      	bmi.n	80070f2 <_puts_r+0x36>
 80070ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070ee:	f001 f972 	bl	80083d6 <__retarget_lock_acquire_recursive>
 80070f2:	89a3      	ldrh	r3, [r4, #12]
 80070f4:	0719      	lsls	r1, r3, #28
 80070f6:	d51d      	bpl.n	8007134 <_puts_r+0x78>
 80070f8:	6923      	ldr	r3, [r4, #16]
 80070fa:	b1db      	cbz	r3, 8007134 <_puts_r+0x78>
 80070fc:	3e01      	subs	r6, #1
 80070fe:	68a3      	ldr	r3, [r4, #8]
 8007100:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007104:	3b01      	subs	r3, #1
 8007106:	60a3      	str	r3, [r4, #8]
 8007108:	bb39      	cbnz	r1, 800715a <_puts_r+0x9e>
 800710a:	2b00      	cmp	r3, #0
 800710c:	da38      	bge.n	8007180 <_puts_r+0xc4>
 800710e:	4622      	mov	r2, r4
 8007110:	210a      	movs	r1, #10
 8007112:	4628      	mov	r0, r5
 8007114:	f000 f868 	bl	80071e8 <__swbuf_r>
 8007118:	3001      	adds	r0, #1
 800711a:	d011      	beq.n	8007140 <_puts_r+0x84>
 800711c:	250a      	movs	r5, #10
 800711e:	e011      	b.n	8007144 <_puts_r+0x88>
 8007120:	4b1b      	ldr	r3, [pc, #108]	; (8007190 <_puts_r+0xd4>)
 8007122:	429c      	cmp	r4, r3
 8007124:	d101      	bne.n	800712a <_puts_r+0x6e>
 8007126:	68ac      	ldr	r4, [r5, #8]
 8007128:	e7da      	b.n	80070e0 <_puts_r+0x24>
 800712a:	4b1a      	ldr	r3, [pc, #104]	; (8007194 <_puts_r+0xd8>)
 800712c:	429c      	cmp	r4, r3
 800712e:	bf08      	it	eq
 8007130:	68ec      	ldreq	r4, [r5, #12]
 8007132:	e7d5      	b.n	80070e0 <_puts_r+0x24>
 8007134:	4621      	mov	r1, r4
 8007136:	4628      	mov	r0, r5
 8007138:	f000 f8a8 	bl	800728c <__swsetup_r>
 800713c:	2800      	cmp	r0, #0
 800713e:	d0dd      	beq.n	80070fc <_puts_r+0x40>
 8007140:	f04f 35ff 	mov.w	r5, #4294967295
 8007144:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007146:	07da      	lsls	r2, r3, #31
 8007148:	d405      	bmi.n	8007156 <_puts_r+0x9a>
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	059b      	lsls	r3, r3, #22
 800714e:	d402      	bmi.n	8007156 <_puts_r+0x9a>
 8007150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007152:	f001 f941 	bl	80083d8 <__retarget_lock_release_recursive>
 8007156:	4628      	mov	r0, r5
 8007158:	bd70      	pop	{r4, r5, r6, pc}
 800715a:	2b00      	cmp	r3, #0
 800715c:	da04      	bge.n	8007168 <_puts_r+0xac>
 800715e:	69a2      	ldr	r2, [r4, #24]
 8007160:	429a      	cmp	r2, r3
 8007162:	dc06      	bgt.n	8007172 <_puts_r+0xb6>
 8007164:	290a      	cmp	r1, #10
 8007166:	d004      	beq.n	8007172 <_puts_r+0xb6>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	6022      	str	r2, [r4, #0]
 800716e:	7019      	strb	r1, [r3, #0]
 8007170:	e7c5      	b.n	80070fe <_puts_r+0x42>
 8007172:	4622      	mov	r2, r4
 8007174:	4628      	mov	r0, r5
 8007176:	f000 f837 	bl	80071e8 <__swbuf_r>
 800717a:	3001      	adds	r0, #1
 800717c:	d1bf      	bne.n	80070fe <_puts_r+0x42>
 800717e:	e7df      	b.n	8007140 <_puts_r+0x84>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	250a      	movs	r5, #10
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	6022      	str	r2, [r4, #0]
 8007188:	701d      	strb	r5, [r3, #0]
 800718a:	e7db      	b.n	8007144 <_puts_r+0x88>
 800718c:	08009850 	.word	0x08009850
 8007190:	08009870 	.word	0x08009870
 8007194:	08009830 	.word	0x08009830

08007198 <puts>:
 8007198:	4b02      	ldr	r3, [pc, #8]	; (80071a4 <puts+0xc>)
 800719a:	4601      	mov	r1, r0
 800719c:	6818      	ldr	r0, [r3, #0]
 800719e:	f7ff bf8d 	b.w	80070bc <_puts_r>
 80071a2:	bf00      	nop
 80071a4:	2000000c 	.word	0x2000000c

080071a8 <siprintf>:
 80071a8:	b40e      	push	{r1, r2, r3}
 80071aa:	b500      	push	{lr}
 80071ac:	b09c      	sub	sp, #112	; 0x70
 80071ae:	ab1d      	add	r3, sp, #116	; 0x74
 80071b0:	9002      	str	r0, [sp, #8]
 80071b2:	9006      	str	r0, [sp, #24]
 80071b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071b8:	4809      	ldr	r0, [pc, #36]	; (80071e0 <siprintf+0x38>)
 80071ba:	9107      	str	r1, [sp, #28]
 80071bc:	9104      	str	r1, [sp, #16]
 80071be:	4909      	ldr	r1, [pc, #36]	; (80071e4 <siprintf+0x3c>)
 80071c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80071c4:	9105      	str	r1, [sp, #20]
 80071c6:	6800      	ldr	r0, [r0, #0]
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	a902      	add	r1, sp, #8
 80071cc:	f001 fe56 	bl	8008e7c <_svfiprintf_r>
 80071d0:	9b02      	ldr	r3, [sp, #8]
 80071d2:	2200      	movs	r2, #0
 80071d4:	701a      	strb	r2, [r3, #0]
 80071d6:	b01c      	add	sp, #112	; 0x70
 80071d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071dc:	b003      	add	sp, #12
 80071de:	4770      	bx	lr
 80071e0:	2000000c 	.word	0x2000000c
 80071e4:	ffff0208 	.word	0xffff0208

080071e8 <__swbuf_r>:
 80071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ea:	460e      	mov	r6, r1
 80071ec:	4614      	mov	r4, r2
 80071ee:	4605      	mov	r5, r0
 80071f0:	b118      	cbz	r0, 80071fa <__swbuf_r+0x12>
 80071f2:	6983      	ldr	r3, [r0, #24]
 80071f4:	b90b      	cbnz	r3, 80071fa <__swbuf_r+0x12>
 80071f6:	f001 f84b 	bl	8008290 <__sinit>
 80071fa:	4b21      	ldr	r3, [pc, #132]	; (8007280 <__swbuf_r+0x98>)
 80071fc:	429c      	cmp	r4, r3
 80071fe:	d12b      	bne.n	8007258 <__swbuf_r+0x70>
 8007200:	686c      	ldr	r4, [r5, #4]
 8007202:	69a3      	ldr	r3, [r4, #24]
 8007204:	60a3      	str	r3, [r4, #8]
 8007206:	89a3      	ldrh	r3, [r4, #12]
 8007208:	071a      	lsls	r2, r3, #28
 800720a:	d52f      	bpl.n	800726c <__swbuf_r+0x84>
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	b36b      	cbz	r3, 800726c <__swbuf_r+0x84>
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	6820      	ldr	r0, [r4, #0]
 8007214:	1ac0      	subs	r0, r0, r3
 8007216:	6963      	ldr	r3, [r4, #20]
 8007218:	b2f6      	uxtb	r6, r6
 800721a:	4283      	cmp	r3, r0
 800721c:	4637      	mov	r7, r6
 800721e:	dc04      	bgt.n	800722a <__swbuf_r+0x42>
 8007220:	4621      	mov	r1, r4
 8007222:	4628      	mov	r0, r5
 8007224:	f000 ffa0 	bl	8008168 <_fflush_r>
 8007228:	bb30      	cbnz	r0, 8007278 <__swbuf_r+0x90>
 800722a:	68a3      	ldr	r3, [r4, #8]
 800722c:	3b01      	subs	r3, #1
 800722e:	60a3      	str	r3, [r4, #8]
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	6022      	str	r2, [r4, #0]
 8007236:	701e      	strb	r6, [r3, #0]
 8007238:	6963      	ldr	r3, [r4, #20]
 800723a:	3001      	adds	r0, #1
 800723c:	4283      	cmp	r3, r0
 800723e:	d004      	beq.n	800724a <__swbuf_r+0x62>
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	07db      	lsls	r3, r3, #31
 8007244:	d506      	bpl.n	8007254 <__swbuf_r+0x6c>
 8007246:	2e0a      	cmp	r6, #10
 8007248:	d104      	bne.n	8007254 <__swbuf_r+0x6c>
 800724a:	4621      	mov	r1, r4
 800724c:	4628      	mov	r0, r5
 800724e:	f000 ff8b 	bl	8008168 <_fflush_r>
 8007252:	b988      	cbnz	r0, 8007278 <__swbuf_r+0x90>
 8007254:	4638      	mov	r0, r7
 8007256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007258:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <__swbuf_r+0x9c>)
 800725a:	429c      	cmp	r4, r3
 800725c:	d101      	bne.n	8007262 <__swbuf_r+0x7a>
 800725e:	68ac      	ldr	r4, [r5, #8]
 8007260:	e7cf      	b.n	8007202 <__swbuf_r+0x1a>
 8007262:	4b09      	ldr	r3, [pc, #36]	; (8007288 <__swbuf_r+0xa0>)
 8007264:	429c      	cmp	r4, r3
 8007266:	bf08      	it	eq
 8007268:	68ec      	ldreq	r4, [r5, #12]
 800726a:	e7ca      	b.n	8007202 <__swbuf_r+0x1a>
 800726c:	4621      	mov	r1, r4
 800726e:	4628      	mov	r0, r5
 8007270:	f000 f80c 	bl	800728c <__swsetup_r>
 8007274:	2800      	cmp	r0, #0
 8007276:	d0cb      	beq.n	8007210 <__swbuf_r+0x28>
 8007278:	f04f 37ff 	mov.w	r7, #4294967295
 800727c:	e7ea      	b.n	8007254 <__swbuf_r+0x6c>
 800727e:	bf00      	nop
 8007280:	08009850 	.word	0x08009850
 8007284:	08009870 	.word	0x08009870
 8007288:	08009830 	.word	0x08009830

0800728c <__swsetup_r>:
 800728c:	4b32      	ldr	r3, [pc, #200]	; (8007358 <__swsetup_r+0xcc>)
 800728e:	b570      	push	{r4, r5, r6, lr}
 8007290:	681d      	ldr	r5, [r3, #0]
 8007292:	4606      	mov	r6, r0
 8007294:	460c      	mov	r4, r1
 8007296:	b125      	cbz	r5, 80072a2 <__swsetup_r+0x16>
 8007298:	69ab      	ldr	r3, [r5, #24]
 800729a:	b913      	cbnz	r3, 80072a2 <__swsetup_r+0x16>
 800729c:	4628      	mov	r0, r5
 800729e:	f000 fff7 	bl	8008290 <__sinit>
 80072a2:	4b2e      	ldr	r3, [pc, #184]	; (800735c <__swsetup_r+0xd0>)
 80072a4:	429c      	cmp	r4, r3
 80072a6:	d10f      	bne.n	80072c8 <__swsetup_r+0x3c>
 80072a8:	686c      	ldr	r4, [r5, #4]
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072b0:	0719      	lsls	r1, r3, #28
 80072b2:	d42c      	bmi.n	800730e <__swsetup_r+0x82>
 80072b4:	06dd      	lsls	r5, r3, #27
 80072b6:	d411      	bmi.n	80072dc <__swsetup_r+0x50>
 80072b8:	2309      	movs	r3, #9
 80072ba:	6033      	str	r3, [r6, #0]
 80072bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072c0:	81a3      	strh	r3, [r4, #12]
 80072c2:	f04f 30ff 	mov.w	r0, #4294967295
 80072c6:	e03e      	b.n	8007346 <__swsetup_r+0xba>
 80072c8:	4b25      	ldr	r3, [pc, #148]	; (8007360 <__swsetup_r+0xd4>)
 80072ca:	429c      	cmp	r4, r3
 80072cc:	d101      	bne.n	80072d2 <__swsetup_r+0x46>
 80072ce:	68ac      	ldr	r4, [r5, #8]
 80072d0:	e7eb      	b.n	80072aa <__swsetup_r+0x1e>
 80072d2:	4b24      	ldr	r3, [pc, #144]	; (8007364 <__swsetup_r+0xd8>)
 80072d4:	429c      	cmp	r4, r3
 80072d6:	bf08      	it	eq
 80072d8:	68ec      	ldreq	r4, [r5, #12]
 80072da:	e7e6      	b.n	80072aa <__swsetup_r+0x1e>
 80072dc:	0758      	lsls	r0, r3, #29
 80072de:	d512      	bpl.n	8007306 <__swsetup_r+0x7a>
 80072e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072e2:	b141      	cbz	r1, 80072f6 <__swsetup_r+0x6a>
 80072e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072e8:	4299      	cmp	r1, r3
 80072ea:	d002      	beq.n	80072f2 <__swsetup_r+0x66>
 80072ec:	4630      	mov	r0, r6
 80072ee:	f001 fc89 	bl	8008c04 <_free_r>
 80072f2:	2300      	movs	r3, #0
 80072f4:	6363      	str	r3, [r4, #52]	; 0x34
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072fc:	81a3      	strh	r3, [r4, #12]
 80072fe:	2300      	movs	r3, #0
 8007300:	6063      	str	r3, [r4, #4]
 8007302:	6923      	ldr	r3, [r4, #16]
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	f043 0308 	orr.w	r3, r3, #8
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	6923      	ldr	r3, [r4, #16]
 8007310:	b94b      	cbnz	r3, 8007326 <__swsetup_r+0x9a>
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800731c:	d003      	beq.n	8007326 <__swsetup_r+0x9a>
 800731e:	4621      	mov	r1, r4
 8007320:	4630      	mov	r0, r6
 8007322:	f001 f87f 	bl	8008424 <__smakebuf_r>
 8007326:	89a0      	ldrh	r0, [r4, #12]
 8007328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800732c:	f010 0301 	ands.w	r3, r0, #1
 8007330:	d00a      	beq.n	8007348 <__swsetup_r+0xbc>
 8007332:	2300      	movs	r3, #0
 8007334:	60a3      	str	r3, [r4, #8]
 8007336:	6963      	ldr	r3, [r4, #20]
 8007338:	425b      	negs	r3, r3
 800733a:	61a3      	str	r3, [r4, #24]
 800733c:	6923      	ldr	r3, [r4, #16]
 800733e:	b943      	cbnz	r3, 8007352 <__swsetup_r+0xc6>
 8007340:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007344:	d1ba      	bne.n	80072bc <__swsetup_r+0x30>
 8007346:	bd70      	pop	{r4, r5, r6, pc}
 8007348:	0781      	lsls	r1, r0, #30
 800734a:	bf58      	it	pl
 800734c:	6963      	ldrpl	r3, [r4, #20]
 800734e:	60a3      	str	r3, [r4, #8]
 8007350:	e7f4      	b.n	800733c <__swsetup_r+0xb0>
 8007352:	2000      	movs	r0, #0
 8007354:	e7f7      	b.n	8007346 <__swsetup_r+0xba>
 8007356:	bf00      	nop
 8007358:	2000000c 	.word	0x2000000c
 800735c:	08009850 	.word	0x08009850
 8007360:	08009870 	.word	0x08009870
 8007364:	08009830 	.word	0x08009830

08007368 <quorem>:
 8007368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	6903      	ldr	r3, [r0, #16]
 800736e:	690c      	ldr	r4, [r1, #16]
 8007370:	42a3      	cmp	r3, r4
 8007372:	4607      	mov	r7, r0
 8007374:	f2c0 8081 	blt.w	800747a <quorem+0x112>
 8007378:	3c01      	subs	r4, #1
 800737a:	f101 0814 	add.w	r8, r1, #20
 800737e:	f100 0514 	add.w	r5, r0, #20
 8007382:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800738c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007390:	3301      	adds	r3, #1
 8007392:	429a      	cmp	r2, r3
 8007394:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007398:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800739c:	fbb2 f6f3 	udiv	r6, r2, r3
 80073a0:	d331      	bcc.n	8007406 <quorem+0x9e>
 80073a2:	f04f 0e00 	mov.w	lr, #0
 80073a6:	4640      	mov	r0, r8
 80073a8:	46ac      	mov	ip, r5
 80073aa:	46f2      	mov	sl, lr
 80073ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80073b0:	b293      	uxth	r3, r2
 80073b2:	fb06 e303 	mla	r3, r6, r3, lr
 80073b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	ebaa 0303 	sub.w	r3, sl, r3
 80073c0:	f8dc a000 	ldr.w	sl, [ip]
 80073c4:	0c12      	lsrs	r2, r2, #16
 80073c6:	fa13 f38a 	uxtah	r3, r3, sl
 80073ca:	fb06 e202 	mla	r2, r6, r2, lr
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	9b00      	ldr	r3, [sp, #0]
 80073d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073d6:	b292      	uxth	r2, r2
 80073d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80073e4:	4581      	cmp	r9, r0
 80073e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ea:	f84c 3b04 	str.w	r3, [ip], #4
 80073ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073f2:	d2db      	bcs.n	80073ac <quorem+0x44>
 80073f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80073f8:	b92b      	cbnz	r3, 8007406 <quorem+0x9e>
 80073fa:	9b01      	ldr	r3, [sp, #4]
 80073fc:	3b04      	subs	r3, #4
 80073fe:	429d      	cmp	r5, r3
 8007400:	461a      	mov	r2, r3
 8007402:	d32e      	bcc.n	8007462 <quorem+0xfa>
 8007404:	613c      	str	r4, [r7, #16]
 8007406:	4638      	mov	r0, r7
 8007408:	f001 fae4 	bl	80089d4 <__mcmp>
 800740c:	2800      	cmp	r0, #0
 800740e:	db24      	blt.n	800745a <quorem+0xf2>
 8007410:	3601      	adds	r6, #1
 8007412:	4628      	mov	r0, r5
 8007414:	f04f 0c00 	mov.w	ip, #0
 8007418:	f858 2b04 	ldr.w	r2, [r8], #4
 800741c:	f8d0 e000 	ldr.w	lr, [r0]
 8007420:	b293      	uxth	r3, r2
 8007422:	ebac 0303 	sub.w	r3, ip, r3
 8007426:	0c12      	lsrs	r2, r2, #16
 8007428:	fa13 f38e 	uxtah	r3, r3, lr
 800742c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007430:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007434:	b29b      	uxth	r3, r3
 8007436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800743a:	45c1      	cmp	r9, r8
 800743c:	f840 3b04 	str.w	r3, [r0], #4
 8007440:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007444:	d2e8      	bcs.n	8007418 <quorem+0xb0>
 8007446:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800744a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800744e:	b922      	cbnz	r2, 800745a <quorem+0xf2>
 8007450:	3b04      	subs	r3, #4
 8007452:	429d      	cmp	r5, r3
 8007454:	461a      	mov	r2, r3
 8007456:	d30a      	bcc.n	800746e <quorem+0x106>
 8007458:	613c      	str	r4, [r7, #16]
 800745a:	4630      	mov	r0, r6
 800745c:	b003      	add	sp, #12
 800745e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007462:	6812      	ldr	r2, [r2, #0]
 8007464:	3b04      	subs	r3, #4
 8007466:	2a00      	cmp	r2, #0
 8007468:	d1cc      	bne.n	8007404 <quorem+0x9c>
 800746a:	3c01      	subs	r4, #1
 800746c:	e7c7      	b.n	80073fe <quorem+0x96>
 800746e:	6812      	ldr	r2, [r2, #0]
 8007470:	3b04      	subs	r3, #4
 8007472:	2a00      	cmp	r2, #0
 8007474:	d1f0      	bne.n	8007458 <quorem+0xf0>
 8007476:	3c01      	subs	r4, #1
 8007478:	e7eb      	b.n	8007452 <quorem+0xea>
 800747a:	2000      	movs	r0, #0
 800747c:	e7ee      	b.n	800745c <quorem+0xf4>
	...

08007480 <_dtoa_r>:
 8007480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007484:	ed2d 8b04 	vpush	{d8-d9}
 8007488:	ec57 6b10 	vmov	r6, r7, d0
 800748c:	b093      	sub	sp, #76	; 0x4c
 800748e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007490:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007494:	9106      	str	r1, [sp, #24]
 8007496:	ee10 aa10 	vmov	sl, s0
 800749a:	4604      	mov	r4, r0
 800749c:	9209      	str	r2, [sp, #36]	; 0x24
 800749e:	930c      	str	r3, [sp, #48]	; 0x30
 80074a0:	46bb      	mov	fp, r7
 80074a2:	b975      	cbnz	r5, 80074c2 <_dtoa_r+0x42>
 80074a4:	2010      	movs	r0, #16
 80074a6:	f000 fffd 	bl	80084a4 <malloc>
 80074aa:	4602      	mov	r2, r0
 80074ac:	6260      	str	r0, [r4, #36]	; 0x24
 80074ae:	b920      	cbnz	r0, 80074ba <_dtoa_r+0x3a>
 80074b0:	4ba7      	ldr	r3, [pc, #668]	; (8007750 <_dtoa_r+0x2d0>)
 80074b2:	21ea      	movs	r1, #234	; 0xea
 80074b4:	48a7      	ldr	r0, [pc, #668]	; (8007754 <_dtoa_r+0x2d4>)
 80074b6:	f001 ffa1 	bl	80093fc <__assert_func>
 80074ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074be:	6005      	str	r5, [r0, #0]
 80074c0:	60c5      	str	r5, [r0, #12]
 80074c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074c4:	6819      	ldr	r1, [r3, #0]
 80074c6:	b151      	cbz	r1, 80074de <_dtoa_r+0x5e>
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	604a      	str	r2, [r1, #4]
 80074cc:	2301      	movs	r3, #1
 80074ce:	4093      	lsls	r3, r2
 80074d0:	608b      	str	r3, [r1, #8]
 80074d2:	4620      	mov	r0, r4
 80074d4:	f001 f83c 	bl	8008550 <_Bfree>
 80074d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	1e3b      	subs	r3, r7, #0
 80074e0:	bfaa      	itet	ge
 80074e2:	2300      	movge	r3, #0
 80074e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80074e8:	f8c8 3000 	strge.w	r3, [r8]
 80074ec:	4b9a      	ldr	r3, [pc, #616]	; (8007758 <_dtoa_r+0x2d8>)
 80074ee:	bfbc      	itt	lt
 80074f0:	2201      	movlt	r2, #1
 80074f2:	f8c8 2000 	strlt.w	r2, [r8]
 80074f6:	ea33 030b 	bics.w	r3, r3, fp
 80074fa:	d11b      	bne.n	8007534 <_dtoa_r+0xb4>
 80074fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007508:	4333      	orrs	r3, r6
 800750a:	f000 8592 	beq.w	8008032 <_dtoa_r+0xbb2>
 800750e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007510:	b963      	cbnz	r3, 800752c <_dtoa_r+0xac>
 8007512:	4b92      	ldr	r3, [pc, #584]	; (800775c <_dtoa_r+0x2dc>)
 8007514:	e022      	b.n	800755c <_dtoa_r+0xdc>
 8007516:	4b92      	ldr	r3, [pc, #584]	; (8007760 <_dtoa_r+0x2e0>)
 8007518:	9301      	str	r3, [sp, #4]
 800751a:	3308      	adds	r3, #8
 800751c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	9801      	ldr	r0, [sp, #4]
 8007522:	b013      	add	sp, #76	; 0x4c
 8007524:	ecbd 8b04 	vpop	{d8-d9}
 8007528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752c:	4b8b      	ldr	r3, [pc, #556]	; (800775c <_dtoa_r+0x2dc>)
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	3303      	adds	r3, #3
 8007532:	e7f3      	b.n	800751c <_dtoa_r+0x9c>
 8007534:	2200      	movs	r2, #0
 8007536:	2300      	movs	r3, #0
 8007538:	4650      	mov	r0, sl
 800753a:	4659      	mov	r1, fp
 800753c:	f7f9 facc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007540:	ec4b ab19 	vmov	d9, sl, fp
 8007544:	4680      	mov	r8, r0
 8007546:	b158      	cbz	r0, 8007560 <_dtoa_r+0xe0>
 8007548:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800754a:	2301      	movs	r3, #1
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 856b 	beq.w	800802c <_dtoa_r+0xbac>
 8007556:	4883      	ldr	r0, [pc, #524]	; (8007764 <_dtoa_r+0x2e4>)
 8007558:	6018      	str	r0, [r3, #0]
 800755a:	1e43      	subs	r3, r0, #1
 800755c:	9301      	str	r3, [sp, #4]
 800755e:	e7df      	b.n	8007520 <_dtoa_r+0xa0>
 8007560:	ec4b ab10 	vmov	d0, sl, fp
 8007564:	aa10      	add	r2, sp, #64	; 0x40
 8007566:	a911      	add	r1, sp, #68	; 0x44
 8007568:	4620      	mov	r0, r4
 800756a:	f001 fad9 	bl	8008b20 <__d2b>
 800756e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007572:	ee08 0a10 	vmov	s16, r0
 8007576:	2d00      	cmp	r5, #0
 8007578:	f000 8084 	beq.w	8007684 <_dtoa_r+0x204>
 800757c:	ee19 3a90 	vmov	r3, s19
 8007580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007584:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007588:	4656      	mov	r6, sl
 800758a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800758e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007592:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007596:	4b74      	ldr	r3, [pc, #464]	; (8007768 <_dtoa_r+0x2e8>)
 8007598:	2200      	movs	r2, #0
 800759a:	4630      	mov	r0, r6
 800759c:	4639      	mov	r1, r7
 800759e:	f7f8 fe7b 	bl	8000298 <__aeabi_dsub>
 80075a2:	a365      	add	r3, pc, #404	; (adr r3, 8007738 <_dtoa_r+0x2b8>)
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	f7f9 f82e 	bl	8000608 <__aeabi_dmul>
 80075ac:	a364      	add	r3, pc, #400	; (adr r3, 8007740 <_dtoa_r+0x2c0>)
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	f7f8 fe73 	bl	800029c <__adddf3>
 80075b6:	4606      	mov	r6, r0
 80075b8:	4628      	mov	r0, r5
 80075ba:	460f      	mov	r7, r1
 80075bc:	f7f8 ffba 	bl	8000534 <__aeabi_i2d>
 80075c0:	a361      	add	r3, pc, #388	; (adr r3, 8007748 <_dtoa_r+0x2c8>)
 80075c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c6:	f7f9 f81f 	bl	8000608 <__aeabi_dmul>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	4630      	mov	r0, r6
 80075d0:	4639      	mov	r1, r7
 80075d2:	f7f8 fe63 	bl	800029c <__adddf3>
 80075d6:	4606      	mov	r6, r0
 80075d8:	460f      	mov	r7, r1
 80075da:	f7f9 fac5 	bl	8000b68 <__aeabi_d2iz>
 80075de:	2200      	movs	r2, #0
 80075e0:	9000      	str	r0, [sp, #0]
 80075e2:	2300      	movs	r3, #0
 80075e4:	4630      	mov	r0, r6
 80075e6:	4639      	mov	r1, r7
 80075e8:	f7f9 fa80 	bl	8000aec <__aeabi_dcmplt>
 80075ec:	b150      	cbz	r0, 8007604 <_dtoa_r+0x184>
 80075ee:	9800      	ldr	r0, [sp, #0]
 80075f0:	f7f8 ffa0 	bl	8000534 <__aeabi_i2d>
 80075f4:	4632      	mov	r2, r6
 80075f6:	463b      	mov	r3, r7
 80075f8:	f7f9 fa6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80075fc:	b910      	cbnz	r0, 8007604 <_dtoa_r+0x184>
 80075fe:	9b00      	ldr	r3, [sp, #0]
 8007600:	3b01      	subs	r3, #1
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	9b00      	ldr	r3, [sp, #0]
 8007606:	2b16      	cmp	r3, #22
 8007608:	d85a      	bhi.n	80076c0 <_dtoa_r+0x240>
 800760a:	9a00      	ldr	r2, [sp, #0]
 800760c:	4b57      	ldr	r3, [pc, #348]	; (800776c <_dtoa_r+0x2ec>)
 800760e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	ec51 0b19 	vmov	r0, r1, d9
 800761a:	f7f9 fa67 	bl	8000aec <__aeabi_dcmplt>
 800761e:	2800      	cmp	r0, #0
 8007620:	d050      	beq.n	80076c4 <_dtoa_r+0x244>
 8007622:	9b00      	ldr	r3, [sp, #0]
 8007624:	3b01      	subs	r3, #1
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	2300      	movs	r3, #0
 800762a:	930b      	str	r3, [sp, #44]	; 0x2c
 800762c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800762e:	1b5d      	subs	r5, r3, r5
 8007630:	1e6b      	subs	r3, r5, #1
 8007632:	9305      	str	r3, [sp, #20]
 8007634:	bf45      	ittet	mi
 8007636:	f1c5 0301 	rsbmi	r3, r5, #1
 800763a:	9304      	strmi	r3, [sp, #16]
 800763c:	2300      	movpl	r3, #0
 800763e:	2300      	movmi	r3, #0
 8007640:	bf4c      	ite	mi
 8007642:	9305      	strmi	r3, [sp, #20]
 8007644:	9304      	strpl	r3, [sp, #16]
 8007646:	9b00      	ldr	r3, [sp, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	db3d      	blt.n	80076c8 <_dtoa_r+0x248>
 800764c:	9b05      	ldr	r3, [sp, #20]
 800764e:	9a00      	ldr	r2, [sp, #0]
 8007650:	920a      	str	r2, [sp, #40]	; 0x28
 8007652:	4413      	add	r3, r2
 8007654:	9305      	str	r3, [sp, #20]
 8007656:	2300      	movs	r3, #0
 8007658:	9307      	str	r3, [sp, #28]
 800765a:	9b06      	ldr	r3, [sp, #24]
 800765c:	2b09      	cmp	r3, #9
 800765e:	f200 8089 	bhi.w	8007774 <_dtoa_r+0x2f4>
 8007662:	2b05      	cmp	r3, #5
 8007664:	bfc4      	itt	gt
 8007666:	3b04      	subgt	r3, #4
 8007668:	9306      	strgt	r3, [sp, #24]
 800766a:	9b06      	ldr	r3, [sp, #24]
 800766c:	f1a3 0302 	sub.w	r3, r3, #2
 8007670:	bfcc      	ite	gt
 8007672:	2500      	movgt	r5, #0
 8007674:	2501      	movle	r5, #1
 8007676:	2b03      	cmp	r3, #3
 8007678:	f200 8087 	bhi.w	800778a <_dtoa_r+0x30a>
 800767c:	e8df f003 	tbb	[pc, r3]
 8007680:	59383a2d 	.word	0x59383a2d
 8007684:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007688:	441d      	add	r5, r3
 800768a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800768e:	2b20      	cmp	r3, #32
 8007690:	bfc1      	itttt	gt
 8007692:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007696:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800769a:	fa0b f303 	lslgt.w	r3, fp, r3
 800769e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80076a2:	bfda      	itte	le
 80076a4:	f1c3 0320 	rsble	r3, r3, #32
 80076a8:	fa06 f003 	lslle.w	r0, r6, r3
 80076ac:	4318      	orrgt	r0, r3
 80076ae:	f7f8 ff31 	bl	8000514 <__aeabi_ui2d>
 80076b2:	2301      	movs	r3, #1
 80076b4:	4606      	mov	r6, r0
 80076b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80076ba:	3d01      	subs	r5, #1
 80076bc:	930e      	str	r3, [sp, #56]	; 0x38
 80076be:	e76a      	b.n	8007596 <_dtoa_r+0x116>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e7b2      	b.n	800762a <_dtoa_r+0x1aa>
 80076c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80076c6:	e7b1      	b.n	800762c <_dtoa_r+0x1ac>
 80076c8:	9b04      	ldr	r3, [sp, #16]
 80076ca:	9a00      	ldr	r2, [sp, #0]
 80076cc:	1a9b      	subs	r3, r3, r2
 80076ce:	9304      	str	r3, [sp, #16]
 80076d0:	4253      	negs	r3, r2
 80076d2:	9307      	str	r3, [sp, #28]
 80076d4:	2300      	movs	r3, #0
 80076d6:	930a      	str	r3, [sp, #40]	; 0x28
 80076d8:	e7bf      	b.n	800765a <_dtoa_r+0x1da>
 80076da:	2300      	movs	r3, #0
 80076dc:	9308      	str	r3, [sp, #32]
 80076de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	dc55      	bgt.n	8007790 <_dtoa_r+0x310>
 80076e4:	2301      	movs	r3, #1
 80076e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076ea:	461a      	mov	r2, r3
 80076ec:	9209      	str	r2, [sp, #36]	; 0x24
 80076ee:	e00c      	b.n	800770a <_dtoa_r+0x28a>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e7f3      	b.n	80076dc <_dtoa_r+0x25c>
 80076f4:	2300      	movs	r3, #0
 80076f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076f8:	9308      	str	r3, [sp, #32]
 80076fa:	9b00      	ldr	r3, [sp, #0]
 80076fc:	4413      	add	r3, r2
 80076fe:	9302      	str	r3, [sp, #8]
 8007700:	3301      	adds	r3, #1
 8007702:	2b01      	cmp	r3, #1
 8007704:	9303      	str	r3, [sp, #12]
 8007706:	bfb8      	it	lt
 8007708:	2301      	movlt	r3, #1
 800770a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800770c:	2200      	movs	r2, #0
 800770e:	6042      	str	r2, [r0, #4]
 8007710:	2204      	movs	r2, #4
 8007712:	f102 0614 	add.w	r6, r2, #20
 8007716:	429e      	cmp	r6, r3
 8007718:	6841      	ldr	r1, [r0, #4]
 800771a:	d93d      	bls.n	8007798 <_dtoa_r+0x318>
 800771c:	4620      	mov	r0, r4
 800771e:	f000 fed7 	bl	80084d0 <_Balloc>
 8007722:	9001      	str	r0, [sp, #4]
 8007724:	2800      	cmp	r0, #0
 8007726:	d13b      	bne.n	80077a0 <_dtoa_r+0x320>
 8007728:	4b11      	ldr	r3, [pc, #68]	; (8007770 <_dtoa_r+0x2f0>)
 800772a:	4602      	mov	r2, r0
 800772c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007730:	e6c0      	b.n	80074b4 <_dtoa_r+0x34>
 8007732:	2301      	movs	r3, #1
 8007734:	e7df      	b.n	80076f6 <_dtoa_r+0x276>
 8007736:	bf00      	nop
 8007738:	636f4361 	.word	0x636f4361
 800773c:	3fd287a7 	.word	0x3fd287a7
 8007740:	8b60c8b3 	.word	0x8b60c8b3
 8007744:	3fc68a28 	.word	0x3fc68a28
 8007748:	509f79fb 	.word	0x509f79fb
 800774c:	3fd34413 	.word	0x3fd34413
 8007750:	080097ad 	.word	0x080097ad
 8007754:	080097c4 	.word	0x080097c4
 8007758:	7ff00000 	.word	0x7ff00000
 800775c:	080097a9 	.word	0x080097a9
 8007760:	080097a0 	.word	0x080097a0
 8007764:	0800977d 	.word	0x0800977d
 8007768:	3ff80000 	.word	0x3ff80000
 800776c:	08009918 	.word	0x08009918
 8007770:	0800981f 	.word	0x0800981f
 8007774:	2501      	movs	r5, #1
 8007776:	2300      	movs	r3, #0
 8007778:	9306      	str	r3, [sp, #24]
 800777a:	9508      	str	r5, [sp, #32]
 800777c:	f04f 33ff 	mov.w	r3, #4294967295
 8007780:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007784:	2200      	movs	r2, #0
 8007786:	2312      	movs	r3, #18
 8007788:	e7b0      	b.n	80076ec <_dtoa_r+0x26c>
 800778a:	2301      	movs	r3, #1
 800778c:	9308      	str	r3, [sp, #32]
 800778e:	e7f5      	b.n	800777c <_dtoa_r+0x2fc>
 8007790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007792:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007796:	e7b8      	b.n	800770a <_dtoa_r+0x28a>
 8007798:	3101      	adds	r1, #1
 800779a:	6041      	str	r1, [r0, #4]
 800779c:	0052      	lsls	r2, r2, #1
 800779e:	e7b8      	b.n	8007712 <_dtoa_r+0x292>
 80077a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a2:	9a01      	ldr	r2, [sp, #4]
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	9b03      	ldr	r3, [sp, #12]
 80077a8:	2b0e      	cmp	r3, #14
 80077aa:	f200 809d 	bhi.w	80078e8 <_dtoa_r+0x468>
 80077ae:	2d00      	cmp	r5, #0
 80077b0:	f000 809a 	beq.w	80078e8 <_dtoa_r+0x468>
 80077b4:	9b00      	ldr	r3, [sp, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	dd32      	ble.n	8007820 <_dtoa_r+0x3a0>
 80077ba:	4ab7      	ldr	r2, [pc, #732]	; (8007a98 <_dtoa_r+0x618>)
 80077bc:	f003 030f 	and.w	r3, r3, #15
 80077c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077c8:	9b00      	ldr	r3, [sp, #0]
 80077ca:	05d8      	lsls	r0, r3, #23
 80077cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80077d0:	d516      	bpl.n	8007800 <_dtoa_r+0x380>
 80077d2:	4bb2      	ldr	r3, [pc, #712]	; (8007a9c <_dtoa_r+0x61c>)
 80077d4:	ec51 0b19 	vmov	r0, r1, d9
 80077d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077dc:	f7f9 f83e 	bl	800085c <__aeabi_ddiv>
 80077e0:	f007 070f 	and.w	r7, r7, #15
 80077e4:	4682      	mov	sl, r0
 80077e6:	468b      	mov	fp, r1
 80077e8:	2503      	movs	r5, #3
 80077ea:	4eac      	ldr	r6, [pc, #688]	; (8007a9c <_dtoa_r+0x61c>)
 80077ec:	b957      	cbnz	r7, 8007804 <_dtoa_r+0x384>
 80077ee:	4642      	mov	r2, r8
 80077f0:	464b      	mov	r3, r9
 80077f2:	4650      	mov	r0, sl
 80077f4:	4659      	mov	r1, fp
 80077f6:	f7f9 f831 	bl	800085c <__aeabi_ddiv>
 80077fa:	4682      	mov	sl, r0
 80077fc:	468b      	mov	fp, r1
 80077fe:	e028      	b.n	8007852 <_dtoa_r+0x3d2>
 8007800:	2502      	movs	r5, #2
 8007802:	e7f2      	b.n	80077ea <_dtoa_r+0x36a>
 8007804:	07f9      	lsls	r1, r7, #31
 8007806:	d508      	bpl.n	800781a <_dtoa_r+0x39a>
 8007808:	4640      	mov	r0, r8
 800780a:	4649      	mov	r1, r9
 800780c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007810:	f7f8 fefa 	bl	8000608 <__aeabi_dmul>
 8007814:	3501      	adds	r5, #1
 8007816:	4680      	mov	r8, r0
 8007818:	4689      	mov	r9, r1
 800781a:	107f      	asrs	r7, r7, #1
 800781c:	3608      	adds	r6, #8
 800781e:	e7e5      	b.n	80077ec <_dtoa_r+0x36c>
 8007820:	f000 809b 	beq.w	800795a <_dtoa_r+0x4da>
 8007824:	9b00      	ldr	r3, [sp, #0]
 8007826:	4f9d      	ldr	r7, [pc, #628]	; (8007a9c <_dtoa_r+0x61c>)
 8007828:	425e      	negs	r6, r3
 800782a:	4b9b      	ldr	r3, [pc, #620]	; (8007a98 <_dtoa_r+0x618>)
 800782c:	f006 020f 	and.w	r2, r6, #15
 8007830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	ec51 0b19 	vmov	r0, r1, d9
 800783c:	f7f8 fee4 	bl	8000608 <__aeabi_dmul>
 8007840:	1136      	asrs	r6, r6, #4
 8007842:	4682      	mov	sl, r0
 8007844:	468b      	mov	fp, r1
 8007846:	2300      	movs	r3, #0
 8007848:	2502      	movs	r5, #2
 800784a:	2e00      	cmp	r6, #0
 800784c:	d17a      	bne.n	8007944 <_dtoa_r+0x4c4>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1d3      	bne.n	80077fa <_dtoa_r+0x37a>
 8007852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 8082 	beq.w	800795e <_dtoa_r+0x4de>
 800785a:	4b91      	ldr	r3, [pc, #580]	; (8007aa0 <_dtoa_r+0x620>)
 800785c:	2200      	movs	r2, #0
 800785e:	4650      	mov	r0, sl
 8007860:	4659      	mov	r1, fp
 8007862:	f7f9 f943 	bl	8000aec <__aeabi_dcmplt>
 8007866:	2800      	cmp	r0, #0
 8007868:	d079      	beq.n	800795e <_dtoa_r+0x4de>
 800786a:	9b03      	ldr	r3, [sp, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d076      	beq.n	800795e <_dtoa_r+0x4de>
 8007870:	9b02      	ldr	r3, [sp, #8]
 8007872:	2b00      	cmp	r3, #0
 8007874:	dd36      	ble.n	80078e4 <_dtoa_r+0x464>
 8007876:	9b00      	ldr	r3, [sp, #0]
 8007878:	4650      	mov	r0, sl
 800787a:	4659      	mov	r1, fp
 800787c:	1e5f      	subs	r7, r3, #1
 800787e:	2200      	movs	r2, #0
 8007880:	4b88      	ldr	r3, [pc, #544]	; (8007aa4 <_dtoa_r+0x624>)
 8007882:	f7f8 fec1 	bl	8000608 <__aeabi_dmul>
 8007886:	9e02      	ldr	r6, [sp, #8]
 8007888:	4682      	mov	sl, r0
 800788a:	468b      	mov	fp, r1
 800788c:	3501      	adds	r5, #1
 800788e:	4628      	mov	r0, r5
 8007890:	f7f8 fe50 	bl	8000534 <__aeabi_i2d>
 8007894:	4652      	mov	r2, sl
 8007896:	465b      	mov	r3, fp
 8007898:	f7f8 feb6 	bl	8000608 <__aeabi_dmul>
 800789c:	4b82      	ldr	r3, [pc, #520]	; (8007aa8 <_dtoa_r+0x628>)
 800789e:	2200      	movs	r2, #0
 80078a0:	f7f8 fcfc 	bl	800029c <__adddf3>
 80078a4:	46d0      	mov	r8, sl
 80078a6:	46d9      	mov	r9, fp
 80078a8:	4682      	mov	sl, r0
 80078aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80078ae:	2e00      	cmp	r6, #0
 80078b0:	d158      	bne.n	8007964 <_dtoa_r+0x4e4>
 80078b2:	4b7e      	ldr	r3, [pc, #504]	; (8007aac <_dtoa_r+0x62c>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	4640      	mov	r0, r8
 80078b8:	4649      	mov	r1, r9
 80078ba:	f7f8 fced 	bl	8000298 <__aeabi_dsub>
 80078be:	4652      	mov	r2, sl
 80078c0:	465b      	mov	r3, fp
 80078c2:	4680      	mov	r8, r0
 80078c4:	4689      	mov	r9, r1
 80078c6:	f7f9 f92f 	bl	8000b28 <__aeabi_dcmpgt>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	f040 8295 	bne.w	8007dfa <_dtoa_r+0x97a>
 80078d0:	4652      	mov	r2, sl
 80078d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80078d6:	4640      	mov	r0, r8
 80078d8:	4649      	mov	r1, r9
 80078da:	f7f9 f907 	bl	8000aec <__aeabi_dcmplt>
 80078de:	2800      	cmp	r0, #0
 80078e0:	f040 8289 	bne.w	8007df6 <_dtoa_r+0x976>
 80078e4:	ec5b ab19 	vmov	sl, fp, d9
 80078e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f2c0 8148 	blt.w	8007b80 <_dtoa_r+0x700>
 80078f0:	9a00      	ldr	r2, [sp, #0]
 80078f2:	2a0e      	cmp	r2, #14
 80078f4:	f300 8144 	bgt.w	8007b80 <_dtoa_r+0x700>
 80078f8:	4b67      	ldr	r3, [pc, #412]	; (8007a98 <_dtoa_r+0x618>)
 80078fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007904:	2b00      	cmp	r3, #0
 8007906:	f280 80d5 	bge.w	8007ab4 <_dtoa_r+0x634>
 800790a:	9b03      	ldr	r3, [sp, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f300 80d1 	bgt.w	8007ab4 <_dtoa_r+0x634>
 8007912:	f040 826f 	bne.w	8007df4 <_dtoa_r+0x974>
 8007916:	4b65      	ldr	r3, [pc, #404]	; (8007aac <_dtoa_r+0x62c>)
 8007918:	2200      	movs	r2, #0
 800791a:	4640      	mov	r0, r8
 800791c:	4649      	mov	r1, r9
 800791e:	f7f8 fe73 	bl	8000608 <__aeabi_dmul>
 8007922:	4652      	mov	r2, sl
 8007924:	465b      	mov	r3, fp
 8007926:	f7f9 f8f5 	bl	8000b14 <__aeabi_dcmpge>
 800792a:	9e03      	ldr	r6, [sp, #12]
 800792c:	4637      	mov	r7, r6
 800792e:	2800      	cmp	r0, #0
 8007930:	f040 8245 	bne.w	8007dbe <_dtoa_r+0x93e>
 8007934:	9d01      	ldr	r5, [sp, #4]
 8007936:	2331      	movs	r3, #49	; 0x31
 8007938:	f805 3b01 	strb.w	r3, [r5], #1
 800793c:	9b00      	ldr	r3, [sp, #0]
 800793e:	3301      	adds	r3, #1
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	e240      	b.n	8007dc6 <_dtoa_r+0x946>
 8007944:	07f2      	lsls	r2, r6, #31
 8007946:	d505      	bpl.n	8007954 <_dtoa_r+0x4d4>
 8007948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794c:	f7f8 fe5c 	bl	8000608 <__aeabi_dmul>
 8007950:	3501      	adds	r5, #1
 8007952:	2301      	movs	r3, #1
 8007954:	1076      	asrs	r6, r6, #1
 8007956:	3708      	adds	r7, #8
 8007958:	e777      	b.n	800784a <_dtoa_r+0x3ca>
 800795a:	2502      	movs	r5, #2
 800795c:	e779      	b.n	8007852 <_dtoa_r+0x3d2>
 800795e:	9f00      	ldr	r7, [sp, #0]
 8007960:	9e03      	ldr	r6, [sp, #12]
 8007962:	e794      	b.n	800788e <_dtoa_r+0x40e>
 8007964:	9901      	ldr	r1, [sp, #4]
 8007966:	4b4c      	ldr	r3, [pc, #304]	; (8007a98 <_dtoa_r+0x618>)
 8007968:	4431      	add	r1, r6
 800796a:	910d      	str	r1, [sp, #52]	; 0x34
 800796c:	9908      	ldr	r1, [sp, #32]
 800796e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007972:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007976:	2900      	cmp	r1, #0
 8007978:	d043      	beq.n	8007a02 <_dtoa_r+0x582>
 800797a:	494d      	ldr	r1, [pc, #308]	; (8007ab0 <_dtoa_r+0x630>)
 800797c:	2000      	movs	r0, #0
 800797e:	f7f8 ff6d 	bl	800085c <__aeabi_ddiv>
 8007982:	4652      	mov	r2, sl
 8007984:	465b      	mov	r3, fp
 8007986:	f7f8 fc87 	bl	8000298 <__aeabi_dsub>
 800798a:	9d01      	ldr	r5, [sp, #4]
 800798c:	4682      	mov	sl, r0
 800798e:	468b      	mov	fp, r1
 8007990:	4649      	mov	r1, r9
 8007992:	4640      	mov	r0, r8
 8007994:	f7f9 f8e8 	bl	8000b68 <__aeabi_d2iz>
 8007998:	4606      	mov	r6, r0
 800799a:	f7f8 fdcb 	bl	8000534 <__aeabi_i2d>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4640      	mov	r0, r8
 80079a4:	4649      	mov	r1, r9
 80079a6:	f7f8 fc77 	bl	8000298 <__aeabi_dsub>
 80079aa:	3630      	adds	r6, #48	; 0x30
 80079ac:	f805 6b01 	strb.w	r6, [r5], #1
 80079b0:	4652      	mov	r2, sl
 80079b2:	465b      	mov	r3, fp
 80079b4:	4680      	mov	r8, r0
 80079b6:	4689      	mov	r9, r1
 80079b8:	f7f9 f898 	bl	8000aec <__aeabi_dcmplt>
 80079bc:	2800      	cmp	r0, #0
 80079be:	d163      	bne.n	8007a88 <_dtoa_r+0x608>
 80079c0:	4642      	mov	r2, r8
 80079c2:	464b      	mov	r3, r9
 80079c4:	4936      	ldr	r1, [pc, #216]	; (8007aa0 <_dtoa_r+0x620>)
 80079c6:	2000      	movs	r0, #0
 80079c8:	f7f8 fc66 	bl	8000298 <__aeabi_dsub>
 80079cc:	4652      	mov	r2, sl
 80079ce:	465b      	mov	r3, fp
 80079d0:	f7f9 f88c 	bl	8000aec <__aeabi_dcmplt>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f040 80b5 	bne.w	8007b44 <_dtoa_r+0x6c4>
 80079da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079dc:	429d      	cmp	r5, r3
 80079de:	d081      	beq.n	80078e4 <_dtoa_r+0x464>
 80079e0:	4b30      	ldr	r3, [pc, #192]	; (8007aa4 <_dtoa_r+0x624>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	4650      	mov	r0, sl
 80079e6:	4659      	mov	r1, fp
 80079e8:	f7f8 fe0e 	bl	8000608 <__aeabi_dmul>
 80079ec:	4b2d      	ldr	r3, [pc, #180]	; (8007aa4 <_dtoa_r+0x624>)
 80079ee:	4682      	mov	sl, r0
 80079f0:	468b      	mov	fp, r1
 80079f2:	4640      	mov	r0, r8
 80079f4:	4649      	mov	r1, r9
 80079f6:	2200      	movs	r2, #0
 80079f8:	f7f8 fe06 	bl	8000608 <__aeabi_dmul>
 80079fc:	4680      	mov	r8, r0
 80079fe:	4689      	mov	r9, r1
 8007a00:	e7c6      	b.n	8007990 <_dtoa_r+0x510>
 8007a02:	4650      	mov	r0, sl
 8007a04:	4659      	mov	r1, fp
 8007a06:	f7f8 fdff 	bl	8000608 <__aeabi_dmul>
 8007a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a0c:	9d01      	ldr	r5, [sp, #4]
 8007a0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a10:	4682      	mov	sl, r0
 8007a12:	468b      	mov	fp, r1
 8007a14:	4649      	mov	r1, r9
 8007a16:	4640      	mov	r0, r8
 8007a18:	f7f9 f8a6 	bl	8000b68 <__aeabi_d2iz>
 8007a1c:	4606      	mov	r6, r0
 8007a1e:	f7f8 fd89 	bl	8000534 <__aeabi_i2d>
 8007a22:	3630      	adds	r6, #48	; 0x30
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4640      	mov	r0, r8
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	f7f8 fc34 	bl	8000298 <__aeabi_dsub>
 8007a30:	f805 6b01 	strb.w	r6, [r5], #1
 8007a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a36:	429d      	cmp	r5, r3
 8007a38:	4680      	mov	r8, r0
 8007a3a:	4689      	mov	r9, r1
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	d124      	bne.n	8007a8c <_dtoa_r+0x60c>
 8007a42:	4b1b      	ldr	r3, [pc, #108]	; (8007ab0 <_dtoa_r+0x630>)
 8007a44:	4650      	mov	r0, sl
 8007a46:	4659      	mov	r1, fp
 8007a48:	f7f8 fc28 	bl	800029c <__adddf3>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4640      	mov	r0, r8
 8007a52:	4649      	mov	r1, r9
 8007a54:	f7f9 f868 	bl	8000b28 <__aeabi_dcmpgt>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d173      	bne.n	8007b44 <_dtoa_r+0x6c4>
 8007a5c:	4652      	mov	r2, sl
 8007a5e:	465b      	mov	r3, fp
 8007a60:	4913      	ldr	r1, [pc, #76]	; (8007ab0 <_dtoa_r+0x630>)
 8007a62:	2000      	movs	r0, #0
 8007a64:	f7f8 fc18 	bl	8000298 <__aeabi_dsub>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	4649      	mov	r1, r9
 8007a70:	f7f9 f83c 	bl	8000aec <__aeabi_dcmplt>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	f43f af35 	beq.w	80078e4 <_dtoa_r+0x464>
 8007a7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a7c:	1e6b      	subs	r3, r5, #1
 8007a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a84:	2b30      	cmp	r3, #48	; 0x30
 8007a86:	d0f8      	beq.n	8007a7a <_dtoa_r+0x5fa>
 8007a88:	9700      	str	r7, [sp, #0]
 8007a8a:	e049      	b.n	8007b20 <_dtoa_r+0x6a0>
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <_dtoa_r+0x624>)
 8007a8e:	f7f8 fdbb 	bl	8000608 <__aeabi_dmul>
 8007a92:	4680      	mov	r8, r0
 8007a94:	4689      	mov	r9, r1
 8007a96:	e7bd      	b.n	8007a14 <_dtoa_r+0x594>
 8007a98:	08009918 	.word	0x08009918
 8007a9c:	080098f0 	.word	0x080098f0
 8007aa0:	3ff00000 	.word	0x3ff00000
 8007aa4:	40240000 	.word	0x40240000
 8007aa8:	401c0000 	.word	0x401c0000
 8007aac:	40140000 	.word	0x40140000
 8007ab0:	3fe00000 	.word	0x3fe00000
 8007ab4:	9d01      	ldr	r5, [sp, #4]
 8007ab6:	4656      	mov	r6, sl
 8007ab8:	465f      	mov	r7, fp
 8007aba:	4642      	mov	r2, r8
 8007abc:	464b      	mov	r3, r9
 8007abe:	4630      	mov	r0, r6
 8007ac0:	4639      	mov	r1, r7
 8007ac2:	f7f8 fecb 	bl	800085c <__aeabi_ddiv>
 8007ac6:	f7f9 f84f 	bl	8000b68 <__aeabi_d2iz>
 8007aca:	4682      	mov	sl, r0
 8007acc:	f7f8 fd32 	bl	8000534 <__aeabi_i2d>
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	f7f8 fd98 	bl	8000608 <__aeabi_dmul>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	4630      	mov	r0, r6
 8007ade:	4639      	mov	r1, r7
 8007ae0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007ae4:	f7f8 fbd8 	bl	8000298 <__aeabi_dsub>
 8007ae8:	f805 6b01 	strb.w	r6, [r5], #1
 8007aec:	9e01      	ldr	r6, [sp, #4]
 8007aee:	9f03      	ldr	r7, [sp, #12]
 8007af0:	1bae      	subs	r6, r5, r6
 8007af2:	42b7      	cmp	r7, r6
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	d135      	bne.n	8007b66 <_dtoa_r+0x6e6>
 8007afa:	f7f8 fbcf 	bl	800029c <__adddf3>
 8007afe:	4642      	mov	r2, r8
 8007b00:	464b      	mov	r3, r9
 8007b02:	4606      	mov	r6, r0
 8007b04:	460f      	mov	r7, r1
 8007b06:	f7f9 f80f 	bl	8000b28 <__aeabi_dcmpgt>
 8007b0a:	b9d0      	cbnz	r0, 8007b42 <_dtoa_r+0x6c2>
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	464b      	mov	r3, r9
 8007b10:	4630      	mov	r0, r6
 8007b12:	4639      	mov	r1, r7
 8007b14:	f7f8 ffe0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b18:	b110      	cbz	r0, 8007b20 <_dtoa_r+0x6a0>
 8007b1a:	f01a 0f01 	tst.w	sl, #1
 8007b1e:	d110      	bne.n	8007b42 <_dtoa_r+0x6c2>
 8007b20:	4620      	mov	r0, r4
 8007b22:	ee18 1a10 	vmov	r1, s16
 8007b26:	f000 fd13 	bl	8008550 <_Bfree>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	9800      	ldr	r0, [sp, #0]
 8007b2e:	702b      	strb	r3, [r5, #0]
 8007b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b32:	3001      	adds	r0, #1
 8007b34:	6018      	str	r0, [r3, #0]
 8007b36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f43f acf1 	beq.w	8007520 <_dtoa_r+0xa0>
 8007b3e:	601d      	str	r5, [r3, #0]
 8007b40:	e4ee      	b.n	8007520 <_dtoa_r+0xa0>
 8007b42:	9f00      	ldr	r7, [sp, #0]
 8007b44:	462b      	mov	r3, r5
 8007b46:	461d      	mov	r5, r3
 8007b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b4c:	2a39      	cmp	r2, #57	; 0x39
 8007b4e:	d106      	bne.n	8007b5e <_dtoa_r+0x6de>
 8007b50:	9a01      	ldr	r2, [sp, #4]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d1f7      	bne.n	8007b46 <_dtoa_r+0x6c6>
 8007b56:	9901      	ldr	r1, [sp, #4]
 8007b58:	2230      	movs	r2, #48	; 0x30
 8007b5a:	3701      	adds	r7, #1
 8007b5c:	700a      	strb	r2, [r1, #0]
 8007b5e:	781a      	ldrb	r2, [r3, #0]
 8007b60:	3201      	adds	r2, #1
 8007b62:	701a      	strb	r2, [r3, #0]
 8007b64:	e790      	b.n	8007a88 <_dtoa_r+0x608>
 8007b66:	4ba6      	ldr	r3, [pc, #664]	; (8007e00 <_dtoa_r+0x980>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f7f8 fd4d 	bl	8000608 <__aeabi_dmul>
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2300      	movs	r3, #0
 8007b72:	4606      	mov	r6, r0
 8007b74:	460f      	mov	r7, r1
 8007b76:	f7f8 ffaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d09d      	beq.n	8007aba <_dtoa_r+0x63a>
 8007b7e:	e7cf      	b.n	8007b20 <_dtoa_r+0x6a0>
 8007b80:	9a08      	ldr	r2, [sp, #32]
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	f000 80d7 	beq.w	8007d36 <_dtoa_r+0x8b6>
 8007b88:	9a06      	ldr	r2, [sp, #24]
 8007b8a:	2a01      	cmp	r2, #1
 8007b8c:	f300 80ba 	bgt.w	8007d04 <_dtoa_r+0x884>
 8007b90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b92:	2a00      	cmp	r2, #0
 8007b94:	f000 80b2 	beq.w	8007cfc <_dtoa_r+0x87c>
 8007b98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b9c:	9e07      	ldr	r6, [sp, #28]
 8007b9e:	9d04      	ldr	r5, [sp, #16]
 8007ba0:	9a04      	ldr	r2, [sp, #16]
 8007ba2:	441a      	add	r2, r3
 8007ba4:	9204      	str	r2, [sp, #16]
 8007ba6:	9a05      	ldr	r2, [sp, #20]
 8007ba8:	2101      	movs	r1, #1
 8007baa:	441a      	add	r2, r3
 8007bac:	4620      	mov	r0, r4
 8007bae:	9205      	str	r2, [sp, #20]
 8007bb0:	f000 fd86 	bl	80086c0 <__i2b>
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	2d00      	cmp	r5, #0
 8007bb8:	dd0c      	ble.n	8007bd4 <_dtoa_r+0x754>
 8007bba:	9b05      	ldr	r3, [sp, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	dd09      	ble.n	8007bd4 <_dtoa_r+0x754>
 8007bc0:	42ab      	cmp	r3, r5
 8007bc2:	9a04      	ldr	r2, [sp, #16]
 8007bc4:	bfa8      	it	ge
 8007bc6:	462b      	movge	r3, r5
 8007bc8:	1ad2      	subs	r2, r2, r3
 8007bca:	9204      	str	r2, [sp, #16]
 8007bcc:	9a05      	ldr	r2, [sp, #20]
 8007bce:	1aed      	subs	r5, r5, r3
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	9305      	str	r3, [sp, #20]
 8007bd4:	9b07      	ldr	r3, [sp, #28]
 8007bd6:	b31b      	cbz	r3, 8007c20 <_dtoa_r+0x7a0>
 8007bd8:	9b08      	ldr	r3, [sp, #32]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 80af 	beq.w	8007d3e <_dtoa_r+0x8be>
 8007be0:	2e00      	cmp	r6, #0
 8007be2:	dd13      	ble.n	8007c0c <_dtoa_r+0x78c>
 8007be4:	4639      	mov	r1, r7
 8007be6:	4632      	mov	r2, r6
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 fe29 	bl	8008840 <__pow5mult>
 8007bee:	ee18 2a10 	vmov	r2, s16
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 fd78 	bl	80086ec <__multiply>
 8007bfc:	ee18 1a10 	vmov	r1, s16
 8007c00:	4680      	mov	r8, r0
 8007c02:	4620      	mov	r0, r4
 8007c04:	f000 fca4 	bl	8008550 <_Bfree>
 8007c08:	ee08 8a10 	vmov	s16, r8
 8007c0c:	9b07      	ldr	r3, [sp, #28]
 8007c0e:	1b9a      	subs	r2, r3, r6
 8007c10:	d006      	beq.n	8007c20 <_dtoa_r+0x7a0>
 8007c12:	ee18 1a10 	vmov	r1, s16
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 fe12 	bl	8008840 <__pow5mult>
 8007c1c:	ee08 0a10 	vmov	s16, r0
 8007c20:	2101      	movs	r1, #1
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 fd4c 	bl	80086c0 <__i2b>
 8007c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	f340 8088 	ble.w	8007d42 <_dtoa_r+0x8c2>
 8007c32:	461a      	mov	r2, r3
 8007c34:	4601      	mov	r1, r0
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 fe02 	bl	8008840 <__pow5mult>
 8007c3c:	9b06      	ldr	r3, [sp, #24]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	4606      	mov	r6, r0
 8007c42:	f340 8081 	ble.w	8007d48 <_dtoa_r+0x8c8>
 8007c46:	f04f 0800 	mov.w	r8, #0
 8007c4a:	6933      	ldr	r3, [r6, #16]
 8007c4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c50:	6918      	ldr	r0, [r3, #16]
 8007c52:	f000 fce5 	bl	8008620 <__hi0bits>
 8007c56:	f1c0 0020 	rsb	r0, r0, #32
 8007c5a:	9b05      	ldr	r3, [sp, #20]
 8007c5c:	4418      	add	r0, r3
 8007c5e:	f010 001f 	ands.w	r0, r0, #31
 8007c62:	f000 8092 	beq.w	8007d8a <_dtoa_r+0x90a>
 8007c66:	f1c0 0320 	rsb	r3, r0, #32
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	f340 808a 	ble.w	8007d84 <_dtoa_r+0x904>
 8007c70:	f1c0 001c 	rsb	r0, r0, #28
 8007c74:	9b04      	ldr	r3, [sp, #16]
 8007c76:	4403      	add	r3, r0
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	9b05      	ldr	r3, [sp, #20]
 8007c7c:	4403      	add	r3, r0
 8007c7e:	4405      	add	r5, r0
 8007c80:	9305      	str	r3, [sp, #20]
 8007c82:	9b04      	ldr	r3, [sp, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	dd07      	ble.n	8007c98 <_dtoa_r+0x818>
 8007c88:	ee18 1a10 	vmov	r1, s16
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 fe30 	bl	80088f4 <__lshift>
 8007c94:	ee08 0a10 	vmov	s16, r0
 8007c98:	9b05      	ldr	r3, [sp, #20]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	dd05      	ble.n	8007caa <_dtoa_r+0x82a>
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 fe26 	bl	80088f4 <__lshift>
 8007ca8:	4606      	mov	r6, r0
 8007caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d06e      	beq.n	8007d8e <_dtoa_r+0x90e>
 8007cb0:	ee18 0a10 	vmov	r0, s16
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	f000 fe8d 	bl	80089d4 <__mcmp>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	da67      	bge.n	8007d8e <_dtoa_r+0x90e>
 8007cbe:	9b00      	ldr	r3, [sp, #0]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	ee18 1a10 	vmov	r1, s16
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	220a      	movs	r2, #10
 8007cca:	2300      	movs	r3, #0
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 fc61 	bl	8008594 <__multadd>
 8007cd2:	9b08      	ldr	r3, [sp, #32]
 8007cd4:	ee08 0a10 	vmov	s16, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 81b1 	beq.w	8008040 <_dtoa_r+0xbc0>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4639      	mov	r1, r7
 8007ce2:	220a      	movs	r2, #10
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f000 fc55 	bl	8008594 <__multadd>
 8007cea:	9b02      	ldr	r3, [sp, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	4607      	mov	r7, r0
 8007cf0:	f300 808e 	bgt.w	8007e10 <_dtoa_r+0x990>
 8007cf4:	9b06      	ldr	r3, [sp, #24]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	dc51      	bgt.n	8007d9e <_dtoa_r+0x91e>
 8007cfa:	e089      	b.n	8007e10 <_dtoa_r+0x990>
 8007cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d02:	e74b      	b.n	8007b9c <_dtoa_r+0x71c>
 8007d04:	9b03      	ldr	r3, [sp, #12]
 8007d06:	1e5e      	subs	r6, r3, #1
 8007d08:	9b07      	ldr	r3, [sp, #28]
 8007d0a:	42b3      	cmp	r3, r6
 8007d0c:	bfbf      	itttt	lt
 8007d0e:	9b07      	ldrlt	r3, [sp, #28]
 8007d10:	9607      	strlt	r6, [sp, #28]
 8007d12:	1af2      	sublt	r2, r6, r3
 8007d14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d16:	bfb6      	itet	lt
 8007d18:	189b      	addlt	r3, r3, r2
 8007d1a:	1b9e      	subge	r6, r3, r6
 8007d1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007d1e:	9b03      	ldr	r3, [sp, #12]
 8007d20:	bfb8      	it	lt
 8007d22:	2600      	movlt	r6, #0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bfb7      	itett	lt
 8007d28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007d2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007d30:	1a9d      	sublt	r5, r3, r2
 8007d32:	2300      	movlt	r3, #0
 8007d34:	e734      	b.n	8007ba0 <_dtoa_r+0x720>
 8007d36:	9e07      	ldr	r6, [sp, #28]
 8007d38:	9d04      	ldr	r5, [sp, #16]
 8007d3a:	9f08      	ldr	r7, [sp, #32]
 8007d3c:	e73b      	b.n	8007bb6 <_dtoa_r+0x736>
 8007d3e:	9a07      	ldr	r2, [sp, #28]
 8007d40:	e767      	b.n	8007c12 <_dtoa_r+0x792>
 8007d42:	9b06      	ldr	r3, [sp, #24]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	dc18      	bgt.n	8007d7a <_dtoa_r+0x8fa>
 8007d48:	f1ba 0f00 	cmp.w	sl, #0
 8007d4c:	d115      	bne.n	8007d7a <_dtoa_r+0x8fa>
 8007d4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d52:	b993      	cbnz	r3, 8007d7a <_dtoa_r+0x8fa>
 8007d54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d58:	0d1b      	lsrs	r3, r3, #20
 8007d5a:	051b      	lsls	r3, r3, #20
 8007d5c:	b183      	cbz	r3, 8007d80 <_dtoa_r+0x900>
 8007d5e:	9b04      	ldr	r3, [sp, #16]
 8007d60:	3301      	adds	r3, #1
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	9b05      	ldr	r3, [sp, #20]
 8007d66:	3301      	adds	r3, #1
 8007d68:	9305      	str	r3, [sp, #20]
 8007d6a:	f04f 0801 	mov.w	r8, #1
 8007d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f47f af6a 	bne.w	8007c4a <_dtoa_r+0x7ca>
 8007d76:	2001      	movs	r0, #1
 8007d78:	e76f      	b.n	8007c5a <_dtoa_r+0x7da>
 8007d7a:	f04f 0800 	mov.w	r8, #0
 8007d7e:	e7f6      	b.n	8007d6e <_dtoa_r+0x8ee>
 8007d80:	4698      	mov	r8, r3
 8007d82:	e7f4      	b.n	8007d6e <_dtoa_r+0x8ee>
 8007d84:	f43f af7d 	beq.w	8007c82 <_dtoa_r+0x802>
 8007d88:	4618      	mov	r0, r3
 8007d8a:	301c      	adds	r0, #28
 8007d8c:	e772      	b.n	8007c74 <_dtoa_r+0x7f4>
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	dc37      	bgt.n	8007e04 <_dtoa_r+0x984>
 8007d94:	9b06      	ldr	r3, [sp, #24]
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	dd34      	ble.n	8007e04 <_dtoa_r+0x984>
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	9302      	str	r3, [sp, #8]
 8007d9e:	9b02      	ldr	r3, [sp, #8]
 8007da0:	b96b      	cbnz	r3, 8007dbe <_dtoa_r+0x93e>
 8007da2:	4631      	mov	r1, r6
 8007da4:	2205      	movs	r2, #5
 8007da6:	4620      	mov	r0, r4
 8007da8:	f000 fbf4 	bl	8008594 <__multadd>
 8007dac:	4601      	mov	r1, r0
 8007dae:	4606      	mov	r6, r0
 8007db0:	ee18 0a10 	vmov	r0, s16
 8007db4:	f000 fe0e 	bl	80089d4 <__mcmp>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	f73f adbb 	bgt.w	8007934 <_dtoa_r+0x4b4>
 8007dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc0:	9d01      	ldr	r5, [sp, #4]
 8007dc2:	43db      	mvns	r3, r3
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	f04f 0800 	mov.w	r8, #0
 8007dca:	4631      	mov	r1, r6
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 fbbf 	bl	8008550 <_Bfree>
 8007dd2:	2f00      	cmp	r7, #0
 8007dd4:	f43f aea4 	beq.w	8007b20 <_dtoa_r+0x6a0>
 8007dd8:	f1b8 0f00 	cmp.w	r8, #0
 8007ddc:	d005      	beq.n	8007dea <_dtoa_r+0x96a>
 8007dde:	45b8      	cmp	r8, r7
 8007de0:	d003      	beq.n	8007dea <_dtoa_r+0x96a>
 8007de2:	4641      	mov	r1, r8
 8007de4:	4620      	mov	r0, r4
 8007de6:	f000 fbb3 	bl	8008550 <_Bfree>
 8007dea:	4639      	mov	r1, r7
 8007dec:	4620      	mov	r0, r4
 8007dee:	f000 fbaf 	bl	8008550 <_Bfree>
 8007df2:	e695      	b.n	8007b20 <_dtoa_r+0x6a0>
 8007df4:	2600      	movs	r6, #0
 8007df6:	4637      	mov	r7, r6
 8007df8:	e7e1      	b.n	8007dbe <_dtoa_r+0x93e>
 8007dfa:	9700      	str	r7, [sp, #0]
 8007dfc:	4637      	mov	r7, r6
 8007dfe:	e599      	b.n	8007934 <_dtoa_r+0x4b4>
 8007e00:	40240000 	.word	0x40240000
 8007e04:	9b08      	ldr	r3, [sp, #32]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 80ca 	beq.w	8007fa0 <_dtoa_r+0xb20>
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	9302      	str	r3, [sp, #8]
 8007e10:	2d00      	cmp	r5, #0
 8007e12:	dd05      	ble.n	8007e20 <_dtoa_r+0x9a0>
 8007e14:	4639      	mov	r1, r7
 8007e16:	462a      	mov	r2, r5
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 fd6b 	bl	80088f4 <__lshift>
 8007e1e:	4607      	mov	r7, r0
 8007e20:	f1b8 0f00 	cmp.w	r8, #0
 8007e24:	d05b      	beq.n	8007ede <_dtoa_r+0xa5e>
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 fb51 	bl	80084d0 <_Balloc>
 8007e2e:	4605      	mov	r5, r0
 8007e30:	b928      	cbnz	r0, 8007e3e <_dtoa_r+0x9be>
 8007e32:	4b87      	ldr	r3, [pc, #540]	; (8008050 <_dtoa_r+0xbd0>)
 8007e34:	4602      	mov	r2, r0
 8007e36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e3a:	f7ff bb3b 	b.w	80074b4 <_dtoa_r+0x34>
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	3202      	adds	r2, #2
 8007e42:	0092      	lsls	r2, r2, #2
 8007e44:	f107 010c 	add.w	r1, r7, #12
 8007e48:	300c      	adds	r0, #12
 8007e4a:	f000 fb33 	bl	80084b4 <memcpy>
 8007e4e:	2201      	movs	r2, #1
 8007e50:	4629      	mov	r1, r5
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 fd4e 	bl	80088f4 <__lshift>
 8007e58:	9b01      	ldr	r3, [sp, #4]
 8007e5a:	f103 0901 	add.w	r9, r3, #1
 8007e5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007e62:	4413      	add	r3, r2
 8007e64:	9305      	str	r3, [sp, #20]
 8007e66:	f00a 0301 	and.w	r3, sl, #1
 8007e6a:	46b8      	mov	r8, r7
 8007e6c:	9304      	str	r3, [sp, #16]
 8007e6e:	4607      	mov	r7, r0
 8007e70:	4631      	mov	r1, r6
 8007e72:	ee18 0a10 	vmov	r0, s16
 8007e76:	f7ff fa77 	bl	8007368 <quorem>
 8007e7a:	4641      	mov	r1, r8
 8007e7c:	9002      	str	r0, [sp, #8]
 8007e7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e82:	ee18 0a10 	vmov	r0, s16
 8007e86:	f000 fda5 	bl	80089d4 <__mcmp>
 8007e8a:	463a      	mov	r2, r7
 8007e8c:	9003      	str	r0, [sp, #12]
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4620      	mov	r0, r4
 8007e92:	f000 fdbb 	bl	8008a0c <__mdiff>
 8007e96:	68c2      	ldr	r2, [r0, #12]
 8007e98:	f109 3bff 	add.w	fp, r9, #4294967295
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	bb02      	cbnz	r2, 8007ee2 <_dtoa_r+0xa62>
 8007ea0:	4601      	mov	r1, r0
 8007ea2:	ee18 0a10 	vmov	r0, s16
 8007ea6:	f000 fd95 	bl	80089d4 <__mcmp>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	4629      	mov	r1, r5
 8007eae:	4620      	mov	r0, r4
 8007eb0:	9207      	str	r2, [sp, #28]
 8007eb2:	f000 fb4d 	bl	8008550 <_Bfree>
 8007eb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007eba:	ea43 0102 	orr.w	r1, r3, r2
 8007ebe:	9b04      	ldr	r3, [sp, #16]
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	464d      	mov	r5, r9
 8007ec4:	d10f      	bne.n	8007ee6 <_dtoa_r+0xa66>
 8007ec6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007eca:	d02a      	beq.n	8007f22 <_dtoa_r+0xaa2>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	dd02      	ble.n	8007ed8 <_dtoa_r+0xa58>
 8007ed2:	9b02      	ldr	r3, [sp, #8]
 8007ed4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007ed8:	f88b a000 	strb.w	sl, [fp]
 8007edc:	e775      	b.n	8007dca <_dtoa_r+0x94a>
 8007ede:	4638      	mov	r0, r7
 8007ee0:	e7ba      	b.n	8007e58 <_dtoa_r+0x9d8>
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	e7e2      	b.n	8007eac <_dtoa_r+0xa2c>
 8007ee6:	9b03      	ldr	r3, [sp, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	db04      	blt.n	8007ef6 <_dtoa_r+0xa76>
 8007eec:	9906      	ldr	r1, [sp, #24]
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	9904      	ldr	r1, [sp, #16]
 8007ef2:	430b      	orrs	r3, r1
 8007ef4:	d122      	bne.n	8007f3c <_dtoa_r+0xabc>
 8007ef6:	2a00      	cmp	r2, #0
 8007ef8:	ddee      	ble.n	8007ed8 <_dtoa_r+0xa58>
 8007efa:	ee18 1a10 	vmov	r1, s16
 8007efe:	2201      	movs	r2, #1
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 fcf7 	bl	80088f4 <__lshift>
 8007f06:	4631      	mov	r1, r6
 8007f08:	ee08 0a10 	vmov	s16, r0
 8007f0c:	f000 fd62 	bl	80089d4 <__mcmp>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	dc03      	bgt.n	8007f1c <_dtoa_r+0xa9c>
 8007f14:	d1e0      	bne.n	8007ed8 <_dtoa_r+0xa58>
 8007f16:	f01a 0f01 	tst.w	sl, #1
 8007f1a:	d0dd      	beq.n	8007ed8 <_dtoa_r+0xa58>
 8007f1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f20:	d1d7      	bne.n	8007ed2 <_dtoa_r+0xa52>
 8007f22:	2339      	movs	r3, #57	; 0x39
 8007f24:	f88b 3000 	strb.w	r3, [fp]
 8007f28:	462b      	mov	r3, r5
 8007f2a:	461d      	mov	r5, r3
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f32:	2a39      	cmp	r2, #57	; 0x39
 8007f34:	d071      	beq.n	800801a <_dtoa_r+0xb9a>
 8007f36:	3201      	adds	r2, #1
 8007f38:	701a      	strb	r2, [r3, #0]
 8007f3a:	e746      	b.n	8007dca <_dtoa_r+0x94a>
 8007f3c:	2a00      	cmp	r2, #0
 8007f3e:	dd07      	ble.n	8007f50 <_dtoa_r+0xad0>
 8007f40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f44:	d0ed      	beq.n	8007f22 <_dtoa_r+0xaa2>
 8007f46:	f10a 0301 	add.w	r3, sl, #1
 8007f4a:	f88b 3000 	strb.w	r3, [fp]
 8007f4e:	e73c      	b.n	8007dca <_dtoa_r+0x94a>
 8007f50:	9b05      	ldr	r3, [sp, #20]
 8007f52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007f56:	4599      	cmp	r9, r3
 8007f58:	d047      	beq.n	8007fea <_dtoa_r+0xb6a>
 8007f5a:	ee18 1a10 	vmov	r1, s16
 8007f5e:	2300      	movs	r3, #0
 8007f60:	220a      	movs	r2, #10
 8007f62:	4620      	mov	r0, r4
 8007f64:	f000 fb16 	bl	8008594 <__multadd>
 8007f68:	45b8      	cmp	r8, r7
 8007f6a:	ee08 0a10 	vmov	s16, r0
 8007f6e:	f04f 0300 	mov.w	r3, #0
 8007f72:	f04f 020a 	mov.w	r2, #10
 8007f76:	4641      	mov	r1, r8
 8007f78:	4620      	mov	r0, r4
 8007f7a:	d106      	bne.n	8007f8a <_dtoa_r+0xb0a>
 8007f7c:	f000 fb0a 	bl	8008594 <__multadd>
 8007f80:	4680      	mov	r8, r0
 8007f82:	4607      	mov	r7, r0
 8007f84:	f109 0901 	add.w	r9, r9, #1
 8007f88:	e772      	b.n	8007e70 <_dtoa_r+0x9f0>
 8007f8a:	f000 fb03 	bl	8008594 <__multadd>
 8007f8e:	4639      	mov	r1, r7
 8007f90:	4680      	mov	r8, r0
 8007f92:	2300      	movs	r3, #0
 8007f94:	220a      	movs	r2, #10
 8007f96:	4620      	mov	r0, r4
 8007f98:	f000 fafc 	bl	8008594 <__multadd>
 8007f9c:	4607      	mov	r7, r0
 8007f9e:	e7f1      	b.n	8007f84 <_dtoa_r+0xb04>
 8007fa0:	9b03      	ldr	r3, [sp, #12]
 8007fa2:	9302      	str	r3, [sp, #8]
 8007fa4:	9d01      	ldr	r5, [sp, #4]
 8007fa6:	ee18 0a10 	vmov	r0, s16
 8007faa:	4631      	mov	r1, r6
 8007fac:	f7ff f9dc 	bl	8007368 <quorem>
 8007fb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007fb4:	9b01      	ldr	r3, [sp, #4]
 8007fb6:	f805 ab01 	strb.w	sl, [r5], #1
 8007fba:	1aea      	subs	r2, r5, r3
 8007fbc:	9b02      	ldr	r3, [sp, #8]
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	dd09      	ble.n	8007fd6 <_dtoa_r+0xb56>
 8007fc2:	ee18 1a10 	vmov	r1, s16
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	220a      	movs	r2, #10
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f000 fae2 	bl	8008594 <__multadd>
 8007fd0:	ee08 0a10 	vmov	s16, r0
 8007fd4:	e7e7      	b.n	8007fa6 <_dtoa_r+0xb26>
 8007fd6:	9b02      	ldr	r3, [sp, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bfc8      	it	gt
 8007fdc:	461d      	movgt	r5, r3
 8007fde:	9b01      	ldr	r3, [sp, #4]
 8007fe0:	bfd8      	it	le
 8007fe2:	2501      	movle	r5, #1
 8007fe4:	441d      	add	r5, r3
 8007fe6:	f04f 0800 	mov.w	r8, #0
 8007fea:	ee18 1a10 	vmov	r1, s16
 8007fee:	2201      	movs	r2, #1
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 fc7f 	bl	80088f4 <__lshift>
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	ee08 0a10 	vmov	s16, r0
 8007ffc:	f000 fcea 	bl	80089d4 <__mcmp>
 8008000:	2800      	cmp	r0, #0
 8008002:	dc91      	bgt.n	8007f28 <_dtoa_r+0xaa8>
 8008004:	d102      	bne.n	800800c <_dtoa_r+0xb8c>
 8008006:	f01a 0f01 	tst.w	sl, #1
 800800a:	d18d      	bne.n	8007f28 <_dtoa_r+0xaa8>
 800800c:	462b      	mov	r3, r5
 800800e:	461d      	mov	r5, r3
 8008010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008014:	2a30      	cmp	r2, #48	; 0x30
 8008016:	d0fa      	beq.n	800800e <_dtoa_r+0xb8e>
 8008018:	e6d7      	b.n	8007dca <_dtoa_r+0x94a>
 800801a:	9a01      	ldr	r2, [sp, #4]
 800801c:	429a      	cmp	r2, r3
 800801e:	d184      	bne.n	8007f2a <_dtoa_r+0xaaa>
 8008020:	9b00      	ldr	r3, [sp, #0]
 8008022:	3301      	adds	r3, #1
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	2331      	movs	r3, #49	; 0x31
 8008028:	7013      	strb	r3, [r2, #0]
 800802a:	e6ce      	b.n	8007dca <_dtoa_r+0x94a>
 800802c:	4b09      	ldr	r3, [pc, #36]	; (8008054 <_dtoa_r+0xbd4>)
 800802e:	f7ff ba95 	b.w	800755c <_dtoa_r+0xdc>
 8008032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008034:	2b00      	cmp	r3, #0
 8008036:	f47f aa6e 	bne.w	8007516 <_dtoa_r+0x96>
 800803a:	4b07      	ldr	r3, [pc, #28]	; (8008058 <_dtoa_r+0xbd8>)
 800803c:	f7ff ba8e 	b.w	800755c <_dtoa_r+0xdc>
 8008040:	9b02      	ldr	r3, [sp, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	dcae      	bgt.n	8007fa4 <_dtoa_r+0xb24>
 8008046:	9b06      	ldr	r3, [sp, #24]
 8008048:	2b02      	cmp	r3, #2
 800804a:	f73f aea8 	bgt.w	8007d9e <_dtoa_r+0x91e>
 800804e:	e7a9      	b.n	8007fa4 <_dtoa_r+0xb24>
 8008050:	0800981f 	.word	0x0800981f
 8008054:	0800977c 	.word	0x0800977c
 8008058:	080097a0 	.word	0x080097a0

0800805c <__sflush_r>:
 800805c:	898a      	ldrh	r2, [r1, #12]
 800805e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008062:	4605      	mov	r5, r0
 8008064:	0710      	lsls	r0, r2, #28
 8008066:	460c      	mov	r4, r1
 8008068:	d458      	bmi.n	800811c <__sflush_r+0xc0>
 800806a:	684b      	ldr	r3, [r1, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	dc05      	bgt.n	800807c <__sflush_r+0x20>
 8008070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008072:	2b00      	cmp	r3, #0
 8008074:	dc02      	bgt.n	800807c <__sflush_r+0x20>
 8008076:	2000      	movs	r0, #0
 8008078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800807c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800807e:	2e00      	cmp	r6, #0
 8008080:	d0f9      	beq.n	8008076 <__sflush_r+0x1a>
 8008082:	2300      	movs	r3, #0
 8008084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008088:	682f      	ldr	r7, [r5, #0]
 800808a:	602b      	str	r3, [r5, #0]
 800808c:	d032      	beq.n	80080f4 <__sflush_r+0x98>
 800808e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	075a      	lsls	r2, r3, #29
 8008094:	d505      	bpl.n	80080a2 <__sflush_r+0x46>
 8008096:	6863      	ldr	r3, [r4, #4]
 8008098:	1ac0      	subs	r0, r0, r3
 800809a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800809c:	b10b      	cbz	r3, 80080a2 <__sflush_r+0x46>
 800809e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080a0:	1ac0      	subs	r0, r0, r3
 80080a2:	2300      	movs	r3, #0
 80080a4:	4602      	mov	r2, r0
 80080a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080a8:	6a21      	ldr	r1, [r4, #32]
 80080aa:	4628      	mov	r0, r5
 80080ac:	47b0      	blx	r6
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	d106      	bne.n	80080c2 <__sflush_r+0x66>
 80080b4:	6829      	ldr	r1, [r5, #0]
 80080b6:	291d      	cmp	r1, #29
 80080b8:	d82c      	bhi.n	8008114 <__sflush_r+0xb8>
 80080ba:	4a2a      	ldr	r2, [pc, #168]	; (8008164 <__sflush_r+0x108>)
 80080bc:	40ca      	lsrs	r2, r1
 80080be:	07d6      	lsls	r6, r2, #31
 80080c0:	d528      	bpl.n	8008114 <__sflush_r+0xb8>
 80080c2:	2200      	movs	r2, #0
 80080c4:	6062      	str	r2, [r4, #4]
 80080c6:	04d9      	lsls	r1, r3, #19
 80080c8:	6922      	ldr	r2, [r4, #16]
 80080ca:	6022      	str	r2, [r4, #0]
 80080cc:	d504      	bpl.n	80080d8 <__sflush_r+0x7c>
 80080ce:	1c42      	adds	r2, r0, #1
 80080d0:	d101      	bne.n	80080d6 <__sflush_r+0x7a>
 80080d2:	682b      	ldr	r3, [r5, #0]
 80080d4:	b903      	cbnz	r3, 80080d8 <__sflush_r+0x7c>
 80080d6:	6560      	str	r0, [r4, #84]	; 0x54
 80080d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080da:	602f      	str	r7, [r5, #0]
 80080dc:	2900      	cmp	r1, #0
 80080de:	d0ca      	beq.n	8008076 <__sflush_r+0x1a>
 80080e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080e4:	4299      	cmp	r1, r3
 80080e6:	d002      	beq.n	80080ee <__sflush_r+0x92>
 80080e8:	4628      	mov	r0, r5
 80080ea:	f000 fd8b 	bl	8008c04 <_free_r>
 80080ee:	2000      	movs	r0, #0
 80080f0:	6360      	str	r0, [r4, #52]	; 0x34
 80080f2:	e7c1      	b.n	8008078 <__sflush_r+0x1c>
 80080f4:	6a21      	ldr	r1, [r4, #32]
 80080f6:	2301      	movs	r3, #1
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b0      	blx	r6
 80080fc:	1c41      	adds	r1, r0, #1
 80080fe:	d1c7      	bne.n	8008090 <__sflush_r+0x34>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0c4      	beq.n	8008090 <__sflush_r+0x34>
 8008106:	2b1d      	cmp	r3, #29
 8008108:	d001      	beq.n	800810e <__sflush_r+0xb2>
 800810a:	2b16      	cmp	r3, #22
 800810c:	d101      	bne.n	8008112 <__sflush_r+0xb6>
 800810e:	602f      	str	r7, [r5, #0]
 8008110:	e7b1      	b.n	8008076 <__sflush_r+0x1a>
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	e7ad      	b.n	8008078 <__sflush_r+0x1c>
 800811c:	690f      	ldr	r7, [r1, #16]
 800811e:	2f00      	cmp	r7, #0
 8008120:	d0a9      	beq.n	8008076 <__sflush_r+0x1a>
 8008122:	0793      	lsls	r3, r2, #30
 8008124:	680e      	ldr	r6, [r1, #0]
 8008126:	bf08      	it	eq
 8008128:	694b      	ldreq	r3, [r1, #20]
 800812a:	600f      	str	r7, [r1, #0]
 800812c:	bf18      	it	ne
 800812e:	2300      	movne	r3, #0
 8008130:	eba6 0807 	sub.w	r8, r6, r7
 8008134:	608b      	str	r3, [r1, #8]
 8008136:	f1b8 0f00 	cmp.w	r8, #0
 800813a:	dd9c      	ble.n	8008076 <__sflush_r+0x1a>
 800813c:	6a21      	ldr	r1, [r4, #32]
 800813e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008140:	4643      	mov	r3, r8
 8008142:	463a      	mov	r2, r7
 8008144:	4628      	mov	r0, r5
 8008146:	47b0      	blx	r6
 8008148:	2800      	cmp	r0, #0
 800814a:	dc06      	bgt.n	800815a <__sflush_r+0xfe>
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008152:	81a3      	strh	r3, [r4, #12]
 8008154:	f04f 30ff 	mov.w	r0, #4294967295
 8008158:	e78e      	b.n	8008078 <__sflush_r+0x1c>
 800815a:	4407      	add	r7, r0
 800815c:	eba8 0800 	sub.w	r8, r8, r0
 8008160:	e7e9      	b.n	8008136 <__sflush_r+0xda>
 8008162:	bf00      	nop
 8008164:	20400001 	.word	0x20400001

08008168 <_fflush_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	690b      	ldr	r3, [r1, #16]
 800816c:	4605      	mov	r5, r0
 800816e:	460c      	mov	r4, r1
 8008170:	b913      	cbnz	r3, 8008178 <_fflush_r+0x10>
 8008172:	2500      	movs	r5, #0
 8008174:	4628      	mov	r0, r5
 8008176:	bd38      	pop	{r3, r4, r5, pc}
 8008178:	b118      	cbz	r0, 8008182 <_fflush_r+0x1a>
 800817a:	6983      	ldr	r3, [r0, #24]
 800817c:	b90b      	cbnz	r3, 8008182 <_fflush_r+0x1a>
 800817e:	f000 f887 	bl	8008290 <__sinit>
 8008182:	4b14      	ldr	r3, [pc, #80]	; (80081d4 <_fflush_r+0x6c>)
 8008184:	429c      	cmp	r4, r3
 8008186:	d11b      	bne.n	80081c0 <_fflush_r+0x58>
 8008188:	686c      	ldr	r4, [r5, #4]
 800818a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0ef      	beq.n	8008172 <_fflush_r+0xa>
 8008192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008194:	07d0      	lsls	r0, r2, #31
 8008196:	d404      	bmi.n	80081a2 <_fflush_r+0x3a>
 8008198:	0599      	lsls	r1, r3, #22
 800819a:	d402      	bmi.n	80081a2 <_fflush_r+0x3a>
 800819c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800819e:	f000 f91a 	bl	80083d6 <__retarget_lock_acquire_recursive>
 80081a2:	4628      	mov	r0, r5
 80081a4:	4621      	mov	r1, r4
 80081a6:	f7ff ff59 	bl	800805c <__sflush_r>
 80081aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081ac:	07da      	lsls	r2, r3, #31
 80081ae:	4605      	mov	r5, r0
 80081b0:	d4e0      	bmi.n	8008174 <_fflush_r+0xc>
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	059b      	lsls	r3, r3, #22
 80081b6:	d4dd      	bmi.n	8008174 <_fflush_r+0xc>
 80081b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ba:	f000 f90d 	bl	80083d8 <__retarget_lock_release_recursive>
 80081be:	e7d9      	b.n	8008174 <_fflush_r+0xc>
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <_fflush_r+0x70>)
 80081c2:	429c      	cmp	r4, r3
 80081c4:	d101      	bne.n	80081ca <_fflush_r+0x62>
 80081c6:	68ac      	ldr	r4, [r5, #8]
 80081c8:	e7df      	b.n	800818a <_fflush_r+0x22>
 80081ca:	4b04      	ldr	r3, [pc, #16]	; (80081dc <_fflush_r+0x74>)
 80081cc:	429c      	cmp	r4, r3
 80081ce:	bf08      	it	eq
 80081d0:	68ec      	ldreq	r4, [r5, #12]
 80081d2:	e7da      	b.n	800818a <_fflush_r+0x22>
 80081d4:	08009850 	.word	0x08009850
 80081d8:	08009870 	.word	0x08009870
 80081dc:	08009830 	.word	0x08009830

080081e0 <std>:
 80081e0:	2300      	movs	r3, #0
 80081e2:	b510      	push	{r4, lr}
 80081e4:	4604      	mov	r4, r0
 80081e6:	e9c0 3300 	strd	r3, r3, [r0]
 80081ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081ee:	6083      	str	r3, [r0, #8]
 80081f0:	8181      	strh	r1, [r0, #12]
 80081f2:	6643      	str	r3, [r0, #100]	; 0x64
 80081f4:	81c2      	strh	r2, [r0, #14]
 80081f6:	6183      	str	r3, [r0, #24]
 80081f8:	4619      	mov	r1, r3
 80081fa:	2208      	movs	r2, #8
 80081fc:	305c      	adds	r0, #92	; 0x5c
 80081fe:	f7fe fad3 	bl	80067a8 <memset>
 8008202:	4b05      	ldr	r3, [pc, #20]	; (8008218 <std+0x38>)
 8008204:	6263      	str	r3, [r4, #36]	; 0x24
 8008206:	4b05      	ldr	r3, [pc, #20]	; (800821c <std+0x3c>)
 8008208:	62a3      	str	r3, [r4, #40]	; 0x28
 800820a:	4b05      	ldr	r3, [pc, #20]	; (8008220 <std+0x40>)
 800820c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800820e:	4b05      	ldr	r3, [pc, #20]	; (8008224 <std+0x44>)
 8008210:	6224      	str	r4, [r4, #32]
 8008212:	6323      	str	r3, [r4, #48]	; 0x30
 8008214:	bd10      	pop	{r4, pc}
 8008216:	bf00      	nop
 8008218:	08009351 	.word	0x08009351
 800821c:	08009373 	.word	0x08009373
 8008220:	080093ab 	.word	0x080093ab
 8008224:	080093cf 	.word	0x080093cf

08008228 <_cleanup_r>:
 8008228:	4901      	ldr	r1, [pc, #4]	; (8008230 <_cleanup_r+0x8>)
 800822a:	f000 b8af 	b.w	800838c <_fwalk_reent>
 800822e:	bf00      	nop
 8008230:	08008169 	.word	0x08008169

08008234 <__sfmoreglue>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	2268      	movs	r2, #104	; 0x68
 8008238:	1e4d      	subs	r5, r1, #1
 800823a:	4355      	muls	r5, r2
 800823c:	460e      	mov	r6, r1
 800823e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008242:	f000 fd4b 	bl	8008cdc <_malloc_r>
 8008246:	4604      	mov	r4, r0
 8008248:	b140      	cbz	r0, 800825c <__sfmoreglue+0x28>
 800824a:	2100      	movs	r1, #0
 800824c:	e9c0 1600 	strd	r1, r6, [r0]
 8008250:	300c      	adds	r0, #12
 8008252:	60a0      	str	r0, [r4, #8]
 8008254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008258:	f7fe faa6 	bl	80067a8 <memset>
 800825c:	4620      	mov	r0, r4
 800825e:	bd70      	pop	{r4, r5, r6, pc}

08008260 <__sfp_lock_acquire>:
 8008260:	4801      	ldr	r0, [pc, #4]	; (8008268 <__sfp_lock_acquire+0x8>)
 8008262:	f000 b8b8 	b.w	80083d6 <__retarget_lock_acquire_recursive>
 8008266:	bf00      	nop
 8008268:	200003ad 	.word	0x200003ad

0800826c <__sfp_lock_release>:
 800826c:	4801      	ldr	r0, [pc, #4]	; (8008274 <__sfp_lock_release+0x8>)
 800826e:	f000 b8b3 	b.w	80083d8 <__retarget_lock_release_recursive>
 8008272:	bf00      	nop
 8008274:	200003ad 	.word	0x200003ad

08008278 <__sinit_lock_acquire>:
 8008278:	4801      	ldr	r0, [pc, #4]	; (8008280 <__sinit_lock_acquire+0x8>)
 800827a:	f000 b8ac 	b.w	80083d6 <__retarget_lock_acquire_recursive>
 800827e:	bf00      	nop
 8008280:	200003ae 	.word	0x200003ae

08008284 <__sinit_lock_release>:
 8008284:	4801      	ldr	r0, [pc, #4]	; (800828c <__sinit_lock_release+0x8>)
 8008286:	f000 b8a7 	b.w	80083d8 <__retarget_lock_release_recursive>
 800828a:	bf00      	nop
 800828c:	200003ae 	.word	0x200003ae

08008290 <__sinit>:
 8008290:	b510      	push	{r4, lr}
 8008292:	4604      	mov	r4, r0
 8008294:	f7ff fff0 	bl	8008278 <__sinit_lock_acquire>
 8008298:	69a3      	ldr	r3, [r4, #24]
 800829a:	b11b      	cbz	r3, 80082a4 <__sinit+0x14>
 800829c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082a0:	f7ff bff0 	b.w	8008284 <__sinit_lock_release>
 80082a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082a8:	6523      	str	r3, [r4, #80]	; 0x50
 80082aa:	4b13      	ldr	r3, [pc, #76]	; (80082f8 <__sinit+0x68>)
 80082ac:	4a13      	ldr	r2, [pc, #76]	; (80082fc <__sinit+0x6c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80082b2:	42a3      	cmp	r3, r4
 80082b4:	bf04      	itt	eq
 80082b6:	2301      	moveq	r3, #1
 80082b8:	61a3      	streq	r3, [r4, #24]
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 f820 	bl	8008300 <__sfp>
 80082c0:	6060      	str	r0, [r4, #4]
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 f81c 	bl	8008300 <__sfp>
 80082c8:	60a0      	str	r0, [r4, #8]
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 f818 	bl	8008300 <__sfp>
 80082d0:	2200      	movs	r2, #0
 80082d2:	60e0      	str	r0, [r4, #12]
 80082d4:	2104      	movs	r1, #4
 80082d6:	6860      	ldr	r0, [r4, #4]
 80082d8:	f7ff ff82 	bl	80081e0 <std>
 80082dc:	68a0      	ldr	r0, [r4, #8]
 80082de:	2201      	movs	r2, #1
 80082e0:	2109      	movs	r1, #9
 80082e2:	f7ff ff7d 	bl	80081e0 <std>
 80082e6:	68e0      	ldr	r0, [r4, #12]
 80082e8:	2202      	movs	r2, #2
 80082ea:	2112      	movs	r1, #18
 80082ec:	f7ff ff78 	bl	80081e0 <std>
 80082f0:	2301      	movs	r3, #1
 80082f2:	61a3      	str	r3, [r4, #24]
 80082f4:	e7d2      	b.n	800829c <__sinit+0xc>
 80082f6:	bf00      	nop
 80082f8:	08009768 	.word	0x08009768
 80082fc:	08008229 	.word	0x08008229

08008300 <__sfp>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	4607      	mov	r7, r0
 8008304:	f7ff ffac 	bl	8008260 <__sfp_lock_acquire>
 8008308:	4b1e      	ldr	r3, [pc, #120]	; (8008384 <__sfp+0x84>)
 800830a:	681e      	ldr	r6, [r3, #0]
 800830c:	69b3      	ldr	r3, [r6, #24]
 800830e:	b913      	cbnz	r3, 8008316 <__sfp+0x16>
 8008310:	4630      	mov	r0, r6
 8008312:	f7ff ffbd 	bl	8008290 <__sinit>
 8008316:	3648      	adds	r6, #72	; 0x48
 8008318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800831c:	3b01      	subs	r3, #1
 800831e:	d503      	bpl.n	8008328 <__sfp+0x28>
 8008320:	6833      	ldr	r3, [r6, #0]
 8008322:	b30b      	cbz	r3, 8008368 <__sfp+0x68>
 8008324:	6836      	ldr	r6, [r6, #0]
 8008326:	e7f7      	b.n	8008318 <__sfp+0x18>
 8008328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800832c:	b9d5      	cbnz	r5, 8008364 <__sfp+0x64>
 800832e:	4b16      	ldr	r3, [pc, #88]	; (8008388 <__sfp+0x88>)
 8008330:	60e3      	str	r3, [r4, #12]
 8008332:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008336:	6665      	str	r5, [r4, #100]	; 0x64
 8008338:	f000 f84c 	bl	80083d4 <__retarget_lock_init_recursive>
 800833c:	f7ff ff96 	bl	800826c <__sfp_lock_release>
 8008340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008348:	6025      	str	r5, [r4, #0]
 800834a:	61a5      	str	r5, [r4, #24]
 800834c:	2208      	movs	r2, #8
 800834e:	4629      	mov	r1, r5
 8008350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008354:	f7fe fa28 	bl	80067a8 <memset>
 8008358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800835c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008360:	4620      	mov	r0, r4
 8008362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008364:	3468      	adds	r4, #104	; 0x68
 8008366:	e7d9      	b.n	800831c <__sfp+0x1c>
 8008368:	2104      	movs	r1, #4
 800836a:	4638      	mov	r0, r7
 800836c:	f7ff ff62 	bl	8008234 <__sfmoreglue>
 8008370:	4604      	mov	r4, r0
 8008372:	6030      	str	r0, [r6, #0]
 8008374:	2800      	cmp	r0, #0
 8008376:	d1d5      	bne.n	8008324 <__sfp+0x24>
 8008378:	f7ff ff78 	bl	800826c <__sfp_lock_release>
 800837c:	230c      	movs	r3, #12
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	e7ee      	b.n	8008360 <__sfp+0x60>
 8008382:	bf00      	nop
 8008384:	08009768 	.word	0x08009768
 8008388:	ffff0001 	.word	0xffff0001

0800838c <_fwalk_reent>:
 800838c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008390:	4606      	mov	r6, r0
 8008392:	4688      	mov	r8, r1
 8008394:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008398:	2700      	movs	r7, #0
 800839a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800839e:	f1b9 0901 	subs.w	r9, r9, #1
 80083a2:	d505      	bpl.n	80083b0 <_fwalk_reent+0x24>
 80083a4:	6824      	ldr	r4, [r4, #0]
 80083a6:	2c00      	cmp	r4, #0
 80083a8:	d1f7      	bne.n	800839a <_fwalk_reent+0xe>
 80083aa:	4638      	mov	r0, r7
 80083ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b0:	89ab      	ldrh	r3, [r5, #12]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d907      	bls.n	80083c6 <_fwalk_reent+0x3a>
 80083b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083ba:	3301      	adds	r3, #1
 80083bc:	d003      	beq.n	80083c6 <_fwalk_reent+0x3a>
 80083be:	4629      	mov	r1, r5
 80083c0:	4630      	mov	r0, r6
 80083c2:	47c0      	blx	r8
 80083c4:	4307      	orrs	r7, r0
 80083c6:	3568      	adds	r5, #104	; 0x68
 80083c8:	e7e9      	b.n	800839e <_fwalk_reent+0x12>
	...

080083cc <_localeconv_r>:
 80083cc:	4800      	ldr	r0, [pc, #0]	; (80083d0 <_localeconv_r+0x4>)
 80083ce:	4770      	bx	lr
 80083d0:	20000160 	.word	0x20000160

080083d4 <__retarget_lock_init_recursive>:
 80083d4:	4770      	bx	lr

080083d6 <__retarget_lock_acquire_recursive>:
 80083d6:	4770      	bx	lr

080083d8 <__retarget_lock_release_recursive>:
 80083d8:	4770      	bx	lr

080083da <__swhatbuf_r>:
 80083da:	b570      	push	{r4, r5, r6, lr}
 80083dc:	460e      	mov	r6, r1
 80083de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e2:	2900      	cmp	r1, #0
 80083e4:	b096      	sub	sp, #88	; 0x58
 80083e6:	4614      	mov	r4, r2
 80083e8:	461d      	mov	r5, r3
 80083ea:	da08      	bge.n	80083fe <__swhatbuf_r+0x24>
 80083ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	602a      	str	r2, [r5, #0]
 80083f4:	061a      	lsls	r2, r3, #24
 80083f6:	d410      	bmi.n	800841a <__swhatbuf_r+0x40>
 80083f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083fc:	e00e      	b.n	800841c <__swhatbuf_r+0x42>
 80083fe:	466a      	mov	r2, sp
 8008400:	f001 f83c 	bl	800947c <_fstat_r>
 8008404:	2800      	cmp	r0, #0
 8008406:	dbf1      	blt.n	80083ec <__swhatbuf_r+0x12>
 8008408:	9a01      	ldr	r2, [sp, #4]
 800840a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800840e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008412:	425a      	negs	r2, r3
 8008414:	415a      	adcs	r2, r3
 8008416:	602a      	str	r2, [r5, #0]
 8008418:	e7ee      	b.n	80083f8 <__swhatbuf_r+0x1e>
 800841a:	2340      	movs	r3, #64	; 0x40
 800841c:	2000      	movs	r0, #0
 800841e:	6023      	str	r3, [r4, #0]
 8008420:	b016      	add	sp, #88	; 0x58
 8008422:	bd70      	pop	{r4, r5, r6, pc}

08008424 <__smakebuf_r>:
 8008424:	898b      	ldrh	r3, [r1, #12]
 8008426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008428:	079d      	lsls	r5, r3, #30
 800842a:	4606      	mov	r6, r0
 800842c:	460c      	mov	r4, r1
 800842e:	d507      	bpl.n	8008440 <__smakebuf_r+0x1c>
 8008430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	6123      	str	r3, [r4, #16]
 8008438:	2301      	movs	r3, #1
 800843a:	6163      	str	r3, [r4, #20]
 800843c:	b002      	add	sp, #8
 800843e:	bd70      	pop	{r4, r5, r6, pc}
 8008440:	ab01      	add	r3, sp, #4
 8008442:	466a      	mov	r2, sp
 8008444:	f7ff ffc9 	bl	80083da <__swhatbuf_r>
 8008448:	9900      	ldr	r1, [sp, #0]
 800844a:	4605      	mov	r5, r0
 800844c:	4630      	mov	r0, r6
 800844e:	f000 fc45 	bl	8008cdc <_malloc_r>
 8008452:	b948      	cbnz	r0, 8008468 <__smakebuf_r+0x44>
 8008454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008458:	059a      	lsls	r2, r3, #22
 800845a:	d4ef      	bmi.n	800843c <__smakebuf_r+0x18>
 800845c:	f023 0303 	bic.w	r3, r3, #3
 8008460:	f043 0302 	orr.w	r3, r3, #2
 8008464:	81a3      	strh	r3, [r4, #12]
 8008466:	e7e3      	b.n	8008430 <__smakebuf_r+0xc>
 8008468:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <__smakebuf_r+0x7c>)
 800846a:	62b3      	str	r3, [r6, #40]	; 0x28
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	6020      	str	r0, [r4, #0]
 8008470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008474:	81a3      	strh	r3, [r4, #12]
 8008476:	9b00      	ldr	r3, [sp, #0]
 8008478:	6163      	str	r3, [r4, #20]
 800847a:	9b01      	ldr	r3, [sp, #4]
 800847c:	6120      	str	r0, [r4, #16]
 800847e:	b15b      	cbz	r3, 8008498 <__smakebuf_r+0x74>
 8008480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008484:	4630      	mov	r0, r6
 8008486:	f001 f80b 	bl	80094a0 <_isatty_r>
 800848a:	b128      	cbz	r0, 8008498 <__smakebuf_r+0x74>
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	f023 0303 	bic.w	r3, r3, #3
 8008492:	f043 0301 	orr.w	r3, r3, #1
 8008496:	81a3      	strh	r3, [r4, #12]
 8008498:	89a0      	ldrh	r0, [r4, #12]
 800849a:	4305      	orrs	r5, r0
 800849c:	81a5      	strh	r5, [r4, #12]
 800849e:	e7cd      	b.n	800843c <__smakebuf_r+0x18>
 80084a0:	08008229 	.word	0x08008229

080084a4 <malloc>:
 80084a4:	4b02      	ldr	r3, [pc, #8]	; (80084b0 <malloc+0xc>)
 80084a6:	4601      	mov	r1, r0
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	f000 bc17 	b.w	8008cdc <_malloc_r>
 80084ae:	bf00      	nop
 80084b0:	2000000c 	.word	0x2000000c

080084b4 <memcpy>:
 80084b4:	440a      	add	r2, r1
 80084b6:	4291      	cmp	r1, r2
 80084b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084bc:	d100      	bne.n	80084c0 <memcpy+0xc>
 80084be:	4770      	bx	lr
 80084c0:	b510      	push	{r4, lr}
 80084c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ca:	4291      	cmp	r1, r2
 80084cc:	d1f9      	bne.n	80084c2 <memcpy+0xe>
 80084ce:	bd10      	pop	{r4, pc}

080084d0 <_Balloc>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084d4:	4604      	mov	r4, r0
 80084d6:	460d      	mov	r5, r1
 80084d8:	b976      	cbnz	r6, 80084f8 <_Balloc+0x28>
 80084da:	2010      	movs	r0, #16
 80084dc:	f7ff ffe2 	bl	80084a4 <malloc>
 80084e0:	4602      	mov	r2, r0
 80084e2:	6260      	str	r0, [r4, #36]	; 0x24
 80084e4:	b920      	cbnz	r0, 80084f0 <_Balloc+0x20>
 80084e6:	4b18      	ldr	r3, [pc, #96]	; (8008548 <_Balloc+0x78>)
 80084e8:	4818      	ldr	r0, [pc, #96]	; (800854c <_Balloc+0x7c>)
 80084ea:	2166      	movs	r1, #102	; 0x66
 80084ec:	f000 ff86 	bl	80093fc <__assert_func>
 80084f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084f4:	6006      	str	r6, [r0, #0]
 80084f6:	60c6      	str	r6, [r0, #12]
 80084f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084fa:	68f3      	ldr	r3, [r6, #12]
 80084fc:	b183      	cbz	r3, 8008520 <_Balloc+0x50>
 80084fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008506:	b9b8      	cbnz	r0, 8008538 <_Balloc+0x68>
 8008508:	2101      	movs	r1, #1
 800850a:	fa01 f605 	lsl.w	r6, r1, r5
 800850e:	1d72      	adds	r2, r6, #5
 8008510:	0092      	lsls	r2, r2, #2
 8008512:	4620      	mov	r0, r4
 8008514:	f000 fb60 	bl	8008bd8 <_calloc_r>
 8008518:	b160      	cbz	r0, 8008534 <_Balloc+0x64>
 800851a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800851e:	e00e      	b.n	800853e <_Balloc+0x6e>
 8008520:	2221      	movs	r2, #33	; 0x21
 8008522:	2104      	movs	r1, #4
 8008524:	4620      	mov	r0, r4
 8008526:	f000 fb57 	bl	8008bd8 <_calloc_r>
 800852a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800852c:	60f0      	str	r0, [r6, #12]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e4      	bne.n	80084fe <_Balloc+0x2e>
 8008534:	2000      	movs	r0, #0
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	6802      	ldr	r2, [r0, #0]
 800853a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800853e:	2300      	movs	r3, #0
 8008540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008544:	e7f7      	b.n	8008536 <_Balloc+0x66>
 8008546:	bf00      	nop
 8008548:	080097ad 	.word	0x080097ad
 800854c:	08009890 	.word	0x08009890

08008550 <_Bfree>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008554:	4605      	mov	r5, r0
 8008556:	460c      	mov	r4, r1
 8008558:	b976      	cbnz	r6, 8008578 <_Bfree+0x28>
 800855a:	2010      	movs	r0, #16
 800855c:	f7ff ffa2 	bl	80084a4 <malloc>
 8008560:	4602      	mov	r2, r0
 8008562:	6268      	str	r0, [r5, #36]	; 0x24
 8008564:	b920      	cbnz	r0, 8008570 <_Bfree+0x20>
 8008566:	4b09      	ldr	r3, [pc, #36]	; (800858c <_Bfree+0x3c>)
 8008568:	4809      	ldr	r0, [pc, #36]	; (8008590 <_Bfree+0x40>)
 800856a:	218a      	movs	r1, #138	; 0x8a
 800856c:	f000 ff46 	bl	80093fc <__assert_func>
 8008570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008574:	6006      	str	r6, [r0, #0]
 8008576:	60c6      	str	r6, [r0, #12]
 8008578:	b13c      	cbz	r4, 800858a <_Bfree+0x3a>
 800857a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800857c:	6862      	ldr	r2, [r4, #4]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008584:	6021      	str	r1, [r4, #0]
 8008586:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	080097ad 	.word	0x080097ad
 8008590:	08009890 	.word	0x08009890

08008594 <__multadd>:
 8008594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008598:	690d      	ldr	r5, [r1, #16]
 800859a:	4607      	mov	r7, r0
 800859c:	460c      	mov	r4, r1
 800859e:	461e      	mov	r6, r3
 80085a0:	f101 0c14 	add.w	ip, r1, #20
 80085a4:	2000      	movs	r0, #0
 80085a6:	f8dc 3000 	ldr.w	r3, [ip]
 80085aa:	b299      	uxth	r1, r3
 80085ac:	fb02 6101 	mla	r1, r2, r1, r6
 80085b0:	0c1e      	lsrs	r6, r3, #16
 80085b2:	0c0b      	lsrs	r3, r1, #16
 80085b4:	fb02 3306 	mla	r3, r2, r6, r3
 80085b8:	b289      	uxth	r1, r1
 80085ba:	3001      	adds	r0, #1
 80085bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085c0:	4285      	cmp	r5, r0
 80085c2:	f84c 1b04 	str.w	r1, [ip], #4
 80085c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085ca:	dcec      	bgt.n	80085a6 <__multadd+0x12>
 80085cc:	b30e      	cbz	r6, 8008612 <__multadd+0x7e>
 80085ce:	68a3      	ldr	r3, [r4, #8]
 80085d0:	42ab      	cmp	r3, r5
 80085d2:	dc19      	bgt.n	8008608 <__multadd+0x74>
 80085d4:	6861      	ldr	r1, [r4, #4]
 80085d6:	4638      	mov	r0, r7
 80085d8:	3101      	adds	r1, #1
 80085da:	f7ff ff79 	bl	80084d0 <_Balloc>
 80085de:	4680      	mov	r8, r0
 80085e0:	b928      	cbnz	r0, 80085ee <__multadd+0x5a>
 80085e2:	4602      	mov	r2, r0
 80085e4:	4b0c      	ldr	r3, [pc, #48]	; (8008618 <__multadd+0x84>)
 80085e6:	480d      	ldr	r0, [pc, #52]	; (800861c <__multadd+0x88>)
 80085e8:	21b5      	movs	r1, #181	; 0xb5
 80085ea:	f000 ff07 	bl	80093fc <__assert_func>
 80085ee:	6922      	ldr	r2, [r4, #16]
 80085f0:	3202      	adds	r2, #2
 80085f2:	f104 010c 	add.w	r1, r4, #12
 80085f6:	0092      	lsls	r2, r2, #2
 80085f8:	300c      	adds	r0, #12
 80085fa:	f7ff ff5b 	bl	80084b4 <memcpy>
 80085fe:	4621      	mov	r1, r4
 8008600:	4638      	mov	r0, r7
 8008602:	f7ff ffa5 	bl	8008550 <_Bfree>
 8008606:	4644      	mov	r4, r8
 8008608:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800860c:	3501      	adds	r5, #1
 800860e:	615e      	str	r6, [r3, #20]
 8008610:	6125      	str	r5, [r4, #16]
 8008612:	4620      	mov	r0, r4
 8008614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008618:	0800981f 	.word	0x0800981f
 800861c:	08009890 	.word	0x08009890

08008620 <__hi0bits>:
 8008620:	0c03      	lsrs	r3, r0, #16
 8008622:	041b      	lsls	r3, r3, #16
 8008624:	b9d3      	cbnz	r3, 800865c <__hi0bits+0x3c>
 8008626:	0400      	lsls	r0, r0, #16
 8008628:	2310      	movs	r3, #16
 800862a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800862e:	bf04      	itt	eq
 8008630:	0200      	lsleq	r0, r0, #8
 8008632:	3308      	addeq	r3, #8
 8008634:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008638:	bf04      	itt	eq
 800863a:	0100      	lsleq	r0, r0, #4
 800863c:	3304      	addeq	r3, #4
 800863e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008642:	bf04      	itt	eq
 8008644:	0080      	lsleq	r0, r0, #2
 8008646:	3302      	addeq	r3, #2
 8008648:	2800      	cmp	r0, #0
 800864a:	db05      	blt.n	8008658 <__hi0bits+0x38>
 800864c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008650:	f103 0301 	add.w	r3, r3, #1
 8008654:	bf08      	it	eq
 8008656:	2320      	moveq	r3, #32
 8008658:	4618      	mov	r0, r3
 800865a:	4770      	bx	lr
 800865c:	2300      	movs	r3, #0
 800865e:	e7e4      	b.n	800862a <__hi0bits+0xa>

08008660 <__lo0bits>:
 8008660:	6803      	ldr	r3, [r0, #0]
 8008662:	f013 0207 	ands.w	r2, r3, #7
 8008666:	4601      	mov	r1, r0
 8008668:	d00b      	beq.n	8008682 <__lo0bits+0x22>
 800866a:	07da      	lsls	r2, r3, #31
 800866c:	d423      	bmi.n	80086b6 <__lo0bits+0x56>
 800866e:	0798      	lsls	r0, r3, #30
 8008670:	bf49      	itett	mi
 8008672:	085b      	lsrmi	r3, r3, #1
 8008674:	089b      	lsrpl	r3, r3, #2
 8008676:	2001      	movmi	r0, #1
 8008678:	600b      	strmi	r3, [r1, #0]
 800867a:	bf5c      	itt	pl
 800867c:	600b      	strpl	r3, [r1, #0]
 800867e:	2002      	movpl	r0, #2
 8008680:	4770      	bx	lr
 8008682:	b298      	uxth	r0, r3
 8008684:	b9a8      	cbnz	r0, 80086b2 <__lo0bits+0x52>
 8008686:	0c1b      	lsrs	r3, r3, #16
 8008688:	2010      	movs	r0, #16
 800868a:	b2da      	uxtb	r2, r3
 800868c:	b90a      	cbnz	r2, 8008692 <__lo0bits+0x32>
 800868e:	3008      	adds	r0, #8
 8008690:	0a1b      	lsrs	r3, r3, #8
 8008692:	071a      	lsls	r2, r3, #28
 8008694:	bf04      	itt	eq
 8008696:	091b      	lsreq	r3, r3, #4
 8008698:	3004      	addeq	r0, #4
 800869a:	079a      	lsls	r2, r3, #30
 800869c:	bf04      	itt	eq
 800869e:	089b      	lsreq	r3, r3, #2
 80086a0:	3002      	addeq	r0, #2
 80086a2:	07da      	lsls	r2, r3, #31
 80086a4:	d403      	bmi.n	80086ae <__lo0bits+0x4e>
 80086a6:	085b      	lsrs	r3, r3, #1
 80086a8:	f100 0001 	add.w	r0, r0, #1
 80086ac:	d005      	beq.n	80086ba <__lo0bits+0x5a>
 80086ae:	600b      	str	r3, [r1, #0]
 80086b0:	4770      	bx	lr
 80086b2:	4610      	mov	r0, r2
 80086b4:	e7e9      	b.n	800868a <__lo0bits+0x2a>
 80086b6:	2000      	movs	r0, #0
 80086b8:	4770      	bx	lr
 80086ba:	2020      	movs	r0, #32
 80086bc:	4770      	bx	lr
	...

080086c0 <__i2b>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	460c      	mov	r4, r1
 80086c4:	2101      	movs	r1, #1
 80086c6:	f7ff ff03 	bl	80084d0 <_Balloc>
 80086ca:	4602      	mov	r2, r0
 80086cc:	b928      	cbnz	r0, 80086da <__i2b+0x1a>
 80086ce:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <__i2b+0x24>)
 80086d0:	4805      	ldr	r0, [pc, #20]	; (80086e8 <__i2b+0x28>)
 80086d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086d6:	f000 fe91 	bl	80093fc <__assert_func>
 80086da:	2301      	movs	r3, #1
 80086dc:	6144      	str	r4, [r0, #20]
 80086de:	6103      	str	r3, [r0, #16]
 80086e0:	bd10      	pop	{r4, pc}
 80086e2:	bf00      	nop
 80086e4:	0800981f 	.word	0x0800981f
 80086e8:	08009890 	.word	0x08009890

080086ec <__multiply>:
 80086ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f0:	4691      	mov	r9, r2
 80086f2:	690a      	ldr	r2, [r1, #16]
 80086f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	bfb8      	it	lt
 80086fc:	460b      	movlt	r3, r1
 80086fe:	460c      	mov	r4, r1
 8008700:	bfbc      	itt	lt
 8008702:	464c      	movlt	r4, r9
 8008704:	4699      	movlt	r9, r3
 8008706:	6927      	ldr	r7, [r4, #16]
 8008708:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800870c:	68a3      	ldr	r3, [r4, #8]
 800870e:	6861      	ldr	r1, [r4, #4]
 8008710:	eb07 060a 	add.w	r6, r7, sl
 8008714:	42b3      	cmp	r3, r6
 8008716:	b085      	sub	sp, #20
 8008718:	bfb8      	it	lt
 800871a:	3101      	addlt	r1, #1
 800871c:	f7ff fed8 	bl	80084d0 <_Balloc>
 8008720:	b930      	cbnz	r0, 8008730 <__multiply+0x44>
 8008722:	4602      	mov	r2, r0
 8008724:	4b44      	ldr	r3, [pc, #272]	; (8008838 <__multiply+0x14c>)
 8008726:	4845      	ldr	r0, [pc, #276]	; (800883c <__multiply+0x150>)
 8008728:	f240 115d 	movw	r1, #349	; 0x15d
 800872c:	f000 fe66 	bl	80093fc <__assert_func>
 8008730:	f100 0514 	add.w	r5, r0, #20
 8008734:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008738:	462b      	mov	r3, r5
 800873a:	2200      	movs	r2, #0
 800873c:	4543      	cmp	r3, r8
 800873e:	d321      	bcc.n	8008784 <__multiply+0x98>
 8008740:	f104 0314 	add.w	r3, r4, #20
 8008744:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008748:	f109 0314 	add.w	r3, r9, #20
 800874c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008750:	9202      	str	r2, [sp, #8]
 8008752:	1b3a      	subs	r2, r7, r4
 8008754:	3a15      	subs	r2, #21
 8008756:	f022 0203 	bic.w	r2, r2, #3
 800875a:	3204      	adds	r2, #4
 800875c:	f104 0115 	add.w	r1, r4, #21
 8008760:	428f      	cmp	r7, r1
 8008762:	bf38      	it	cc
 8008764:	2204      	movcc	r2, #4
 8008766:	9201      	str	r2, [sp, #4]
 8008768:	9a02      	ldr	r2, [sp, #8]
 800876a:	9303      	str	r3, [sp, #12]
 800876c:	429a      	cmp	r2, r3
 800876e:	d80c      	bhi.n	800878a <__multiply+0x9e>
 8008770:	2e00      	cmp	r6, #0
 8008772:	dd03      	ble.n	800877c <__multiply+0x90>
 8008774:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008778:	2b00      	cmp	r3, #0
 800877a:	d05a      	beq.n	8008832 <__multiply+0x146>
 800877c:	6106      	str	r6, [r0, #16]
 800877e:	b005      	add	sp, #20
 8008780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008784:	f843 2b04 	str.w	r2, [r3], #4
 8008788:	e7d8      	b.n	800873c <__multiply+0x50>
 800878a:	f8b3 a000 	ldrh.w	sl, [r3]
 800878e:	f1ba 0f00 	cmp.w	sl, #0
 8008792:	d024      	beq.n	80087de <__multiply+0xf2>
 8008794:	f104 0e14 	add.w	lr, r4, #20
 8008798:	46a9      	mov	r9, r5
 800879a:	f04f 0c00 	mov.w	ip, #0
 800879e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087a2:	f8d9 1000 	ldr.w	r1, [r9]
 80087a6:	fa1f fb82 	uxth.w	fp, r2
 80087aa:	b289      	uxth	r1, r1
 80087ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80087b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087b4:	f8d9 2000 	ldr.w	r2, [r9]
 80087b8:	4461      	add	r1, ip
 80087ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087be:	fb0a c20b 	mla	r2, sl, fp, ip
 80087c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087c6:	b289      	uxth	r1, r1
 80087c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087cc:	4577      	cmp	r7, lr
 80087ce:	f849 1b04 	str.w	r1, [r9], #4
 80087d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087d6:	d8e2      	bhi.n	800879e <__multiply+0xb2>
 80087d8:	9a01      	ldr	r2, [sp, #4]
 80087da:	f845 c002 	str.w	ip, [r5, r2]
 80087de:	9a03      	ldr	r2, [sp, #12]
 80087e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087e4:	3304      	adds	r3, #4
 80087e6:	f1b9 0f00 	cmp.w	r9, #0
 80087ea:	d020      	beq.n	800882e <__multiply+0x142>
 80087ec:	6829      	ldr	r1, [r5, #0]
 80087ee:	f104 0c14 	add.w	ip, r4, #20
 80087f2:	46ae      	mov	lr, r5
 80087f4:	f04f 0a00 	mov.w	sl, #0
 80087f8:	f8bc b000 	ldrh.w	fp, [ip]
 80087fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008800:	fb09 220b 	mla	r2, r9, fp, r2
 8008804:	4492      	add	sl, r2
 8008806:	b289      	uxth	r1, r1
 8008808:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800880c:	f84e 1b04 	str.w	r1, [lr], #4
 8008810:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008814:	f8be 1000 	ldrh.w	r1, [lr]
 8008818:	0c12      	lsrs	r2, r2, #16
 800881a:	fb09 1102 	mla	r1, r9, r2, r1
 800881e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008822:	4567      	cmp	r7, ip
 8008824:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008828:	d8e6      	bhi.n	80087f8 <__multiply+0x10c>
 800882a:	9a01      	ldr	r2, [sp, #4]
 800882c:	50a9      	str	r1, [r5, r2]
 800882e:	3504      	adds	r5, #4
 8008830:	e79a      	b.n	8008768 <__multiply+0x7c>
 8008832:	3e01      	subs	r6, #1
 8008834:	e79c      	b.n	8008770 <__multiply+0x84>
 8008836:	bf00      	nop
 8008838:	0800981f 	.word	0x0800981f
 800883c:	08009890 	.word	0x08009890

08008840 <__pow5mult>:
 8008840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008844:	4615      	mov	r5, r2
 8008846:	f012 0203 	ands.w	r2, r2, #3
 800884a:	4606      	mov	r6, r0
 800884c:	460f      	mov	r7, r1
 800884e:	d007      	beq.n	8008860 <__pow5mult+0x20>
 8008850:	4c25      	ldr	r4, [pc, #148]	; (80088e8 <__pow5mult+0xa8>)
 8008852:	3a01      	subs	r2, #1
 8008854:	2300      	movs	r3, #0
 8008856:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800885a:	f7ff fe9b 	bl	8008594 <__multadd>
 800885e:	4607      	mov	r7, r0
 8008860:	10ad      	asrs	r5, r5, #2
 8008862:	d03d      	beq.n	80088e0 <__pow5mult+0xa0>
 8008864:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008866:	b97c      	cbnz	r4, 8008888 <__pow5mult+0x48>
 8008868:	2010      	movs	r0, #16
 800886a:	f7ff fe1b 	bl	80084a4 <malloc>
 800886e:	4602      	mov	r2, r0
 8008870:	6270      	str	r0, [r6, #36]	; 0x24
 8008872:	b928      	cbnz	r0, 8008880 <__pow5mult+0x40>
 8008874:	4b1d      	ldr	r3, [pc, #116]	; (80088ec <__pow5mult+0xac>)
 8008876:	481e      	ldr	r0, [pc, #120]	; (80088f0 <__pow5mult+0xb0>)
 8008878:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800887c:	f000 fdbe 	bl	80093fc <__assert_func>
 8008880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008884:	6004      	str	r4, [r0, #0]
 8008886:	60c4      	str	r4, [r0, #12]
 8008888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800888c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008890:	b94c      	cbnz	r4, 80088a6 <__pow5mult+0x66>
 8008892:	f240 2171 	movw	r1, #625	; 0x271
 8008896:	4630      	mov	r0, r6
 8008898:	f7ff ff12 	bl	80086c0 <__i2b>
 800889c:	2300      	movs	r3, #0
 800889e:	f8c8 0008 	str.w	r0, [r8, #8]
 80088a2:	4604      	mov	r4, r0
 80088a4:	6003      	str	r3, [r0, #0]
 80088a6:	f04f 0900 	mov.w	r9, #0
 80088aa:	07eb      	lsls	r3, r5, #31
 80088ac:	d50a      	bpl.n	80088c4 <__pow5mult+0x84>
 80088ae:	4639      	mov	r1, r7
 80088b0:	4622      	mov	r2, r4
 80088b2:	4630      	mov	r0, r6
 80088b4:	f7ff ff1a 	bl	80086ec <__multiply>
 80088b8:	4639      	mov	r1, r7
 80088ba:	4680      	mov	r8, r0
 80088bc:	4630      	mov	r0, r6
 80088be:	f7ff fe47 	bl	8008550 <_Bfree>
 80088c2:	4647      	mov	r7, r8
 80088c4:	106d      	asrs	r5, r5, #1
 80088c6:	d00b      	beq.n	80088e0 <__pow5mult+0xa0>
 80088c8:	6820      	ldr	r0, [r4, #0]
 80088ca:	b938      	cbnz	r0, 80088dc <__pow5mult+0x9c>
 80088cc:	4622      	mov	r2, r4
 80088ce:	4621      	mov	r1, r4
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7ff ff0b 	bl	80086ec <__multiply>
 80088d6:	6020      	str	r0, [r4, #0]
 80088d8:	f8c0 9000 	str.w	r9, [r0]
 80088dc:	4604      	mov	r4, r0
 80088de:	e7e4      	b.n	80088aa <__pow5mult+0x6a>
 80088e0:	4638      	mov	r0, r7
 80088e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e6:	bf00      	nop
 80088e8:	080099e0 	.word	0x080099e0
 80088ec:	080097ad 	.word	0x080097ad
 80088f0:	08009890 	.word	0x08009890

080088f4 <__lshift>:
 80088f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f8:	460c      	mov	r4, r1
 80088fa:	6849      	ldr	r1, [r1, #4]
 80088fc:	6923      	ldr	r3, [r4, #16]
 80088fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008902:	68a3      	ldr	r3, [r4, #8]
 8008904:	4607      	mov	r7, r0
 8008906:	4691      	mov	r9, r2
 8008908:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800890c:	f108 0601 	add.w	r6, r8, #1
 8008910:	42b3      	cmp	r3, r6
 8008912:	db0b      	blt.n	800892c <__lshift+0x38>
 8008914:	4638      	mov	r0, r7
 8008916:	f7ff fddb 	bl	80084d0 <_Balloc>
 800891a:	4605      	mov	r5, r0
 800891c:	b948      	cbnz	r0, 8008932 <__lshift+0x3e>
 800891e:	4602      	mov	r2, r0
 8008920:	4b2a      	ldr	r3, [pc, #168]	; (80089cc <__lshift+0xd8>)
 8008922:	482b      	ldr	r0, [pc, #172]	; (80089d0 <__lshift+0xdc>)
 8008924:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008928:	f000 fd68 	bl	80093fc <__assert_func>
 800892c:	3101      	adds	r1, #1
 800892e:	005b      	lsls	r3, r3, #1
 8008930:	e7ee      	b.n	8008910 <__lshift+0x1c>
 8008932:	2300      	movs	r3, #0
 8008934:	f100 0114 	add.w	r1, r0, #20
 8008938:	f100 0210 	add.w	r2, r0, #16
 800893c:	4618      	mov	r0, r3
 800893e:	4553      	cmp	r3, sl
 8008940:	db37      	blt.n	80089b2 <__lshift+0xbe>
 8008942:	6920      	ldr	r0, [r4, #16]
 8008944:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008948:	f104 0314 	add.w	r3, r4, #20
 800894c:	f019 091f 	ands.w	r9, r9, #31
 8008950:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008954:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008958:	d02f      	beq.n	80089ba <__lshift+0xc6>
 800895a:	f1c9 0e20 	rsb	lr, r9, #32
 800895e:	468a      	mov	sl, r1
 8008960:	f04f 0c00 	mov.w	ip, #0
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	fa02 f209 	lsl.w	r2, r2, r9
 800896a:	ea42 020c 	orr.w	r2, r2, ip
 800896e:	f84a 2b04 	str.w	r2, [sl], #4
 8008972:	f853 2b04 	ldr.w	r2, [r3], #4
 8008976:	4298      	cmp	r0, r3
 8008978:	fa22 fc0e 	lsr.w	ip, r2, lr
 800897c:	d8f2      	bhi.n	8008964 <__lshift+0x70>
 800897e:	1b03      	subs	r3, r0, r4
 8008980:	3b15      	subs	r3, #21
 8008982:	f023 0303 	bic.w	r3, r3, #3
 8008986:	3304      	adds	r3, #4
 8008988:	f104 0215 	add.w	r2, r4, #21
 800898c:	4290      	cmp	r0, r2
 800898e:	bf38      	it	cc
 8008990:	2304      	movcc	r3, #4
 8008992:	f841 c003 	str.w	ip, [r1, r3]
 8008996:	f1bc 0f00 	cmp.w	ip, #0
 800899a:	d001      	beq.n	80089a0 <__lshift+0xac>
 800899c:	f108 0602 	add.w	r6, r8, #2
 80089a0:	3e01      	subs	r6, #1
 80089a2:	4638      	mov	r0, r7
 80089a4:	612e      	str	r6, [r5, #16]
 80089a6:	4621      	mov	r1, r4
 80089a8:	f7ff fdd2 	bl	8008550 <_Bfree>
 80089ac:	4628      	mov	r0, r5
 80089ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80089b6:	3301      	adds	r3, #1
 80089b8:	e7c1      	b.n	800893e <__lshift+0x4a>
 80089ba:	3904      	subs	r1, #4
 80089bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80089c4:	4298      	cmp	r0, r3
 80089c6:	d8f9      	bhi.n	80089bc <__lshift+0xc8>
 80089c8:	e7ea      	b.n	80089a0 <__lshift+0xac>
 80089ca:	bf00      	nop
 80089cc:	0800981f 	.word	0x0800981f
 80089d0:	08009890 	.word	0x08009890

080089d4 <__mcmp>:
 80089d4:	b530      	push	{r4, r5, lr}
 80089d6:	6902      	ldr	r2, [r0, #16]
 80089d8:	690c      	ldr	r4, [r1, #16]
 80089da:	1b12      	subs	r2, r2, r4
 80089dc:	d10e      	bne.n	80089fc <__mcmp+0x28>
 80089de:	f100 0314 	add.w	r3, r0, #20
 80089e2:	3114      	adds	r1, #20
 80089e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089f4:	42a5      	cmp	r5, r4
 80089f6:	d003      	beq.n	8008a00 <__mcmp+0x2c>
 80089f8:	d305      	bcc.n	8008a06 <__mcmp+0x32>
 80089fa:	2201      	movs	r2, #1
 80089fc:	4610      	mov	r0, r2
 80089fe:	bd30      	pop	{r4, r5, pc}
 8008a00:	4283      	cmp	r3, r0
 8008a02:	d3f3      	bcc.n	80089ec <__mcmp+0x18>
 8008a04:	e7fa      	b.n	80089fc <__mcmp+0x28>
 8008a06:	f04f 32ff 	mov.w	r2, #4294967295
 8008a0a:	e7f7      	b.n	80089fc <__mcmp+0x28>

08008a0c <__mdiff>:
 8008a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a10:	460c      	mov	r4, r1
 8008a12:	4606      	mov	r6, r0
 8008a14:	4611      	mov	r1, r2
 8008a16:	4620      	mov	r0, r4
 8008a18:	4690      	mov	r8, r2
 8008a1a:	f7ff ffdb 	bl	80089d4 <__mcmp>
 8008a1e:	1e05      	subs	r5, r0, #0
 8008a20:	d110      	bne.n	8008a44 <__mdiff+0x38>
 8008a22:	4629      	mov	r1, r5
 8008a24:	4630      	mov	r0, r6
 8008a26:	f7ff fd53 	bl	80084d0 <_Balloc>
 8008a2a:	b930      	cbnz	r0, 8008a3a <__mdiff+0x2e>
 8008a2c:	4b3a      	ldr	r3, [pc, #232]	; (8008b18 <__mdiff+0x10c>)
 8008a2e:	4602      	mov	r2, r0
 8008a30:	f240 2132 	movw	r1, #562	; 0x232
 8008a34:	4839      	ldr	r0, [pc, #228]	; (8008b1c <__mdiff+0x110>)
 8008a36:	f000 fce1 	bl	80093fc <__assert_func>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a44:	bfa4      	itt	ge
 8008a46:	4643      	movge	r3, r8
 8008a48:	46a0      	movge	r8, r4
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a50:	bfa6      	itte	ge
 8008a52:	461c      	movge	r4, r3
 8008a54:	2500      	movge	r5, #0
 8008a56:	2501      	movlt	r5, #1
 8008a58:	f7ff fd3a 	bl	80084d0 <_Balloc>
 8008a5c:	b920      	cbnz	r0, 8008a68 <__mdiff+0x5c>
 8008a5e:	4b2e      	ldr	r3, [pc, #184]	; (8008b18 <__mdiff+0x10c>)
 8008a60:	4602      	mov	r2, r0
 8008a62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a66:	e7e5      	b.n	8008a34 <__mdiff+0x28>
 8008a68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a6c:	6926      	ldr	r6, [r4, #16]
 8008a6e:	60c5      	str	r5, [r0, #12]
 8008a70:	f104 0914 	add.w	r9, r4, #20
 8008a74:	f108 0514 	add.w	r5, r8, #20
 8008a78:	f100 0e14 	add.w	lr, r0, #20
 8008a7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a84:	f108 0210 	add.w	r2, r8, #16
 8008a88:	46f2      	mov	sl, lr
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a94:	fa1f f883 	uxth.w	r8, r3
 8008a98:	fa11 f18b 	uxtah	r1, r1, fp
 8008a9c:	0c1b      	lsrs	r3, r3, #16
 8008a9e:	eba1 0808 	sub.w	r8, r1, r8
 8008aa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008aa6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008aaa:	fa1f f888 	uxth.w	r8, r8
 8008aae:	1419      	asrs	r1, r3, #16
 8008ab0:	454e      	cmp	r6, r9
 8008ab2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ab6:	f84a 3b04 	str.w	r3, [sl], #4
 8008aba:	d8e7      	bhi.n	8008a8c <__mdiff+0x80>
 8008abc:	1b33      	subs	r3, r6, r4
 8008abe:	3b15      	subs	r3, #21
 8008ac0:	f023 0303 	bic.w	r3, r3, #3
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	3415      	adds	r4, #21
 8008ac8:	42a6      	cmp	r6, r4
 8008aca:	bf38      	it	cc
 8008acc:	2304      	movcc	r3, #4
 8008ace:	441d      	add	r5, r3
 8008ad0:	4473      	add	r3, lr
 8008ad2:	469e      	mov	lr, r3
 8008ad4:	462e      	mov	r6, r5
 8008ad6:	4566      	cmp	r6, ip
 8008ad8:	d30e      	bcc.n	8008af8 <__mdiff+0xec>
 8008ada:	f10c 0203 	add.w	r2, ip, #3
 8008ade:	1b52      	subs	r2, r2, r5
 8008ae0:	f022 0203 	bic.w	r2, r2, #3
 8008ae4:	3d03      	subs	r5, #3
 8008ae6:	45ac      	cmp	ip, r5
 8008ae8:	bf38      	it	cc
 8008aea:	2200      	movcc	r2, #0
 8008aec:	441a      	add	r2, r3
 8008aee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008af2:	b17b      	cbz	r3, 8008b14 <__mdiff+0x108>
 8008af4:	6107      	str	r7, [r0, #16]
 8008af6:	e7a3      	b.n	8008a40 <__mdiff+0x34>
 8008af8:	f856 8b04 	ldr.w	r8, [r6], #4
 8008afc:	fa11 f288 	uxtah	r2, r1, r8
 8008b00:	1414      	asrs	r4, r2, #16
 8008b02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b06:	b292      	uxth	r2, r2
 8008b08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b0c:	f84e 2b04 	str.w	r2, [lr], #4
 8008b10:	1421      	asrs	r1, r4, #16
 8008b12:	e7e0      	b.n	8008ad6 <__mdiff+0xca>
 8008b14:	3f01      	subs	r7, #1
 8008b16:	e7ea      	b.n	8008aee <__mdiff+0xe2>
 8008b18:	0800981f 	.word	0x0800981f
 8008b1c:	08009890 	.word	0x08009890

08008b20 <__d2b>:
 8008b20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b24:	4689      	mov	r9, r1
 8008b26:	2101      	movs	r1, #1
 8008b28:	ec57 6b10 	vmov	r6, r7, d0
 8008b2c:	4690      	mov	r8, r2
 8008b2e:	f7ff fccf 	bl	80084d0 <_Balloc>
 8008b32:	4604      	mov	r4, r0
 8008b34:	b930      	cbnz	r0, 8008b44 <__d2b+0x24>
 8008b36:	4602      	mov	r2, r0
 8008b38:	4b25      	ldr	r3, [pc, #148]	; (8008bd0 <__d2b+0xb0>)
 8008b3a:	4826      	ldr	r0, [pc, #152]	; (8008bd4 <__d2b+0xb4>)
 8008b3c:	f240 310a 	movw	r1, #778	; 0x30a
 8008b40:	f000 fc5c 	bl	80093fc <__assert_func>
 8008b44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008b48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b4c:	bb35      	cbnz	r5, 8008b9c <__d2b+0x7c>
 8008b4e:	2e00      	cmp	r6, #0
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	d028      	beq.n	8008ba6 <__d2b+0x86>
 8008b54:	4668      	mov	r0, sp
 8008b56:	9600      	str	r6, [sp, #0]
 8008b58:	f7ff fd82 	bl	8008660 <__lo0bits>
 8008b5c:	9900      	ldr	r1, [sp, #0]
 8008b5e:	b300      	cbz	r0, 8008ba2 <__d2b+0x82>
 8008b60:	9a01      	ldr	r2, [sp, #4]
 8008b62:	f1c0 0320 	rsb	r3, r0, #32
 8008b66:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6a:	430b      	orrs	r3, r1
 8008b6c:	40c2      	lsrs	r2, r0
 8008b6e:	6163      	str	r3, [r4, #20]
 8008b70:	9201      	str	r2, [sp, #4]
 8008b72:	9b01      	ldr	r3, [sp, #4]
 8008b74:	61a3      	str	r3, [r4, #24]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bf14      	ite	ne
 8008b7a:	2202      	movne	r2, #2
 8008b7c:	2201      	moveq	r2, #1
 8008b7e:	6122      	str	r2, [r4, #16]
 8008b80:	b1d5      	cbz	r5, 8008bb8 <__d2b+0x98>
 8008b82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b86:	4405      	add	r5, r0
 8008b88:	f8c9 5000 	str.w	r5, [r9]
 8008b8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b90:	f8c8 0000 	str.w	r0, [r8]
 8008b94:	4620      	mov	r0, r4
 8008b96:	b003      	add	sp, #12
 8008b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ba0:	e7d5      	b.n	8008b4e <__d2b+0x2e>
 8008ba2:	6161      	str	r1, [r4, #20]
 8008ba4:	e7e5      	b.n	8008b72 <__d2b+0x52>
 8008ba6:	a801      	add	r0, sp, #4
 8008ba8:	f7ff fd5a 	bl	8008660 <__lo0bits>
 8008bac:	9b01      	ldr	r3, [sp, #4]
 8008bae:	6163      	str	r3, [r4, #20]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	6122      	str	r2, [r4, #16]
 8008bb4:	3020      	adds	r0, #32
 8008bb6:	e7e3      	b.n	8008b80 <__d2b+0x60>
 8008bb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bc0:	f8c9 0000 	str.w	r0, [r9]
 8008bc4:	6918      	ldr	r0, [r3, #16]
 8008bc6:	f7ff fd2b 	bl	8008620 <__hi0bits>
 8008bca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bce:	e7df      	b.n	8008b90 <__d2b+0x70>
 8008bd0:	0800981f 	.word	0x0800981f
 8008bd4:	08009890 	.word	0x08009890

08008bd8 <_calloc_r>:
 8008bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bda:	fba1 2402 	umull	r2, r4, r1, r2
 8008bde:	b94c      	cbnz	r4, 8008bf4 <_calloc_r+0x1c>
 8008be0:	4611      	mov	r1, r2
 8008be2:	9201      	str	r2, [sp, #4]
 8008be4:	f000 f87a 	bl	8008cdc <_malloc_r>
 8008be8:	9a01      	ldr	r2, [sp, #4]
 8008bea:	4605      	mov	r5, r0
 8008bec:	b930      	cbnz	r0, 8008bfc <_calloc_r+0x24>
 8008bee:	4628      	mov	r0, r5
 8008bf0:	b003      	add	sp, #12
 8008bf2:	bd30      	pop	{r4, r5, pc}
 8008bf4:	220c      	movs	r2, #12
 8008bf6:	6002      	str	r2, [r0, #0]
 8008bf8:	2500      	movs	r5, #0
 8008bfa:	e7f8      	b.n	8008bee <_calloc_r+0x16>
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	f7fd fdd3 	bl	80067a8 <memset>
 8008c02:	e7f4      	b.n	8008bee <_calloc_r+0x16>

08008c04 <_free_r>:
 8008c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c06:	2900      	cmp	r1, #0
 8008c08:	d044      	beq.n	8008c94 <_free_r+0x90>
 8008c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c0e:	9001      	str	r0, [sp, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f1a1 0404 	sub.w	r4, r1, #4
 8008c16:	bfb8      	it	lt
 8008c18:	18e4      	addlt	r4, r4, r3
 8008c1a:	f000 fc8f 	bl	800953c <__malloc_lock>
 8008c1e:	4a1e      	ldr	r2, [pc, #120]	; (8008c98 <_free_r+0x94>)
 8008c20:	9801      	ldr	r0, [sp, #4]
 8008c22:	6813      	ldr	r3, [r2, #0]
 8008c24:	b933      	cbnz	r3, 8008c34 <_free_r+0x30>
 8008c26:	6063      	str	r3, [r4, #4]
 8008c28:	6014      	str	r4, [r2, #0]
 8008c2a:	b003      	add	sp, #12
 8008c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c30:	f000 bc8a 	b.w	8009548 <__malloc_unlock>
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	d908      	bls.n	8008c4a <_free_r+0x46>
 8008c38:	6825      	ldr	r5, [r4, #0]
 8008c3a:	1961      	adds	r1, r4, r5
 8008c3c:	428b      	cmp	r3, r1
 8008c3e:	bf01      	itttt	eq
 8008c40:	6819      	ldreq	r1, [r3, #0]
 8008c42:	685b      	ldreq	r3, [r3, #4]
 8008c44:	1949      	addeq	r1, r1, r5
 8008c46:	6021      	streq	r1, [r4, #0]
 8008c48:	e7ed      	b.n	8008c26 <_free_r+0x22>
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	b10b      	cbz	r3, 8008c54 <_free_r+0x50>
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	d9fa      	bls.n	8008c4a <_free_r+0x46>
 8008c54:	6811      	ldr	r1, [r2, #0]
 8008c56:	1855      	adds	r5, r2, r1
 8008c58:	42a5      	cmp	r5, r4
 8008c5a:	d10b      	bne.n	8008c74 <_free_r+0x70>
 8008c5c:	6824      	ldr	r4, [r4, #0]
 8008c5e:	4421      	add	r1, r4
 8008c60:	1854      	adds	r4, r2, r1
 8008c62:	42a3      	cmp	r3, r4
 8008c64:	6011      	str	r1, [r2, #0]
 8008c66:	d1e0      	bne.n	8008c2a <_free_r+0x26>
 8008c68:	681c      	ldr	r4, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	6053      	str	r3, [r2, #4]
 8008c6e:	4421      	add	r1, r4
 8008c70:	6011      	str	r1, [r2, #0]
 8008c72:	e7da      	b.n	8008c2a <_free_r+0x26>
 8008c74:	d902      	bls.n	8008c7c <_free_r+0x78>
 8008c76:	230c      	movs	r3, #12
 8008c78:	6003      	str	r3, [r0, #0]
 8008c7a:	e7d6      	b.n	8008c2a <_free_r+0x26>
 8008c7c:	6825      	ldr	r5, [r4, #0]
 8008c7e:	1961      	adds	r1, r4, r5
 8008c80:	428b      	cmp	r3, r1
 8008c82:	bf04      	itt	eq
 8008c84:	6819      	ldreq	r1, [r3, #0]
 8008c86:	685b      	ldreq	r3, [r3, #4]
 8008c88:	6063      	str	r3, [r4, #4]
 8008c8a:	bf04      	itt	eq
 8008c8c:	1949      	addeq	r1, r1, r5
 8008c8e:	6021      	streq	r1, [r4, #0]
 8008c90:	6054      	str	r4, [r2, #4]
 8008c92:	e7ca      	b.n	8008c2a <_free_r+0x26>
 8008c94:	b003      	add	sp, #12
 8008c96:	bd30      	pop	{r4, r5, pc}
 8008c98:	200003b0 	.word	0x200003b0

08008c9c <sbrk_aligned>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	4e0e      	ldr	r6, [pc, #56]	; (8008cd8 <sbrk_aligned+0x3c>)
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	6831      	ldr	r1, [r6, #0]
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	b911      	cbnz	r1, 8008cae <sbrk_aligned+0x12>
 8008ca8:	f000 fb42 	bl	8009330 <_sbrk_r>
 8008cac:	6030      	str	r0, [r6, #0]
 8008cae:	4621      	mov	r1, r4
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f000 fb3d 	bl	8009330 <_sbrk_r>
 8008cb6:	1c43      	adds	r3, r0, #1
 8008cb8:	d00a      	beq.n	8008cd0 <sbrk_aligned+0x34>
 8008cba:	1cc4      	adds	r4, r0, #3
 8008cbc:	f024 0403 	bic.w	r4, r4, #3
 8008cc0:	42a0      	cmp	r0, r4
 8008cc2:	d007      	beq.n	8008cd4 <sbrk_aligned+0x38>
 8008cc4:	1a21      	subs	r1, r4, r0
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f000 fb32 	bl	8009330 <_sbrk_r>
 8008ccc:	3001      	adds	r0, #1
 8008cce:	d101      	bne.n	8008cd4 <sbrk_aligned+0x38>
 8008cd0:	f04f 34ff 	mov.w	r4, #4294967295
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
 8008cd8:	200003b4 	.word	0x200003b4

08008cdc <_malloc_r>:
 8008cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce0:	1ccd      	adds	r5, r1, #3
 8008ce2:	f025 0503 	bic.w	r5, r5, #3
 8008ce6:	3508      	adds	r5, #8
 8008ce8:	2d0c      	cmp	r5, #12
 8008cea:	bf38      	it	cc
 8008cec:	250c      	movcc	r5, #12
 8008cee:	2d00      	cmp	r5, #0
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	db01      	blt.n	8008cf8 <_malloc_r+0x1c>
 8008cf4:	42a9      	cmp	r1, r5
 8008cf6:	d905      	bls.n	8008d04 <_malloc_r+0x28>
 8008cf8:	230c      	movs	r3, #12
 8008cfa:	603b      	str	r3, [r7, #0]
 8008cfc:	2600      	movs	r6, #0
 8008cfe:	4630      	mov	r0, r6
 8008d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d04:	4e2e      	ldr	r6, [pc, #184]	; (8008dc0 <_malloc_r+0xe4>)
 8008d06:	f000 fc19 	bl	800953c <__malloc_lock>
 8008d0a:	6833      	ldr	r3, [r6, #0]
 8008d0c:	461c      	mov	r4, r3
 8008d0e:	bb34      	cbnz	r4, 8008d5e <_malloc_r+0x82>
 8008d10:	4629      	mov	r1, r5
 8008d12:	4638      	mov	r0, r7
 8008d14:	f7ff ffc2 	bl	8008c9c <sbrk_aligned>
 8008d18:	1c43      	adds	r3, r0, #1
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	d14d      	bne.n	8008dba <_malloc_r+0xde>
 8008d1e:	6834      	ldr	r4, [r6, #0]
 8008d20:	4626      	mov	r6, r4
 8008d22:	2e00      	cmp	r6, #0
 8008d24:	d140      	bne.n	8008da8 <_malloc_r+0xcc>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	4631      	mov	r1, r6
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	eb04 0803 	add.w	r8, r4, r3
 8008d30:	f000 fafe 	bl	8009330 <_sbrk_r>
 8008d34:	4580      	cmp	r8, r0
 8008d36:	d13a      	bne.n	8008dae <_malloc_r+0xd2>
 8008d38:	6821      	ldr	r1, [r4, #0]
 8008d3a:	3503      	adds	r5, #3
 8008d3c:	1a6d      	subs	r5, r5, r1
 8008d3e:	f025 0503 	bic.w	r5, r5, #3
 8008d42:	3508      	adds	r5, #8
 8008d44:	2d0c      	cmp	r5, #12
 8008d46:	bf38      	it	cc
 8008d48:	250c      	movcc	r5, #12
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	f7ff ffa5 	bl	8008c9c <sbrk_aligned>
 8008d52:	3001      	adds	r0, #1
 8008d54:	d02b      	beq.n	8008dae <_malloc_r+0xd2>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	442b      	add	r3, r5
 8008d5a:	6023      	str	r3, [r4, #0]
 8008d5c:	e00e      	b.n	8008d7c <_malloc_r+0xa0>
 8008d5e:	6822      	ldr	r2, [r4, #0]
 8008d60:	1b52      	subs	r2, r2, r5
 8008d62:	d41e      	bmi.n	8008da2 <_malloc_r+0xc6>
 8008d64:	2a0b      	cmp	r2, #11
 8008d66:	d916      	bls.n	8008d96 <_malloc_r+0xba>
 8008d68:	1961      	adds	r1, r4, r5
 8008d6a:	42a3      	cmp	r3, r4
 8008d6c:	6025      	str	r5, [r4, #0]
 8008d6e:	bf18      	it	ne
 8008d70:	6059      	strne	r1, [r3, #4]
 8008d72:	6863      	ldr	r3, [r4, #4]
 8008d74:	bf08      	it	eq
 8008d76:	6031      	streq	r1, [r6, #0]
 8008d78:	5162      	str	r2, [r4, r5]
 8008d7a:	604b      	str	r3, [r1, #4]
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f104 060b 	add.w	r6, r4, #11
 8008d82:	f000 fbe1 	bl	8009548 <__malloc_unlock>
 8008d86:	f026 0607 	bic.w	r6, r6, #7
 8008d8a:	1d23      	adds	r3, r4, #4
 8008d8c:	1af2      	subs	r2, r6, r3
 8008d8e:	d0b6      	beq.n	8008cfe <_malloc_r+0x22>
 8008d90:	1b9b      	subs	r3, r3, r6
 8008d92:	50a3      	str	r3, [r4, r2]
 8008d94:	e7b3      	b.n	8008cfe <_malloc_r+0x22>
 8008d96:	6862      	ldr	r2, [r4, #4]
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	bf0c      	ite	eq
 8008d9c:	6032      	streq	r2, [r6, #0]
 8008d9e:	605a      	strne	r2, [r3, #4]
 8008da0:	e7ec      	b.n	8008d7c <_malloc_r+0xa0>
 8008da2:	4623      	mov	r3, r4
 8008da4:	6864      	ldr	r4, [r4, #4]
 8008da6:	e7b2      	b.n	8008d0e <_malloc_r+0x32>
 8008da8:	4634      	mov	r4, r6
 8008daa:	6876      	ldr	r6, [r6, #4]
 8008dac:	e7b9      	b.n	8008d22 <_malloc_r+0x46>
 8008dae:	230c      	movs	r3, #12
 8008db0:	603b      	str	r3, [r7, #0]
 8008db2:	4638      	mov	r0, r7
 8008db4:	f000 fbc8 	bl	8009548 <__malloc_unlock>
 8008db8:	e7a1      	b.n	8008cfe <_malloc_r+0x22>
 8008dba:	6025      	str	r5, [r4, #0]
 8008dbc:	e7de      	b.n	8008d7c <_malloc_r+0xa0>
 8008dbe:	bf00      	nop
 8008dc0:	200003b0 	.word	0x200003b0

08008dc4 <__ssputs_r>:
 8008dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc8:	688e      	ldr	r6, [r1, #8]
 8008dca:	429e      	cmp	r6, r3
 8008dcc:	4682      	mov	sl, r0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	4690      	mov	r8, r2
 8008dd2:	461f      	mov	r7, r3
 8008dd4:	d838      	bhi.n	8008e48 <__ssputs_r+0x84>
 8008dd6:	898a      	ldrh	r2, [r1, #12]
 8008dd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ddc:	d032      	beq.n	8008e44 <__ssputs_r+0x80>
 8008dde:	6825      	ldr	r5, [r4, #0]
 8008de0:	6909      	ldr	r1, [r1, #16]
 8008de2:	eba5 0901 	sub.w	r9, r5, r1
 8008de6:	6965      	ldr	r5, [r4, #20]
 8008de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008df0:	3301      	adds	r3, #1
 8008df2:	444b      	add	r3, r9
 8008df4:	106d      	asrs	r5, r5, #1
 8008df6:	429d      	cmp	r5, r3
 8008df8:	bf38      	it	cc
 8008dfa:	461d      	movcc	r5, r3
 8008dfc:	0553      	lsls	r3, r2, #21
 8008dfe:	d531      	bpl.n	8008e64 <__ssputs_r+0xa0>
 8008e00:	4629      	mov	r1, r5
 8008e02:	f7ff ff6b 	bl	8008cdc <_malloc_r>
 8008e06:	4606      	mov	r6, r0
 8008e08:	b950      	cbnz	r0, 8008e20 <__ssputs_r+0x5c>
 8008e0a:	230c      	movs	r3, #12
 8008e0c:	f8ca 3000 	str.w	r3, [sl]
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e20:	6921      	ldr	r1, [r4, #16]
 8008e22:	464a      	mov	r2, r9
 8008e24:	f7ff fb46 	bl	80084b4 <memcpy>
 8008e28:	89a3      	ldrh	r3, [r4, #12]
 8008e2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e32:	81a3      	strh	r3, [r4, #12]
 8008e34:	6126      	str	r6, [r4, #16]
 8008e36:	6165      	str	r5, [r4, #20]
 8008e38:	444e      	add	r6, r9
 8008e3a:	eba5 0509 	sub.w	r5, r5, r9
 8008e3e:	6026      	str	r6, [r4, #0]
 8008e40:	60a5      	str	r5, [r4, #8]
 8008e42:	463e      	mov	r6, r7
 8008e44:	42be      	cmp	r6, r7
 8008e46:	d900      	bls.n	8008e4a <__ssputs_r+0x86>
 8008e48:	463e      	mov	r6, r7
 8008e4a:	6820      	ldr	r0, [r4, #0]
 8008e4c:	4632      	mov	r2, r6
 8008e4e:	4641      	mov	r1, r8
 8008e50:	f000 fb5a 	bl	8009508 <memmove>
 8008e54:	68a3      	ldr	r3, [r4, #8]
 8008e56:	1b9b      	subs	r3, r3, r6
 8008e58:	60a3      	str	r3, [r4, #8]
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	4433      	add	r3, r6
 8008e5e:	6023      	str	r3, [r4, #0]
 8008e60:	2000      	movs	r0, #0
 8008e62:	e7db      	b.n	8008e1c <__ssputs_r+0x58>
 8008e64:	462a      	mov	r2, r5
 8008e66:	f000 fb75 	bl	8009554 <_realloc_r>
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d1e1      	bne.n	8008e34 <__ssputs_r+0x70>
 8008e70:	6921      	ldr	r1, [r4, #16]
 8008e72:	4650      	mov	r0, sl
 8008e74:	f7ff fec6 	bl	8008c04 <_free_r>
 8008e78:	e7c7      	b.n	8008e0a <__ssputs_r+0x46>
	...

08008e7c <_svfiprintf_r>:
 8008e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e80:	4698      	mov	r8, r3
 8008e82:	898b      	ldrh	r3, [r1, #12]
 8008e84:	061b      	lsls	r3, r3, #24
 8008e86:	b09d      	sub	sp, #116	; 0x74
 8008e88:	4607      	mov	r7, r0
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	4614      	mov	r4, r2
 8008e8e:	d50e      	bpl.n	8008eae <_svfiprintf_r+0x32>
 8008e90:	690b      	ldr	r3, [r1, #16]
 8008e92:	b963      	cbnz	r3, 8008eae <_svfiprintf_r+0x32>
 8008e94:	2140      	movs	r1, #64	; 0x40
 8008e96:	f7ff ff21 	bl	8008cdc <_malloc_r>
 8008e9a:	6028      	str	r0, [r5, #0]
 8008e9c:	6128      	str	r0, [r5, #16]
 8008e9e:	b920      	cbnz	r0, 8008eaa <_svfiprintf_r+0x2e>
 8008ea0:	230c      	movs	r3, #12
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea8:	e0d1      	b.n	800904e <_svfiprintf_r+0x1d2>
 8008eaa:	2340      	movs	r3, #64	; 0x40
 8008eac:	616b      	str	r3, [r5, #20]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb2:	2320      	movs	r3, #32
 8008eb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ebc:	2330      	movs	r3, #48	; 0x30
 8008ebe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009068 <_svfiprintf_r+0x1ec>
 8008ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ec6:	f04f 0901 	mov.w	r9, #1
 8008eca:	4623      	mov	r3, r4
 8008ecc:	469a      	mov	sl, r3
 8008ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ed2:	b10a      	cbz	r2, 8008ed8 <_svfiprintf_r+0x5c>
 8008ed4:	2a25      	cmp	r2, #37	; 0x25
 8008ed6:	d1f9      	bne.n	8008ecc <_svfiprintf_r+0x50>
 8008ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8008edc:	d00b      	beq.n	8008ef6 <_svfiprintf_r+0x7a>
 8008ede:	465b      	mov	r3, fp
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	4638      	mov	r0, r7
 8008ee6:	f7ff ff6d 	bl	8008dc4 <__ssputs_r>
 8008eea:	3001      	adds	r0, #1
 8008eec:	f000 80aa 	beq.w	8009044 <_svfiprintf_r+0x1c8>
 8008ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ef2:	445a      	add	r2, fp
 8008ef4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 80a2 	beq.w	8009044 <_svfiprintf_r+0x1c8>
 8008f00:	2300      	movs	r3, #0
 8008f02:	f04f 32ff 	mov.w	r2, #4294967295
 8008f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f0a:	f10a 0a01 	add.w	sl, sl, #1
 8008f0e:	9304      	str	r3, [sp, #16]
 8008f10:	9307      	str	r3, [sp, #28]
 8008f12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f16:	931a      	str	r3, [sp, #104]	; 0x68
 8008f18:	4654      	mov	r4, sl
 8008f1a:	2205      	movs	r2, #5
 8008f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f20:	4851      	ldr	r0, [pc, #324]	; (8009068 <_svfiprintf_r+0x1ec>)
 8008f22:	f7f7 f965 	bl	80001f0 <memchr>
 8008f26:	9a04      	ldr	r2, [sp, #16]
 8008f28:	b9d8      	cbnz	r0, 8008f62 <_svfiprintf_r+0xe6>
 8008f2a:	06d0      	lsls	r0, r2, #27
 8008f2c:	bf44      	itt	mi
 8008f2e:	2320      	movmi	r3, #32
 8008f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f34:	0711      	lsls	r1, r2, #28
 8008f36:	bf44      	itt	mi
 8008f38:	232b      	movmi	r3, #43	; 0x2b
 8008f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f42:	2b2a      	cmp	r3, #42	; 0x2a
 8008f44:	d015      	beq.n	8008f72 <_svfiprintf_r+0xf6>
 8008f46:	9a07      	ldr	r2, [sp, #28]
 8008f48:	4654      	mov	r4, sl
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	f04f 0c0a 	mov.w	ip, #10
 8008f50:	4621      	mov	r1, r4
 8008f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f56:	3b30      	subs	r3, #48	; 0x30
 8008f58:	2b09      	cmp	r3, #9
 8008f5a:	d94e      	bls.n	8008ffa <_svfiprintf_r+0x17e>
 8008f5c:	b1b0      	cbz	r0, 8008f8c <_svfiprintf_r+0x110>
 8008f5e:	9207      	str	r2, [sp, #28]
 8008f60:	e014      	b.n	8008f8c <_svfiprintf_r+0x110>
 8008f62:	eba0 0308 	sub.w	r3, r0, r8
 8008f66:	fa09 f303 	lsl.w	r3, r9, r3
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	9304      	str	r3, [sp, #16]
 8008f6e:	46a2      	mov	sl, r4
 8008f70:	e7d2      	b.n	8008f18 <_svfiprintf_r+0x9c>
 8008f72:	9b03      	ldr	r3, [sp, #12]
 8008f74:	1d19      	adds	r1, r3, #4
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	9103      	str	r1, [sp, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	bfbb      	ittet	lt
 8008f7e:	425b      	neglt	r3, r3
 8008f80:	f042 0202 	orrlt.w	r2, r2, #2
 8008f84:	9307      	strge	r3, [sp, #28]
 8008f86:	9307      	strlt	r3, [sp, #28]
 8008f88:	bfb8      	it	lt
 8008f8a:	9204      	strlt	r2, [sp, #16]
 8008f8c:	7823      	ldrb	r3, [r4, #0]
 8008f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8008f90:	d10c      	bne.n	8008fac <_svfiprintf_r+0x130>
 8008f92:	7863      	ldrb	r3, [r4, #1]
 8008f94:	2b2a      	cmp	r3, #42	; 0x2a
 8008f96:	d135      	bne.n	8009004 <_svfiprintf_r+0x188>
 8008f98:	9b03      	ldr	r3, [sp, #12]
 8008f9a:	1d1a      	adds	r2, r3, #4
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	9203      	str	r2, [sp, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	bfb8      	it	lt
 8008fa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fa8:	3402      	adds	r4, #2
 8008faa:	9305      	str	r3, [sp, #20]
 8008fac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009078 <_svfiprintf_r+0x1fc>
 8008fb0:	7821      	ldrb	r1, [r4, #0]
 8008fb2:	2203      	movs	r2, #3
 8008fb4:	4650      	mov	r0, sl
 8008fb6:	f7f7 f91b 	bl	80001f0 <memchr>
 8008fba:	b140      	cbz	r0, 8008fce <_svfiprintf_r+0x152>
 8008fbc:	2340      	movs	r3, #64	; 0x40
 8008fbe:	eba0 000a 	sub.w	r0, r0, sl
 8008fc2:	fa03 f000 	lsl.w	r0, r3, r0
 8008fc6:	9b04      	ldr	r3, [sp, #16]
 8008fc8:	4303      	orrs	r3, r0
 8008fca:	3401      	adds	r4, #1
 8008fcc:	9304      	str	r3, [sp, #16]
 8008fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd2:	4826      	ldr	r0, [pc, #152]	; (800906c <_svfiprintf_r+0x1f0>)
 8008fd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fd8:	2206      	movs	r2, #6
 8008fda:	f7f7 f909 	bl	80001f0 <memchr>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d038      	beq.n	8009054 <_svfiprintf_r+0x1d8>
 8008fe2:	4b23      	ldr	r3, [pc, #140]	; (8009070 <_svfiprintf_r+0x1f4>)
 8008fe4:	bb1b      	cbnz	r3, 800902e <_svfiprintf_r+0x1b2>
 8008fe6:	9b03      	ldr	r3, [sp, #12]
 8008fe8:	3307      	adds	r3, #7
 8008fea:	f023 0307 	bic.w	r3, r3, #7
 8008fee:	3308      	adds	r3, #8
 8008ff0:	9303      	str	r3, [sp, #12]
 8008ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff4:	4433      	add	r3, r6
 8008ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff8:	e767      	b.n	8008eca <_svfiprintf_r+0x4e>
 8008ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ffe:	460c      	mov	r4, r1
 8009000:	2001      	movs	r0, #1
 8009002:	e7a5      	b.n	8008f50 <_svfiprintf_r+0xd4>
 8009004:	2300      	movs	r3, #0
 8009006:	3401      	adds	r4, #1
 8009008:	9305      	str	r3, [sp, #20]
 800900a:	4619      	mov	r1, r3
 800900c:	f04f 0c0a 	mov.w	ip, #10
 8009010:	4620      	mov	r0, r4
 8009012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009016:	3a30      	subs	r2, #48	; 0x30
 8009018:	2a09      	cmp	r2, #9
 800901a:	d903      	bls.n	8009024 <_svfiprintf_r+0x1a8>
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0c5      	beq.n	8008fac <_svfiprintf_r+0x130>
 8009020:	9105      	str	r1, [sp, #20]
 8009022:	e7c3      	b.n	8008fac <_svfiprintf_r+0x130>
 8009024:	fb0c 2101 	mla	r1, ip, r1, r2
 8009028:	4604      	mov	r4, r0
 800902a:	2301      	movs	r3, #1
 800902c:	e7f0      	b.n	8009010 <_svfiprintf_r+0x194>
 800902e:	ab03      	add	r3, sp, #12
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	462a      	mov	r2, r5
 8009034:	4b0f      	ldr	r3, [pc, #60]	; (8009074 <_svfiprintf_r+0x1f8>)
 8009036:	a904      	add	r1, sp, #16
 8009038:	4638      	mov	r0, r7
 800903a:	f7fd fc5d 	bl	80068f8 <_printf_float>
 800903e:	1c42      	adds	r2, r0, #1
 8009040:	4606      	mov	r6, r0
 8009042:	d1d6      	bne.n	8008ff2 <_svfiprintf_r+0x176>
 8009044:	89ab      	ldrh	r3, [r5, #12]
 8009046:	065b      	lsls	r3, r3, #25
 8009048:	f53f af2c 	bmi.w	8008ea4 <_svfiprintf_r+0x28>
 800904c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800904e:	b01d      	add	sp, #116	; 0x74
 8009050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009054:	ab03      	add	r3, sp, #12
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	462a      	mov	r2, r5
 800905a:	4b06      	ldr	r3, [pc, #24]	; (8009074 <_svfiprintf_r+0x1f8>)
 800905c:	a904      	add	r1, sp, #16
 800905e:	4638      	mov	r0, r7
 8009060:	f7fd feee 	bl	8006e40 <_printf_i>
 8009064:	e7eb      	b.n	800903e <_svfiprintf_r+0x1c2>
 8009066:	bf00      	nop
 8009068:	080099ec 	.word	0x080099ec
 800906c:	080099f6 	.word	0x080099f6
 8009070:	080068f9 	.word	0x080068f9
 8009074:	08008dc5 	.word	0x08008dc5
 8009078:	080099f2 	.word	0x080099f2

0800907c <__sfputc_r>:
 800907c:	6893      	ldr	r3, [r2, #8]
 800907e:	3b01      	subs	r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	b410      	push	{r4}
 8009084:	6093      	str	r3, [r2, #8]
 8009086:	da08      	bge.n	800909a <__sfputc_r+0x1e>
 8009088:	6994      	ldr	r4, [r2, #24]
 800908a:	42a3      	cmp	r3, r4
 800908c:	db01      	blt.n	8009092 <__sfputc_r+0x16>
 800908e:	290a      	cmp	r1, #10
 8009090:	d103      	bne.n	800909a <__sfputc_r+0x1e>
 8009092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009096:	f7fe b8a7 	b.w	80071e8 <__swbuf_r>
 800909a:	6813      	ldr	r3, [r2, #0]
 800909c:	1c58      	adds	r0, r3, #1
 800909e:	6010      	str	r0, [r2, #0]
 80090a0:	7019      	strb	r1, [r3, #0]
 80090a2:	4608      	mov	r0, r1
 80090a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <__sfputs_r>:
 80090aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ac:	4606      	mov	r6, r0
 80090ae:	460f      	mov	r7, r1
 80090b0:	4614      	mov	r4, r2
 80090b2:	18d5      	adds	r5, r2, r3
 80090b4:	42ac      	cmp	r4, r5
 80090b6:	d101      	bne.n	80090bc <__sfputs_r+0x12>
 80090b8:	2000      	movs	r0, #0
 80090ba:	e007      	b.n	80090cc <__sfputs_r+0x22>
 80090bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c0:	463a      	mov	r2, r7
 80090c2:	4630      	mov	r0, r6
 80090c4:	f7ff ffda 	bl	800907c <__sfputc_r>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d1f3      	bne.n	80090b4 <__sfputs_r+0xa>
 80090cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090d0 <_vfiprintf_r>:
 80090d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d4:	460d      	mov	r5, r1
 80090d6:	b09d      	sub	sp, #116	; 0x74
 80090d8:	4614      	mov	r4, r2
 80090da:	4698      	mov	r8, r3
 80090dc:	4606      	mov	r6, r0
 80090de:	b118      	cbz	r0, 80090e8 <_vfiprintf_r+0x18>
 80090e0:	6983      	ldr	r3, [r0, #24]
 80090e2:	b90b      	cbnz	r3, 80090e8 <_vfiprintf_r+0x18>
 80090e4:	f7ff f8d4 	bl	8008290 <__sinit>
 80090e8:	4b89      	ldr	r3, [pc, #548]	; (8009310 <_vfiprintf_r+0x240>)
 80090ea:	429d      	cmp	r5, r3
 80090ec:	d11b      	bne.n	8009126 <_vfiprintf_r+0x56>
 80090ee:	6875      	ldr	r5, [r6, #4]
 80090f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090f2:	07d9      	lsls	r1, r3, #31
 80090f4:	d405      	bmi.n	8009102 <_vfiprintf_r+0x32>
 80090f6:	89ab      	ldrh	r3, [r5, #12]
 80090f8:	059a      	lsls	r2, r3, #22
 80090fa:	d402      	bmi.n	8009102 <_vfiprintf_r+0x32>
 80090fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090fe:	f7ff f96a 	bl	80083d6 <__retarget_lock_acquire_recursive>
 8009102:	89ab      	ldrh	r3, [r5, #12]
 8009104:	071b      	lsls	r3, r3, #28
 8009106:	d501      	bpl.n	800910c <_vfiprintf_r+0x3c>
 8009108:	692b      	ldr	r3, [r5, #16]
 800910a:	b9eb      	cbnz	r3, 8009148 <_vfiprintf_r+0x78>
 800910c:	4629      	mov	r1, r5
 800910e:	4630      	mov	r0, r6
 8009110:	f7fe f8bc 	bl	800728c <__swsetup_r>
 8009114:	b1c0      	cbz	r0, 8009148 <_vfiprintf_r+0x78>
 8009116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009118:	07dc      	lsls	r4, r3, #31
 800911a:	d50e      	bpl.n	800913a <_vfiprintf_r+0x6a>
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	b01d      	add	sp, #116	; 0x74
 8009122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009126:	4b7b      	ldr	r3, [pc, #492]	; (8009314 <_vfiprintf_r+0x244>)
 8009128:	429d      	cmp	r5, r3
 800912a:	d101      	bne.n	8009130 <_vfiprintf_r+0x60>
 800912c:	68b5      	ldr	r5, [r6, #8]
 800912e:	e7df      	b.n	80090f0 <_vfiprintf_r+0x20>
 8009130:	4b79      	ldr	r3, [pc, #484]	; (8009318 <_vfiprintf_r+0x248>)
 8009132:	429d      	cmp	r5, r3
 8009134:	bf08      	it	eq
 8009136:	68f5      	ldreq	r5, [r6, #12]
 8009138:	e7da      	b.n	80090f0 <_vfiprintf_r+0x20>
 800913a:	89ab      	ldrh	r3, [r5, #12]
 800913c:	0598      	lsls	r0, r3, #22
 800913e:	d4ed      	bmi.n	800911c <_vfiprintf_r+0x4c>
 8009140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009142:	f7ff f949 	bl	80083d8 <__retarget_lock_release_recursive>
 8009146:	e7e9      	b.n	800911c <_vfiprintf_r+0x4c>
 8009148:	2300      	movs	r3, #0
 800914a:	9309      	str	r3, [sp, #36]	; 0x24
 800914c:	2320      	movs	r3, #32
 800914e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009152:	f8cd 800c 	str.w	r8, [sp, #12]
 8009156:	2330      	movs	r3, #48	; 0x30
 8009158:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800931c <_vfiprintf_r+0x24c>
 800915c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009160:	f04f 0901 	mov.w	r9, #1
 8009164:	4623      	mov	r3, r4
 8009166:	469a      	mov	sl, r3
 8009168:	f813 2b01 	ldrb.w	r2, [r3], #1
 800916c:	b10a      	cbz	r2, 8009172 <_vfiprintf_r+0xa2>
 800916e:	2a25      	cmp	r2, #37	; 0x25
 8009170:	d1f9      	bne.n	8009166 <_vfiprintf_r+0x96>
 8009172:	ebba 0b04 	subs.w	fp, sl, r4
 8009176:	d00b      	beq.n	8009190 <_vfiprintf_r+0xc0>
 8009178:	465b      	mov	r3, fp
 800917a:	4622      	mov	r2, r4
 800917c:	4629      	mov	r1, r5
 800917e:	4630      	mov	r0, r6
 8009180:	f7ff ff93 	bl	80090aa <__sfputs_r>
 8009184:	3001      	adds	r0, #1
 8009186:	f000 80aa 	beq.w	80092de <_vfiprintf_r+0x20e>
 800918a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800918c:	445a      	add	r2, fp
 800918e:	9209      	str	r2, [sp, #36]	; 0x24
 8009190:	f89a 3000 	ldrb.w	r3, [sl]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 80a2 	beq.w	80092de <_vfiprintf_r+0x20e>
 800919a:	2300      	movs	r3, #0
 800919c:	f04f 32ff 	mov.w	r2, #4294967295
 80091a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091a4:	f10a 0a01 	add.w	sl, sl, #1
 80091a8:	9304      	str	r3, [sp, #16]
 80091aa:	9307      	str	r3, [sp, #28]
 80091ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091b0:	931a      	str	r3, [sp, #104]	; 0x68
 80091b2:	4654      	mov	r4, sl
 80091b4:	2205      	movs	r2, #5
 80091b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ba:	4858      	ldr	r0, [pc, #352]	; (800931c <_vfiprintf_r+0x24c>)
 80091bc:	f7f7 f818 	bl	80001f0 <memchr>
 80091c0:	9a04      	ldr	r2, [sp, #16]
 80091c2:	b9d8      	cbnz	r0, 80091fc <_vfiprintf_r+0x12c>
 80091c4:	06d1      	lsls	r1, r2, #27
 80091c6:	bf44      	itt	mi
 80091c8:	2320      	movmi	r3, #32
 80091ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ce:	0713      	lsls	r3, r2, #28
 80091d0:	bf44      	itt	mi
 80091d2:	232b      	movmi	r3, #43	; 0x2b
 80091d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091d8:	f89a 3000 	ldrb.w	r3, [sl]
 80091dc:	2b2a      	cmp	r3, #42	; 0x2a
 80091de:	d015      	beq.n	800920c <_vfiprintf_r+0x13c>
 80091e0:	9a07      	ldr	r2, [sp, #28]
 80091e2:	4654      	mov	r4, sl
 80091e4:	2000      	movs	r0, #0
 80091e6:	f04f 0c0a 	mov.w	ip, #10
 80091ea:	4621      	mov	r1, r4
 80091ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091f0:	3b30      	subs	r3, #48	; 0x30
 80091f2:	2b09      	cmp	r3, #9
 80091f4:	d94e      	bls.n	8009294 <_vfiprintf_r+0x1c4>
 80091f6:	b1b0      	cbz	r0, 8009226 <_vfiprintf_r+0x156>
 80091f8:	9207      	str	r2, [sp, #28]
 80091fa:	e014      	b.n	8009226 <_vfiprintf_r+0x156>
 80091fc:	eba0 0308 	sub.w	r3, r0, r8
 8009200:	fa09 f303 	lsl.w	r3, r9, r3
 8009204:	4313      	orrs	r3, r2
 8009206:	9304      	str	r3, [sp, #16]
 8009208:	46a2      	mov	sl, r4
 800920a:	e7d2      	b.n	80091b2 <_vfiprintf_r+0xe2>
 800920c:	9b03      	ldr	r3, [sp, #12]
 800920e:	1d19      	adds	r1, r3, #4
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	9103      	str	r1, [sp, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	bfbb      	ittet	lt
 8009218:	425b      	neglt	r3, r3
 800921a:	f042 0202 	orrlt.w	r2, r2, #2
 800921e:	9307      	strge	r3, [sp, #28]
 8009220:	9307      	strlt	r3, [sp, #28]
 8009222:	bfb8      	it	lt
 8009224:	9204      	strlt	r2, [sp, #16]
 8009226:	7823      	ldrb	r3, [r4, #0]
 8009228:	2b2e      	cmp	r3, #46	; 0x2e
 800922a:	d10c      	bne.n	8009246 <_vfiprintf_r+0x176>
 800922c:	7863      	ldrb	r3, [r4, #1]
 800922e:	2b2a      	cmp	r3, #42	; 0x2a
 8009230:	d135      	bne.n	800929e <_vfiprintf_r+0x1ce>
 8009232:	9b03      	ldr	r3, [sp, #12]
 8009234:	1d1a      	adds	r2, r3, #4
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	9203      	str	r2, [sp, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	bfb8      	it	lt
 800923e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009242:	3402      	adds	r4, #2
 8009244:	9305      	str	r3, [sp, #20]
 8009246:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800932c <_vfiprintf_r+0x25c>
 800924a:	7821      	ldrb	r1, [r4, #0]
 800924c:	2203      	movs	r2, #3
 800924e:	4650      	mov	r0, sl
 8009250:	f7f6 ffce 	bl	80001f0 <memchr>
 8009254:	b140      	cbz	r0, 8009268 <_vfiprintf_r+0x198>
 8009256:	2340      	movs	r3, #64	; 0x40
 8009258:	eba0 000a 	sub.w	r0, r0, sl
 800925c:	fa03 f000 	lsl.w	r0, r3, r0
 8009260:	9b04      	ldr	r3, [sp, #16]
 8009262:	4303      	orrs	r3, r0
 8009264:	3401      	adds	r4, #1
 8009266:	9304      	str	r3, [sp, #16]
 8009268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926c:	482c      	ldr	r0, [pc, #176]	; (8009320 <_vfiprintf_r+0x250>)
 800926e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009272:	2206      	movs	r2, #6
 8009274:	f7f6 ffbc 	bl	80001f0 <memchr>
 8009278:	2800      	cmp	r0, #0
 800927a:	d03f      	beq.n	80092fc <_vfiprintf_r+0x22c>
 800927c:	4b29      	ldr	r3, [pc, #164]	; (8009324 <_vfiprintf_r+0x254>)
 800927e:	bb1b      	cbnz	r3, 80092c8 <_vfiprintf_r+0x1f8>
 8009280:	9b03      	ldr	r3, [sp, #12]
 8009282:	3307      	adds	r3, #7
 8009284:	f023 0307 	bic.w	r3, r3, #7
 8009288:	3308      	adds	r3, #8
 800928a:	9303      	str	r3, [sp, #12]
 800928c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928e:	443b      	add	r3, r7
 8009290:	9309      	str	r3, [sp, #36]	; 0x24
 8009292:	e767      	b.n	8009164 <_vfiprintf_r+0x94>
 8009294:	fb0c 3202 	mla	r2, ip, r2, r3
 8009298:	460c      	mov	r4, r1
 800929a:	2001      	movs	r0, #1
 800929c:	e7a5      	b.n	80091ea <_vfiprintf_r+0x11a>
 800929e:	2300      	movs	r3, #0
 80092a0:	3401      	adds	r4, #1
 80092a2:	9305      	str	r3, [sp, #20]
 80092a4:	4619      	mov	r1, r3
 80092a6:	f04f 0c0a 	mov.w	ip, #10
 80092aa:	4620      	mov	r0, r4
 80092ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092b0:	3a30      	subs	r2, #48	; 0x30
 80092b2:	2a09      	cmp	r2, #9
 80092b4:	d903      	bls.n	80092be <_vfiprintf_r+0x1ee>
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0c5      	beq.n	8009246 <_vfiprintf_r+0x176>
 80092ba:	9105      	str	r1, [sp, #20]
 80092bc:	e7c3      	b.n	8009246 <_vfiprintf_r+0x176>
 80092be:	fb0c 2101 	mla	r1, ip, r1, r2
 80092c2:	4604      	mov	r4, r0
 80092c4:	2301      	movs	r3, #1
 80092c6:	e7f0      	b.n	80092aa <_vfiprintf_r+0x1da>
 80092c8:	ab03      	add	r3, sp, #12
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	462a      	mov	r2, r5
 80092ce:	4b16      	ldr	r3, [pc, #88]	; (8009328 <_vfiprintf_r+0x258>)
 80092d0:	a904      	add	r1, sp, #16
 80092d2:	4630      	mov	r0, r6
 80092d4:	f7fd fb10 	bl	80068f8 <_printf_float>
 80092d8:	4607      	mov	r7, r0
 80092da:	1c78      	adds	r0, r7, #1
 80092dc:	d1d6      	bne.n	800928c <_vfiprintf_r+0x1bc>
 80092de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092e0:	07d9      	lsls	r1, r3, #31
 80092e2:	d405      	bmi.n	80092f0 <_vfiprintf_r+0x220>
 80092e4:	89ab      	ldrh	r3, [r5, #12]
 80092e6:	059a      	lsls	r2, r3, #22
 80092e8:	d402      	bmi.n	80092f0 <_vfiprintf_r+0x220>
 80092ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ec:	f7ff f874 	bl	80083d8 <__retarget_lock_release_recursive>
 80092f0:	89ab      	ldrh	r3, [r5, #12]
 80092f2:	065b      	lsls	r3, r3, #25
 80092f4:	f53f af12 	bmi.w	800911c <_vfiprintf_r+0x4c>
 80092f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092fa:	e711      	b.n	8009120 <_vfiprintf_r+0x50>
 80092fc:	ab03      	add	r3, sp, #12
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	462a      	mov	r2, r5
 8009302:	4b09      	ldr	r3, [pc, #36]	; (8009328 <_vfiprintf_r+0x258>)
 8009304:	a904      	add	r1, sp, #16
 8009306:	4630      	mov	r0, r6
 8009308:	f7fd fd9a 	bl	8006e40 <_printf_i>
 800930c:	e7e4      	b.n	80092d8 <_vfiprintf_r+0x208>
 800930e:	bf00      	nop
 8009310:	08009850 	.word	0x08009850
 8009314:	08009870 	.word	0x08009870
 8009318:	08009830 	.word	0x08009830
 800931c:	080099ec 	.word	0x080099ec
 8009320:	080099f6 	.word	0x080099f6
 8009324:	080068f9 	.word	0x080068f9
 8009328:	080090ab 	.word	0x080090ab
 800932c:	080099f2 	.word	0x080099f2

08009330 <_sbrk_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d06      	ldr	r5, [pc, #24]	; (800934c <_sbrk_r+0x1c>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	f7f9 f88c 	bl	8002458 <_sbrk>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_sbrk_r+0x1a>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	b103      	cbz	r3, 800934a <_sbrk_r+0x1a>
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	200003b8 	.word	0x200003b8

08009350 <__sread>:
 8009350:	b510      	push	{r4, lr}
 8009352:	460c      	mov	r4, r1
 8009354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009358:	f000 f92c 	bl	80095b4 <_read_r>
 800935c:	2800      	cmp	r0, #0
 800935e:	bfab      	itete	ge
 8009360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009362:	89a3      	ldrhlt	r3, [r4, #12]
 8009364:	181b      	addge	r3, r3, r0
 8009366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800936a:	bfac      	ite	ge
 800936c:	6563      	strge	r3, [r4, #84]	; 0x54
 800936e:	81a3      	strhlt	r3, [r4, #12]
 8009370:	bd10      	pop	{r4, pc}

08009372 <__swrite>:
 8009372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009376:	461f      	mov	r7, r3
 8009378:	898b      	ldrh	r3, [r1, #12]
 800937a:	05db      	lsls	r3, r3, #23
 800937c:	4605      	mov	r5, r0
 800937e:	460c      	mov	r4, r1
 8009380:	4616      	mov	r6, r2
 8009382:	d505      	bpl.n	8009390 <__swrite+0x1e>
 8009384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009388:	2302      	movs	r3, #2
 800938a:	2200      	movs	r2, #0
 800938c:	f000 f898 	bl	80094c0 <_lseek_r>
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	4632      	mov	r2, r6
 800939e:	463b      	mov	r3, r7
 80093a0:	4628      	mov	r0, r5
 80093a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093a6:	f000 b817 	b.w	80093d8 <_write_r>

080093aa <__sseek>:
 80093aa:	b510      	push	{r4, lr}
 80093ac:	460c      	mov	r4, r1
 80093ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b2:	f000 f885 	bl	80094c0 <_lseek_r>
 80093b6:	1c43      	adds	r3, r0, #1
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	bf15      	itete	ne
 80093bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80093be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093c6:	81a3      	strheq	r3, [r4, #12]
 80093c8:	bf18      	it	ne
 80093ca:	81a3      	strhne	r3, [r4, #12]
 80093cc:	bd10      	pop	{r4, pc}

080093ce <__sclose>:
 80093ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d2:	f000 b831 	b.w	8009438 <_close_r>
	...

080093d8 <_write_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4d07      	ldr	r5, [pc, #28]	; (80093f8 <_write_r+0x20>)
 80093dc:	4604      	mov	r4, r0
 80093de:	4608      	mov	r0, r1
 80093e0:	4611      	mov	r1, r2
 80093e2:	2200      	movs	r2, #0
 80093e4:	602a      	str	r2, [r5, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	f7f8 fb32 	bl	8001a50 <_write>
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	d102      	bne.n	80093f6 <_write_r+0x1e>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	b103      	cbz	r3, 80093f6 <_write_r+0x1e>
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
 80093f8:	200003b8 	.word	0x200003b8

080093fc <__assert_func>:
 80093fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093fe:	4614      	mov	r4, r2
 8009400:	461a      	mov	r2, r3
 8009402:	4b09      	ldr	r3, [pc, #36]	; (8009428 <__assert_func+0x2c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4605      	mov	r5, r0
 8009408:	68d8      	ldr	r0, [r3, #12]
 800940a:	b14c      	cbz	r4, 8009420 <__assert_func+0x24>
 800940c:	4b07      	ldr	r3, [pc, #28]	; (800942c <__assert_func+0x30>)
 800940e:	9100      	str	r1, [sp, #0]
 8009410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009414:	4906      	ldr	r1, [pc, #24]	; (8009430 <__assert_func+0x34>)
 8009416:	462b      	mov	r3, r5
 8009418:	f000 f81e 	bl	8009458 <fiprintf>
 800941c:	f000 f8e9 	bl	80095f2 <abort>
 8009420:	4b04      	ldr	r3, [pc, #16]	; (8009434 <__assert_func+0x38>)
 8009422:	461c      	mov	r4, r3
 8009424:	e7f3      	b.n	800940e <__assert_func+0x12>
 8009426:	bf00      	nop
 8009428:	2000000c 	.word	0x2000000c
 800942c:	080099fd 	.word	0x080099fd
 8009430:	08009a0a 	.word	0x08009a0a
 8009434:	08009a38 	.word	0x08009a38

08009438 <_close_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d06      	ldr	r5, [pc, #24]	; (8009454 <_close_r+0x1c>)
 800943c:	2300      	movs	r3, #0
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	602b      	str	r3, [r5, #0]
 8009444:	f7f8 ffd3 	bl	80023ee <_close>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d102      	bne.n	8009452 <_close_r+0x1a>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	b103      	cbz	r3, 8009452 <_close_r+0x1a>
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	200003b8 	.word	0x200003b8

08009458 <fiprintf>:
 8009458:	b40e      	push	{r1, r2, r3}
 800945a:	b503      	push	{r0, r1, lr}
 800945c:	4601      	mov	r1, r0
 800945e:	ab03      	add	r3, sp, #12
 8009460:	4805      	ldr	r0, [pc, #20]	; (8009478 <fiprintf+0x20>)
 8009462:	f853 2b04 	ldr.w	r2, [r3], #4
 8009466:	6800      	ldr	r0, [r0, #0]
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	f7ff fe31 	bl	80090d0 <_vfiprintf_r>
 800946e:	b002      	add	sp, #8
 8009470:	f85d eb04 	ldr.w	lr, [sp], #4
 8009474:	b003      	add	sp, #12
 8009476:	4770      	bx	lr
 8009478:	2000000c 	.word	0x2000000c

0800947c <_fstat_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4d07      	ldr	r5, [pc, #28]	; (800949c <_fstat_r+0x20>)
 8009480:	2300      	movs	r3, #0
 8009482:	4604      	mov	r4, r0
 8009484:	4608      	mov	r0, r1
 8009486:	4611      	mov	r1, r2
 8009488:	602b      	str	r3, [r5, #0]
 800948a:	f7f8 ffbc 	bl	8002406 <_fstat>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d102      	bne.n	8009498 <_fstat_r+0x1c>
 8009492:	682b      	ldr	r3, [r5, #0]
 8009494:	b103      	cbz	r3, 8009498 <_fstat_r+0x1c>
 8009496:	6023      	str	r3, [r4, #0]
 8009498:	bd38      	pop	{r3, r4, r5, pc}
 800949a:	bf00      	nop
 800949c:	200003b8 	.word	0x200003b8

080094a0 <_isatty_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4d06      	ldr	r5, [pc, #24]	; (80094bc <_isatty_r+0x1c>)
 80094a4:	2300      	movs	r3, #0
 80094a6:	4604      	mov	r4, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	f7f8 ffbb 	bl	8002426 <_isatty>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_isatty_r+0x1a>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_isatty_r+0x1a>
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	200003b8 	.word	0x200003b8

080094c0 <_lseek_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4d07      	ldr	r5, [pc, #28]	; (80094e0 <_lseek_r+0x20>)
 80094c4:	4604      	mov	r4, r0
 80094c6:	4608      	mov	r0, r1
 80094c8:	4611      	mov	r1, r2
 80094ca:	2200      	movs	r2, #0
 80094cc:	602a      	str	r2, [r5, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	f7f8 ffb4 	bl	800243c <_lseek>
 80094d4:	1c43      	adds	r3, r0, #1
 80094d6:	d102      	bne.n	80094de <_lseek_r+0x1e>
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	b103      	cbz	r3, 80094de <_lseek_r+0x1e>
 80094dc:	6023      	str	r3, [r4, #0]
 80094de:	bd38      	pop	{r3, r4, r5, pc}
 80094e0:	200003b8 	.word	0x200003b8

080094e4 <__ascii_mbtowc>:
 80094e4:	b082      	sub	sp, #8
 80094e6:	b901      	cbnz	r1, 80094ea <__ascii_mbtowc+0x6>
 80094e8:	a901      	add	r1, sp, #4
 80094ea:	b142      	cbz	r2, 80094fe <__ascii_mbtowc+0x1a>
 80094ec:	b14b      	cbz	r3, 8009502 <__ascii_mbtowc+0x1e>
 80094ee:	7813      	ldrb	r3, [r2, #0]
 80094f0:	600b      	str	r3, [r1, #0]
 80094f2:	7812      	ldrb	r2, [r2, #0]
 80094f4:	1e10      	subs	r0, r2, #0
 80094f6:	bf18      	it	ne
 80094f8:	2001      	movne	r0, #1
 80094fa:	b002      	add	sp, #8
 80094fc:	4770      	bx	lr
 80094fe:	4610      	mov	r0, r2
 8009500:	e7fb      	b.n	80094fa <__ascii_mbtowc+0x16>
 8009502:	f06f 0001 	mvn.w	r0, #1
 8009506:	e7f8      	b.n	80094fa <__ascii_mbtowc+0x16>

08009508 <memmove>:
 8009508:	4288      	cmp	r0, r1
 800950a:	b510      	push	{r4, lr}
 800950c:	eb01 0402 	add.w	r4, r1, r2
 8009510:	d902      	bls.n	8009518 <memmove+0x10>
 8009512:	4284      	cmp	r4, r0
 8009514:	4623      	mov	r3, r4
 8009516:	d807      	bhi.n	8009528 <memmove+0x20>
 8009518:	1e43      	subs	r3, r0, #1
 800951a:	42a1      	cmp	r1, r4
 800951c:	d008      	beq.n	8009530 <memmove+0x28>
 800951e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009522:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009526:	e7f8      	b.n	800951a <memmove+0x12>
 8009528:	4402      	add	r2, r0
 800952a:	4601      	mov	r1, r0
 800952c:	428a      	cmp	r2, r1
 800952e:	d100      	bne.n	8009532 <memmove+0x2a>
 8009530:	bd10      	pop	{r4, pc}
 8009532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800953a:	e7f7      	b.n	800952c <memmove+0x24>

0800953c <__malloc_lock>:
 800953c:	4801      	ldr	r0, [pc, #4]	; (8009544 <__malloc_lock+0x8>)
 800953e:	f7fe bf4a 	b.w	80083d6 <__retarget_lock_acquire_recursive>
 8009542:	bf00      	nop
 8009544:	200003ac 	.word	0x200003ac

08009548 <__malloc_unlock>:
 8009548:	4801      	ldr	r0, [pc, #4]	; (8009550 <__malloc_unlock+0x8>)
 800954a:	f7fe bf45 	b.w	80083d8 <__retarget_lock_release_recursive>
 800954e:	bf00      	nop
 8009550:	200003ac 	.word	0x200003ac

08009554 <_realloc_r>:
 8009554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009558:	4680      	mov	r8, r0
 800955a:	4614      	mov	r4, r2
 800955c:	460e      	mov	r6, r1
 800955e:	b921      	cbnz	r1, 800956a <_realloc_r+0x16>
 8009560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009564:	4611      	mov	r1, r2
 8009566:	f7ff bbb9 	b.w	8008cdc <_malloc_r>
 800956a:	b92a      	cbnz	r2, 8009578 <_realloc_r+0x24>
 800956c:	f7ff fb4a 	bl	8008c04 <_free_r>
 8009570:	4625      	mov	r5, r4
 8009572:	4628      	mov	r0, r5
 8009574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009578:	f000 f842 	bl	8009600 <_malloc_usable_size_r>
 800957c:	4284      	cmp	r4, r0
 800957e:	4607      	mov	r7, r0
 8009580:	d802      	bhi.n	8009588 <_realloc_r+0x34>
 8009582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009586:	d812      	bhi.n	80095ae <_realloc_r+0x5a>
 8009588:	4621      	mov	r1, r4
 800958a:	4640      	mov	r0, r8
 800958c:	f7ff fba6 	bl	8008cdc <_malloc_r>
 8009590:	4605      	mov	r5, r0
 8009592:	2800      	cmp	r0, #0
 8009594:	d0ed      	beq.n	8009572 <_realloc_r+0x1e>
 8009596:	42bc      	cmp	r4, r7
 8009598:	4622      	mov	r2, r4
 800959a:	4631      	mov	r1, r6
 800959c:	bf28      	it	cs
 800959e:	463a      	movcs	r2, r7
 80095a0:	f7fe ff88 	bl	80084b4 <memcpy>
 80095a4:	4631      	mov	r1, r6
 80095a6:	4640      	mov	r0, r8
 80095a8:	f7ff fb2c 	bl	8008c04 <_free_r>
 80095ac:	e7e1      	b.n	8009572 <_realloc_r+0x1e>
 80095ae:	4635      	mov	r5, r6
 80095b0:	e7df      	b.n	8009572 <_realloc_r+0x1e>
	...

080095b4 <_read_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4d07      	ldr	r5, [pc, #28]	; (80095d4 <_read_r+0x20>)
 80095b8:	4604      	mov	r4, r0
 80095ba:	4608      	mov	r0, r1
 80095bc:	4611      	mov	r1, r2
 80095be:	2200      	movs	r2, #0
 80095c0:	602a      	str	r2, [r5, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	f7f8 fef6 	bl	80023b4 <_read>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_read_r+0x1e>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_read_r+0x1e>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	200003b8 	.word	0x200003b8

080095d8 <__ascii_wctomb>:
 80095d8:	b149      	cbz	r1, 80095ee <__ascii_wctomb+0x16>
 80095da:	2aff      	cmp	r2, #255	; 0xff
 80095dc:	bf85      	ittet	hi
 80095de:	238a      	movhi	r3, #138	; 0x8a
 80095e0:	6003      	strhi	r3, [r0, #0]
 80095e2:	700a      	strbls	r2, [r1, #0]
 80095e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80095e8:	bf98      	it	ls
 80095ea:	2001      	movls	r0, #1
 80095ec:	4770      	bx	lr
 80095ee:	4608      	mov	r0, r1
 80095f0:	4770      	bx	lr

080095f2 <abort>:
 80095f2:	b508      	push	{r3, lr}
 80095f4:	2006      	movs	r0, #6
 80095f6:	f000 f833 	bl	8009660 <raise>
 80095fa:	2001      	movs	r0, #1
 80095fc:	f7f8 fed0 	bl	80023a0 <_exit>

08009600 <_malloc_usable_size_r>:
 8009600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009604:	1f18      	subs	r0, r3, #4
 8009606:	2b00      	cmp	r3, #0
 8009608:	bfbc      	itt	lt
 800960a:	580b      	ldrlt	r3, [r1, r0]
 800960c:	18c0      	addlt	r0, r0, r3
 800960e:	4770      	bx	lr

08009610 <_raise_r>:
 8009610:	291f      	cmp	r1, #31
 8009612:	b538      	push	{r3, r4, r5, lr}
 8009614:	4604      	mov	r4, r0
 8009616:	460d      	mov	r5, r1
 8009618:	d904      	bls.n	8009624 <_raise_r+0x14>
 800961a:	2316      	movs	r3, #22
 800961c:	6003      	str	r3, [r0, #0]
 800961e:	f04f 30ff 	mov.w	r0, #4294967295
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009626:	b112      	cbz	r2, 800962e <_raise_r+0x1e>
 8009628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800962c:	b94b      	cbnz	r3, 8009642 <_raise_r+0x32>
 800962e:	4620      	mov	r0, r4
 8009630:	f000 f830 	bl	8009694 <_getpid_r>
 8009634:	462a      	mov	r2, r5
 8009636:	4601      	mov	r1, r0
 8009638:	4620      	mov	r0, r4
 800963a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800963e:	f000 b817 	b.w	8009670 <_kill_r>
 8009642:	2b01      	cmp	r3, #1
 8009644:	d00a      	beq.n	800965c <_raise_r+0x4c>
 8009646:	1c59      	adds	r1, r3, #1
 8009648:	d103      	bne.n	8009652 <_raise_r+0x42>
 800964a:	2316      	movs	r3, #22
 800964c:	6003      	str	r3, [r0, #0]
 800964e:	2001      	movs	r0, #1
 8009650:	e7e7      	b.n	8009622 <_raise_r+0x12>
 8009652:	2400      	movs	r4, #0
 8009654:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009658:	4628      	mov	r0, r5
 800965a:	4798      	blx	r3
 800965c:	2000      	movs	r0, #0
 800965e:	e7e0      	b.n	8009622 <_raise_r+0x12>

08009660 <raise>:
 8009660:	4b02      	ldr	r3, [pc, #8]	; (800966c <raise+0xc>)
 8009662:	4601      	mov	r1, r0
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	f7ff bfd3 	b.w	8009610 <_raise_r>
 800966a:	bf00      	nop
 800966c:	2000000c 	.word	0x2000000c

08009670 <_kill_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d07      	ldr	r5, [pc, #28]	; (8009690 <_kill_r+0x20>)
 8009674:	2300      	movs	r3, #0
 8009676:	4604      	mov	r4, r0
 8009678:	4608      	mov	r0, r1
 800967a:	4611      	mov	r1, r2
 800967c:	602b      	str	r3, [r5, #0]
 800967e:	f7f8 fe7f 	bl	8002380 <_kill>
 8009682:	1c43      	adds	r3, r0, #1
 8009684:	d102      	bne.n	800968c <_kill_r+0x1c>
 8009686:	682b      	ldr	r3, [r5, #0]
 8009688:	b103      	cbz	r3, 800968c <_kill_r+0x1c>
 800968a:	6023      	str	r3, [r4, #0]
 800968c:	bd38      	pop	{r3, r4, r5, pc}
 800968e:	bf00      	nop
 8009690:	200003b8 	.word	0x200003b8

08009694 <_getpid_r>:
 8009694:	f7f8 be6c 	b.w	8002370 <_getpid>

08009698 <_init>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	bf00      	nop
 800969c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969e:	bc08      	pop	{r3}
 80096a0:	469e      	mov	lr, r3
 80096a2:	4770      	bx	lr

080096a4 <_fini>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	bf00      	nop
 80096a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096aa:	bc08      	pop	{r3}
 80096ac:	469e      	mov	lr, r3
 80096ae:	4770      	bx	lr
